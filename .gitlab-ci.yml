workflow:
  rules:
    # Disable merge request pipelines
    - if: $CI_MERGE_REQUEST_ID
      when: never
    - when: always

variables:
  GIT_SUBMODULE_STRATEGY: recursive
  GH_PROJECT_PATH: "MatrixAI/${CI_PROJECT_NAME}"
  GH_PROJECT_URL: "https://${GITHUB_TOKEN}@github.com/${GH_PROJECT_PATH}.git"
  # Cache .npm
  npm_config_cache: "${CI_PROJECT_DIR}/tmp/npm"
  # Prefer offline node module installation
  npm_config_prefer_offline: "true"
  # Homebrew cache only used by macos runner
  HOMEBREW_CACHE: "${CI_PROJECT_DIR}/tmp/Homebrew"

default:
  image: registry.gitlab.com/matrixai/engineering/maintenance/gitlab-runner
  interruptible: true
  before_script:
    # Replace this in windows runners that use powershell
    # with `mkdir -Force "$CI_PROJECT_DIR/tmp"`
    - mkdir -p "$CI_PROJECT_DIR/tmp"

# Cached directories shared between jobs & pipelines per-branch per-runner
cache:
  key: $CI_COMMIT_REF_SLUG
  # Preserve cache even if job fails
  when: 'always'
  paths:
    - ./tmp/npm/
    # Homebrew cache is only used by the macos runner
    - ./tmp/Homebrew
    # Chocolatey cache is only used by the windows runner
    - ./tmp/chocolatey/
    # `jest` cache is configured in jest.config.js
    - ./tmp/jest/

stages:
  - check       # Linting, unit tests
  - build       # Cross-platform library compilation, unit tests
  - integration # Cross-platform application bundling, integration tests, and pre-release
  - release     # Cross-platform distribution and deployment

check:scratch:
  stage: check
  needs: []
  script:
    - >
      nix-shell --arg ci true --run $'
      npm test -- --ci tests/scratch.test.ts;
      '
  allow_failure: true
  rules:
    - when: manual

check:lint:
  stage: check
  needs: []
  script:
    - >
      nix-shell --arg ci true --run $'
      npm run lint;
      npm run lint-shell;
      '
  rules:
    # Runs on feature and staging commits and ignores version commits
    - if: $CI_COMMIT_BRANCH =~ /^(?:feature.*|staging)$/ && $CI_COMMIT_TITLE !~ /^[0-9]+\.[0-9]+\.[0-9]+(?:-.*[0-9]+)?$/
    # Runs on tag pipeline where the tag is a prerelease or release version
    - if: $CI_COMMIT_TAG =~ /^v[0-9]+\.[0-9]+\.[0-9]+(?:-.*[0-9]+)?$/
    # Manually run on commits other than master and ignore version commits
    - if: $CI_COMMIT_BRANCH && $CI_COMMIT_BRANCH != 'master' && $CI_COMMIT_TITLE !~ /^[0-9]+\.[0-9]+\.[0-9]+(?:-.*[0-9]+)?$/
      when: manual

check:test-generate:
  stage: check
  needs: []
  script:
    - >
      nix-shell --arg ci true --run $'
      ./scripts/check-test-generate.sh > ./tmp/check-test.yml;
      '
  artifacts:
    when: always
    paths:
      - ./tmp/check-test.yml
  rules:
    # Runs on feature commits and ignores version commits
    - if: $CI_COMMIT_BRANCH =~ /^feature.*$/ && $CI_COMMIT_TITLE !~ /^[0-9]+\.[0-9]+\.[0-9]+(?:-.*[0-9]+)?$/
    # Manually run on commits other than master and staging and ignore version commits
    - if: $CI_COMMIT_BRANCH && $CI_COMMIT_BRANCH !~ /^(?:master|staging)$/ && $CI_COMMIT_TITLE !~ /^[0-9]+\.[0-9]+\.[0-9]+(?:-.*[0-9]+)?$/
      when: manual

check:test:
  stage: check
  needs:
    - check:test-generate
  trigger:
    include:
      - artifact: tmp/check-test.yml
        job: check:test-generate
    strategy: depend
  inherit:
    variables: false
  variables:
    PARENT_PIPELINE_ID: $CI_PIPELINE_ID
  rules:
    # Runs on feature commits and ignores version commits
    - if: $CI_COMMIT_BRANCH =~ /^feature.*$/ && $CI_COMMIT_TITLE !~ /^[0-9]+\.[0-9]+\.[0-9]+(?:-.*[0-9]+)?$/
    # Manually run on commits other than master and staging and ignore version commits
    - if: $CI_COMMIT_BRANCH && $CI_COMMIT_BRANCH !~ /^(?:master|staging)$/ && $CI_COMMIT_TITLE !~ /^[0-9]+\.[0-9]+\.[0-9]+(?:-.*[0-9]+)?$/
      when: manual

build:merge:
  stage: build
  needs: []
  allow_failure: true
  script:
    # Required for `gh pr create`
    - git remote add upstream "$GH_PROJECT_URL"
    - >
      nix-shell --arg ci true --run $'
      gh pr create \
        --head staging \
        --base master \
        --title "ci: merge staging to master" \
        --body "This is an automatic PR generated by the pipeline CI/CD. This will be automatically fast-forward merged if successful." \
        --assignee "@me" \
        --no-maintainer-edit \
        --repo "$GH_PROJECT_PATH" || true;
      printf "Pipeline Attempt on ${CI_PIPELINE_ID} for ${CI_COMMIT_SHA}\n\n${CI_PIPELINE_URL}" \
      | gh pr comment staging \
        --body-file - \
        --repo "$GH_PROJECT_PATH";
      '
  rules:
    # Runs on staging commits and ignores version commits
    - if: $CI_COMMIT_BRANCH == 'staging' && $CI_COMMIT_TITLE !~ /^[0-9]+\.[0-9]+\.[0-9]+(?:-.*[0-9]+)?$/
    # Runs on tag pipeline where the tag is a prerelease or release version
    - if: $CI_COMMIT_TAG =~ /^v[0-9]+\.[0-9]+\.[0-9]+(?:-.*[0-9]+)?$/

build:dist:
  stage: build
  needs: []
  script:
    - >
      nix-shell --arg ci true --run $'
      npm run build --verbose;
      '
  artifacts:
    when: always
    paths:
      - ./dist
  rules:
    # Runs on staging commits and ignores version commits
    - if: $CI_COMMIT_BRANCH == 'staging' && $CI_COMMIT_TITLE !~ /^[0-9]+\.[0-9]+\.[0-9]+(?:-.*[0-9]+)?$/
    # Runs on tag pipeline where the tag is a prerelease or release version
    - if: $CI_COMMIT_TAG =~ /^v[0-9]+\.[0-9]+\.[0-9]+(?:-.*[0-9]+)?$/

build:platforms-generate:
  stage: build
  needs: []
  script:
    - >
        nix-shell --arg ci true --run $'
        ./scripts/build-platforms-generate.sh > ./tmp/build-platforms.yml;
        '
  artifacts:
    when: always
    paths:
      - ./tmp/build-platforms.yml
  rules:
    # Runs on staging commits and ignores version commits
    - if: $CI_COMMIT_BRANCH == 'staging' && $CI_COMMIT_TITLE !~ /^[0-9]+\.[0-9]+\.[0-9]+(?:-.*[0-9]+)?$/
    # Runs on tag pipeline where the tag is a prerelease or release version
    - if: $CI_COMMIT_TAG =~ /^v[0-9]+\.[0-9]+\.[0-9]+(?:-.*[0-9]+)?$/

build:platforms:
  stage: build
  needs:
    - build:platforms-generate
  trigger:
    include:
      - artifact: tmp/build-platforms.yml
        job: build:platforms-generate
    strategy: depend
  inherit:
    variables: false
  variables:
    PARENT_PIPELINE_ID: $CI_PIPELINE_ID
  rules:
    # Runs on staging commits and ignores version commits
    - if: $CI_COMMIT_BRANCH == 'staging' && $CI_COMMIT_TITLE !~ /^[0-9]+\.[0-9]+\.[0-9]+(?:-.*[0-9]+)?$/
    # Runs on tag pipeline where the tag is a prerelease or release version
    - if: $CI_COMMIT_TAG =~ /^v[0-9]+\.[0-9]+\.[0-9]+(?:-.*[0-9]+)?$/

build:prerelease:
  stage: build
  needs:
    - build:dist
    - build:platforms
  # Don't interrupt publishing job
  interruptible: false
  script:
    - echo "//registry.npmjs.org/:_authToken=$NPM_TOKEN" > ./.npmrc
    - echo 'Publishing library prerelease'
    - >
      nix-shell --arg ci true --run $'
      npm publish --tag prerelease --access public;
      '
  after_script:
    - rm -f ./.npmrc
  rules:
    # Only runs on tag pipeline where the tag is a prerelease version
    # This requires dependencies to also run on tag pipeline
    # However version tag comes with a version commit
    # Dependencies must not run on the version commit
    - if: $CI_COMMIT_TAG =~ /^v[0-9]+\.[0-9]+\.[0-9]+-.*[0-9]+$/

integration:merge:
  stage: integration
  needs:
    - build:merge
    - job: build:platforms
      optional: true
  # Requires mutual exclusion
  resource_group: integration:merge
  allow_failure: true
  variables:
    # Ensure that CI/CD is fetching all commits
    # this is necessary to checkout origin/master
    # and to also merge origin/staging
    GIT_DEPTH: 0
  script:
    - >
      nix-shell --arg ci true --run $'
      printf "Pipeline Succeeded on ${CI_PIPELINE_ID} for ${CI_COMMIT_SHA}\n\n${CI_PIPELINE_URL}" \
      | gh pr comment staging \
        --body-file - \
        --repo "$GH_PROJECT_PATH";
      '
    - git remote add upstream "$GH_PROJECT_URL"
    - git checkout origin/master
    # Merge up to the current commit (not the latest commit)
    - git merge --ff-only "$CI_COMMIT_SHA"
    - git push upstream HEAD:master
  rules:
    # Runs on staging commits and ignores version commits
    - if: $CI_COMMIT_BRANCH == 'staging' && $CI_COMMIT_TITLE !~ /^[0-9]+\.[0-9]+\.[0-9]+(?:-.*[0-9]+)?$/
    # Runs on tag pipeline where the tag is a prerelease or release version
    - if: $CI_COMMIT_TAG =~ /^v[0-9]+\.[0-9]+\.[0-9]+(?:-.*[0-9]+)?$/

release:distribution:
  stage: release
  needs:
    - build:dist
    - build:platforms
    - integration:merge
  # Don't interrupt publishing job
  interruptible: false
  # Requires mutual exclusion
  resource_group: release:distribution
  script:
    - echo "//registry.npmjs.org/:_authToken=$NPM_TOKEN" > ./.npmrc
    - echo 'Publishing library'
    - >
      nix-shell --arg ci true --run $'
      npm publish --access public;
      '
  after_script:
    - rm -f ./.npmrc
  rules:
    # Only runs on tag pipeline where the tag is a release version
    # This requires dependencies to also run on tag pipeline
    # However version tag comes with a version commit
    # Dependencies must not run on the version commit
    - if: $CI_COMMIT_TAG =~ /^v[0-9]+\.[0-9]+\.[0-9]+$/
