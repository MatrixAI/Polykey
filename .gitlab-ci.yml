workflow:
  rules:
    # Disable merge request pipelines
    - if: $CI_MERGE_REQUEST_ID
      when: never
    - when: always

default:
  interruptible: true

variables:
  GH_PROJECT_PATH: "MatrixAI/${CI_PROJECT_NAME}"
  GH_PROJECT_URL: "https://${GITHUB_TOKEN}@github.com/${GH_PROJECT_PATH}.git"
  GIT_SUBMODULE_STRATEGY: recursive
  # Cache .npm
  NPM_CONFIG_CACHE: "${CI_PROJECT_DIR}/tmp/npm"
  # Prefer offline node module installation
  NPM_CONFIG_PREFER_OFFLINE: "true"
  # `ts-node` has its own cache
  TS_CACHED_TRANSPILE_CACHE: "${CI_PROJECT_DIR}/tmp/ts-node-cache"
  TS_CACHED_TRANSPILE_PORTABLE: "true"
  # Homebrew cache only used by macos runner
  HOMEBREW_CACHE: "${CI_PROJECT_DIR}/tmp/Homebrew"

# Cached directories shared between jobs & pipelines per-branch per-runner
cache:
  key: $CI_COMMIT_REF_SLUG
  paths:
    - ./tmp/npm/
    - ./tmp/ts-node-cache/
    # Homebrew cache is only used by the macos runner
    - ./tmp/Homebrew
    # `jest` cache is configured in jest.config.js
    - ./tmp/jest/

stages:
  - check       # Linting, unit tests
  - build       # Cross-platform library compilation, unit tests
  - integration # Cross-platform application bundling, integration tests, and pre-release
  - release     # Cross-platform distribution and deployment

image: registry.gitlab.com/matrixai/engineering/maintenance/gitlab-runner

check:lint:
  stage: check
  needs: []
  script:
    - >
        nix-shell --run '
        npm run lint;
        '
  rules:
    # Runs on feature and staging commits and ignores version commits
    - if: $CI_COMMIT_BRANCH =~ /^(?:feature.*|staging)$/ && $CI_COMMIT_TITLE !~ /^[0-9]+\.[0-9]+\.[0-9]+(?:-.*[0-9]+)?$/
    # Runs on tag pipeline where the tag is a prerelease or release version
    - if: $CI_COMMIT_TAG =~ /^v[0-9]+\.[0-9]+\.[0-9]+(?:-.*[0-9]+)?$/
    # Manually run on commits other than master and ignore version commits
    - if: $CI_COMMIT_BRANCH && $CI_COMMIT_BRANCH != 'master' && $CI_COMMIT_TITLE !~ /^[0-9]+\.[0-9]+\.[0-9]+(?:-.*[0-9]+)?$/
      when: manual

check:docker-test:
  stage: check
  needs: []
  services:
    - docker:20.10.16-dind
  variables:
    DOCKER_TLS_CERTDIR: "/certs"
  script:
    - docker info
    - >
      nix-shell --run '
      node -v; npm -v;
      '

check:nix-dry:
  stage: check
  needs: []
  script:
    - nix-build -v -v --dry-run ./release.nix
  rules:
    # Runs on feature and staging commits and ignores version commits
    - if: $CI_COMMIT_BRANCH =~ /^(?:feature.*|staging)$/ && $CI_COMMIT_TITLE !~ /^[0-9]+\.[0-9]+\.[0-9]+(?:-.*[0-9]+)?$/
    # Runs on tag pipeline where the tag is a prerelease or release version
    - if: $CI_COMMIT_TAG =~ /^v[0-9]+\.[0-9]+\.[0-9]+(?:-.*[0-9]+)?$/
    # Manually run on commits other than master and ignore version commits
    - if: $CI_COMMIT_BRANCH && $CI_COMMIT_BRANCH != 'master' && $CI_COMMIT_TITLE !~ /^[0-9]+\.[0-9]+\.[0-9]+(?:-.*[0-9]+)?$/
      when: manual

check:test-generate:
  stage: check
  interruptible: true
  script:
    - mkdir -p ./tmp
    - >
        nix-shell --run '
        ./scripts/test-pipelines.sh > ./tmp/test-pipelines.yml
        '
  artifacts:
    when: always
    paths:
      - ./tmp/test-pipelines.yml
  rules:
    # Runs on feature and staging commits and ignores version commits
    - if: $CI_COMMIT_BRANCH =~ /^(?:feature.*|staging)$/ && $CI_COMMIT_TITLE !~ /^[0-9]+\.[0-9]+\.[0-9]+(?:-.*[0-9]+)?$/
    # Runs on tag pipeline where the tag is a prerelease or release version
    - if: $CI_COMMIT_TAG =~ /^v[0-9]+\.[0-9]+\.[0-9]+(?:-.*[0-9]+)?$/
    # Manually run on commits other than master and ignore version commits
    - if: $CI_COMMIT_BRANCH && $CI_COMMIT_BRANCH != 'master' && $CI_COMMIT_TITLE !~ /^[0-9]+\.[0-9]+\.[0-9]+(?:-.*[0-9]+)?$/
      when: manual

check:test:
  stage: check
  needs:
    - check:test-generate
  inherit:
    variables: false
  trigger:
    include:
      - artifact: tmp/test-pipelines.yml
        job: check:test-generate
    strategy: depend
  rules:
    # Runs on feature and staging commits and ignores version commits
    - if: $CI_COMMIT_BRANCH =~ /^(?:feature.*|staging)$/ && $CI_COMMIT_TITLE !~ /^[0-9]+\.[0-9]+\.[0-9]+(?:-.*[0-9]+)?$/
    # Runs on tag pipeline where the tag is a prerelease or release version
    - if: $CI_COMMIT_TAG =~ /^v[0-9]+\.[0-9]+\.[0-9]+(?:-.*[0-9]+)?$/
    # Manually run on commits other than master and ignore version commits
    - if: $CI_COMMIT_BRANCH && $CI_COMMIT_BRANCH != 'master' && $CI_COMMIT_TITLE !~ /^[0-9]+\.[0-9]+\.[0-9]+(?:-.*[0-9]+)?$/
      when: manual

build:merge:
  stage: build
  needs: []
  allow_failure: true
  script:
    # Required for `gh pr create`
    - git remote add upstream "$GH_PROJECT_URL"
    - >
        nix-shell -I nixpkgs=./pkgs.nix --packages gitAndTools.gh --run '
        gh pr create \
          --head staging \
          --base master \
          --title "ci: merge staging to master" \
          --body "This is an automatic PR generated by the pipeline CI/CD. This will be automatically fast-forward merged if successful." \
          --assignee "@me" \
          --no-maintainer-edit \
          --repo "$GH_PROJECT_PATH" || true;
        printf "Pipeline Attempt on ${CI_PIPELINE_ID} for ${CI_COMMIT_SHA}\n\n${CI_PIPELINE_URL}" \
        | gh pr comment staging \
          --body-file - \
          --repo "$GH_PROJECT_PATH";
        '
  rules:
    # Runs on staging commits and ignores version commits
    - if: $CI_COMMIT_BRANCH == 'staging' && $CI_COMMIT_TITLE !~ /^[0-9]+\.[0-9]+\.[0-9]+(?:-.*[0-9]+)?$/
    # Runs on tag pipeline where the tag is a prerelease or release version
    - if: $CI_COMMIT_TAG =~ /^v[0-9]+\.[0-9]+\.[0-9]+(?:-.*[0-9]+)?$/

build:linux:
  stage: build
  needs: []
  script:
    - >
        nix-shell --run '
        npm run build --verbose;
        '
  artifacts:
    when: always
    paths:
      # Only the build:linux preserves the dist
      - ./dist
  rules:
    # Runs on staging commits and ignores version commits
    - if: $CI_COMMIT_BRANCH == 'staging' && $CI_COMMIT_TITLE !~ /^[0-9]+\.[0-9]+\.[0-9]+(?:-.*[0-9]+)?$/
    # Runs on tag pipeline where the tag is a prerelease or release version
    - if: $CI_COMMIT_TAG =~ /^v[0-9]+\.[0-9]+\.[0-9]+(?:-.*[0-9]+)?$/

build:windows:
  stage: build
  needs: []
  tags:
    - windows
  before_script:
    - choco install nodejs --version=16.14.2 -y
    - refreshenv
  script:
    - npm config set msvs_version 2019
    - npm install --ignore-scripts
    - $env:Path = "$(npm bin);" + $env:Path
    - npm run build --verbose
    # - npm test -- --ci
  # artifacts:
  #   when: always
  #   reports:
  #     junit:
  #       - ./tmp/junit/junit.xml
  rules:
    # Runs on staging commits and ignores version commits
    - if: $CI_COMMIT_BRANCH == 'staging' && $CI_COMMIT_TITLE !~ /^[0-9]+\.[0-9]+\.[0-9]+(?:-.*[0-9]+)?$/
    # Runs on tag pipeline where the tag is a prerelease or release version
    - if: $CI_COMMIT_TAG =~ /^v[0-9]+\.[0-9]+\.[0-9]+(?:-.*[0-9]+)?$/

build:macos:
  stage: build
  needs: []
  tags:
    - shared-macos-amd64
  image: macos-11-xcode-12
  variables:
    HOMEBREW_NO_INSTALL_UPGRADE: "true"
    HOMEBREW_NO_INSTALL_CLEANUP: "true"
  before_script:
    - eval "$(brew shellenv)"
    - brew install node@16
    - brew link --overwrite node@16
    - hash -r
  script:
    - npm install --ignore-scripts
    - export PATH="$(npm bin):$PATH"
    - npm run build --verbose
    # - npm test -- --ci
  # artifacts:
  #   when: always
  #   reports:
  #     junit:
  #       - ./tmp/junit/junit.xml
  rules:
    # Runs on staging commits and ignores version commits
    - if: $CI_COMMIT_BRANCH == 'staging' && $CI_COMMIT_TITLE !~ /^[0-9]+\.[0-9]+\.[0-9]+(?:-.*[0-9]+)?$/
    # Runs on tag pipeline where the tag is a prerelease or release version
    - if: $CI_COMMIT_TAG =~ /^v[0-9]+\.[0-9]+\.[0-9]+(?:-.*[0-9]+)?$/

build:prerelease:
  stage: build
  needs:
    - build:linux
    - build:windows
    - build:macos
  # Don't interrupt publishing job
  interruptible: false
  before_script:
    - echo "//registry.npmjs.org/:_authToken=$NPM_TOKEN" > ./.npmrc
  script:
    - echo 'Publishing library prerelease'
    - >
        nix-shell --run '
        npm publish --tag prerelease --access public;
        '
  after_script:
    - rm -f ./.npmrc
  rules:
    # Only runs on tag pipeline where the tag is a prerelease version
    # This requires dependencies to also run on tag pipeline
    # However version tag comes with a version commit
    # Dependencies must not run on the version commit
    - if: $CI_COMMIT_TAG =~ /^v[0-9]+\.[0-9]+\.[0-9]+-.*[0-9]+$/

integration:builds:
  stage: integration
  needs:
    - build:linux
    - build:windows
    - build:macos
  script:
    - mkdir -p ./builds
    - >
        build_application="$(nix-build \
          --max-jobs "$(nproc)" --cores "$(nproc)" \
          ./release.nix  \
          --attr application \
        )"
    - >
        nix-store --export $( \
          nix-store --query --requisites "$build_application" \
        ) | gzip > ./builds/js-polykey.closure.gz
    # non-nix targets
    - >
        builds="$(nix-build \
          --max-jobs "$(nproc)" --cores "$(nproc)" \
          ./release.nix \
          --attr docker \
          --attr package.linux.x64.elf \
          --attr package.windows.x64.exe \
          --attr package.macos.x64.macho \
          --attr package.macos.arm64.macho)"
    - cp -r $builds ./builds/
  artifacts:
    paths:
      - ./builds/
  rules:
    # Runs on staging commits and ignores version commits
    - if: $CI_COMMIT_BRANCH == 'staging' && $CI_COMMIT_TITLE !~ /^[0-9]+\.[0-9]+\.[0-9]+(?:-.*[0-9]+)?$/
    # Runs on tag pipeline where the tag is a prerelease or release version
    - if: $CI_COMMIT_TAG =~ /^v[0-9]+\.[0-9]+\.[0-9]+(?:-.*[0-9]+)?$/

integration:deployment:
  stage: integration
  needs:
    - integration:builds
  # Don't interrupt deploying job
  interruptible: false
  # Requires mutual exclusion
  resource_group: integration:deployment
  script:
    - echo 'Perform service deployment for integration testing'
  rules:
    # Runs on staging commits and ignores version commits
    - if: $CI_COMMIT_BRANCH == 'staging' && $CI_COMMIT_TITLE !~ /^[0-9]+\.[0-9]+\.[0-9]+(?:-.*[0-9]+)?$/
    # Runs on tag pipeline where the tag is a prerelease or release version
    - if: $CI_COMMIT_TAG =~ /^v[0-9]+\.[0-9]+\.[0-9]+(?:-.*[0-9]+)?$/

integration:nix:
  stage: integration
  needs:
    - integration:builds
    - job: integration:deployment
      optional: true
  script:
    - >
        build_application="$( \
          gunzip -c ./builds/js-polykey.closure.gz | \
          nix-store --import | \
          tail -1 \
        )"
    - $build_application/bin/polykey
  rules:
    # Runs on staging commits and ignores version commits
    - if: $CI_COMMIT_BRANCH == 'staging' && $CI_COMMIT_TITLE !~ /^[0-9]+\.[0-9]+\.[0-9]+(?:-.*[0-9]+)?$/
    # Runs on tag pipeline where the tag is a prerelease or release version
    - if: $CI_COMMIT_TAG =~ /^v[0-9]+\.[0-9]+\.[0-9]+(?:-.*[0-9]+)?$/

integration:docker:
  stage: integration
  needs:
    - integration:builds
    - job: integration:deployment
      optional: true
#  image: docker:20.10.11
  services:
    - docker:20.10.16-dind
  variables:
    DOCKER_TLS_CERTDIR: "/certs"
  before_script:
    - docker info
  script:
    - image="$(docker load --input ./builds/*docker* | cut -d' ' -f3)"
    - docker run "$image"
  rules:
    # Runs on staging commits and ignores version commits
    - if: $CI_COMMIT_BRANCH == 'staging' && $CI_COMMIT_TITLE !~ /^[0-9]+\.[0-9]+\.[0-9]+(?:-.*[0-9]+)?$/
    # Runs on tag pipeline where the tag is a prerelease or release version
    - if: $CI_COMMIT_TAG =~ /^v[0-9]+\.[0-9]+\.[0-9]+(?:-.*[0-9]+)?$/

integration:linux:
  stage: integration
  needs:
    - integration:builds
    - job: integration:deployment
      optional: true
  image: ubuntu:latest
  script:
    - for f in ./builds/*-linux-*; do "$f"; done
  rules:
    # Runs on staging commits and ignores version commits
    - if: $CI_COMMIT_BRANCH == 'staging' && $CI_COMMIT_TITLE !~ /^[0-9]+\.[0-9]+\.[0-9]+(?:-.*[0-9]+)?$/
    # Runs on tag pipeline where the tag is a prerelease or release version
    - if: $CI_COMMIT_TAG =~ /^v[0-9]+\.[0-9]+\.[0-9]+(?:-.*[0-9]+)?$/

integration:windows:
  stage: integration
  needs:
    - integration:builds
    - job: integration:deployment
      optional: true
  tags:
    - windows
  script:
    - Get-ChildItem -File ./builds/*-win-* | ForEach {& $_.FullName}
  rules:
    # Runs on staging commits and ignores version commits
    - if: $CI_COMMIT_BRANCH == 'staging' && $CI_COMMIT_TITLE !~ /^[0-9]+\.[0-9]+\.[0-9]+(?:-.*[0-9]+)?$/
    # Runs on tag pipeline where the tag is a prerelease or release version
    - if: $CI_COMMIT_TAG =~ /^v[0-9]+\.[0-9]+\.[0-9]+(?:-.*[0-9]+)?$/

integration:macos:
  stage: integration
  needs:
    - integration:builds
    - job: integration:deployment
      optional: true
  tags:
    - shared-macos-amd64
  image: macos-11-xcode-12
  script:
    - for f in ./builds/*-macos-x64*; do "$f"; done
  rules:
    # Runs on staging commits and ignores version commits
    - if: $CI_COMMIT_BRANCH == 'staging' && $CI_COMMIT_TITLE !~ /^[0-9]+\.[0-9]+\.[0-9]+(?:-.*[0-9]+)?$/
    # Runs on tag pipeline where the tag is a prerelease or release version
    - if: $CI_COMMIT_TAG =~ /^v[0-9]+\.[0-9]+\.[0-9]+(?:-.*[0-9]+)?$/

integration:prerelease:
  stage: integration
  needs:
    - integration:builds
    - job: build:prerelease
      optional: true
    - job: integration:nix
      optional: true
    - job: integration:docker
      optional: true
    - job: integration:linux
      optional: true
    - job: integration:windows
      optional: true
    - job: integration:macos
      optional: true
  # Don't interrupt publishing job
  interruptible: false
  script:
    - echo 'Publishing application prerelease'
    - >
        nix-shell -I nixpkgs=./pkgs.nix --packages gitAndTools.gh --run '
        if gh release view "$CI_COMMIT_TAG" --repo "$GH_PROJECT_PATH" >/dev/null; then \
          gh release \
            upload "$CI_COMMIT_TAG" \
            builds/*.closure.gz \
            builds/*-docker-* \
            builds/*-linux-* \
            builds/*-win-* \
            builds/*-macos-* \
            --clobber \
            --repo "$GH_PROJECT_PATH"; \
        else \
          gh release \
            create "$CI_COMMIT_TAG" \
            builds/*.closure.gz \
            builds/*-docker-* \
            builds/*-linux-* \
            builds/*-win-* \
            builds/*-macos-* \
            --title "${CI_COMMIT_TAG}-$(date -u +"%Y-%m-%dT%H:%M:%SZ")" \
            --notes "" \
            --prerelease \
            --target staging \
            --repo "$GH_PROJECT_PATH"; \
        fi;
        '
  rules:
    # Only runs on tag pipeline where the tag is a prerelease version
    # This requires dependencies to also run on tag pipeline
    # However version tag comes with a version commit
    # Dependencies must not run on the version commit
    - if: $CI_COMMIT_TAG =~ /^v[0-9]+\.[0-9]+\.[0-9]+-.*[0-9]+$/

integration:merge:
  stage: integration
  needs:
    - build:merge
    - job: build:linux
      optional: true
    - job: build:windows
      optional: true
    - job: build:macos
      optional: true
    - job: integration:nix
      optional: true
    - job: integration:docker
      optional: true
    - job: integration:linux
      optional: true
    - job: integration:windows
      optional: true
    - job: integration:macos
      optional: true
  # Requires mutual exclusion
  resource_group: integration:merge
  allow_failure: true
  variables:
    # Ensure that CI/CD is fetching all commits
    # this is necessary to checkout origin/master
    # and to also merge origin/staging
    GIT_DEPTH: 0
  script:
    - >
        nix-shell -I nixpkgs=./pkgs.nix --packages gitAndTools.gh --run '
        printf "Pipeline Succeeded on ${CI_PIPELINE_ID} for ${CI_COMMIT_SHA}\n\n${CI_PIPELINE_URL}" \
        | gh pr comment staging \
          --body-file - \
          --repo "$GH_PROJECT_PATH";
        '
    - git remote add upstream "$GH_PROJECT_URL"
    - git checkout origin/master
    # Merge up to the current commit (not the latest commit)
    - git merge --ff-only "$CI_COMMIT_SHA"
    - git push upstream HEAD:master
  rules:
    # Runs on staging commits and ignores version commits
    - if: $CI_COMMIT_BRANCH == 'staging' && $CI_COMMIT_TITLE !~ /^[0-9]+\.[0-9]+\.[0-9]+(?:-.*[0-9]+)?$/
    # Runs on tag pipeline where the tag is a prerelease or release version
    - if: $CI_COMMIT_TAG =~ /^v[0-9]+\.[0-9]+\.[0-9]+(?:-.*[0-9]+)?$/

release:deployment:branch:
  stage: release
  # Only needs integration:builds from the staging branch pipeline
  needs:
    - project: $CI_PROJECT_PATH
      job: integration:builds
      ref: staging
      artifacts: true
  # Don't interrupt deploying job
  interruptible: false
  # Requires mutual exclusion (also with release:deployment:tag)
  resource_group: release:deployment
  script:
    - echo 'Perform service deployment for production'
  rules:
    # Runs on master commits and ignores version commits
    - if: $CI_COMMIT_BRANCH == 'master' && $CI_COMMIT_TITLE !~ /^[0-9]+\.[0-9]+\.[0-9]+(?:-.*[0-9]+)?$/

release:deployment:tag:
  stage: release
  # Tag pipelines run independently
  needs:
    - integration:builds
    - integration:merge
  # Don't interrupt deploying job
  interruptible: false
  # Requires mutual exclusion (also with release:deployment:branch)
  resource_group: release:deployment
  script:
    - echo 'Perform service deployment for production'
  rules:
    # Runs on tag pipeline where the tag is a release version
    - if: $CI_COMMIT_TAG =~ /^v[0-9]+\.[0-9]+\.[0-9]+$/

release:distribution:
  stage: release
  needs:
    - build:linux
    - build:windows
    - build:macos
    - integration:builds
    - integration:merge
    - release:deployment:tag
  # Don't interrupt publishing job
  interruptible: false
  before_script:
    - echo "//registry.npmjs.org/:_authToken=$NPM_TOKEN" > ./.npmrc
  script:
    - echo 'Publishing library & application release'
    - >
        nix-shell --run '
        npm publish --access public;
        '
    - >
        nix-shell -I nixpkgs=./pkgs.nix --packages gitAndTools.gh --run '
        gh release \
          create "$CI_COMMIT_TAG" \
          builds/*.closure.gz \
          builds/*-docker-* \
          builds/*-linux-* \
          builds/*-win-* \
          builds/*-macos-* \
          --title "${CI_COMMIT_TAG}-$(date -u +"%Y-%m-%dT%H:%M:%SZ")" \
          --notes "" \
          --target master \
          --repo "$GH_PROJECT_PATH";
        '
  after_script:
    - rm -f ./.npmrc
  rules:
    # Only runs on tag pipeline where the tag is a release version
    # This requires dependencies to also run on tag pipeline
    # However version tag comes with a version commit
    # Dependencies must not run on the version commit
    - if: $CI_COMMIT_TAG =~ /^v[0-9]+\.[0-9]+\.[0-9]+$/
