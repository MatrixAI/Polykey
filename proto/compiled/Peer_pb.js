// source: Peer.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

goog.exportSymbol('proto.peerInterface.CAMessage', null, global);
goog.exportSymbol('proto.peerInterface.CAMessageType', null, global);
goog.exportSymbol('proto.peerInterface.DirectConnectionMessage', null, global);
goog.exportSymbol('proto.peerInterface.ErrorMessage', null, global);
goog.exportSymbol('proto.peerInterface.HolePunchConnectionMessage', null, global);
goog.exportSymbol('proto.peerInterface.MTPPacket', null, global);
goog.exportSymbol('proto.peerInterface.NatMessage', null, global);
goog.exportSymbol('proto.peerInterface.NatMessageType', null, global);
goog.exportSymbol('proto.peerInterface.PeerDHTFindNodeMessage', null, global);
goog.exportSymbol('proto.peerInterface.PeerDHTMessage', null, global);
goog.exportSymbol('proto.peerInterface.PeerDHTMessageType', null, global);
goog.exportSymbol('proto.peerInterface.PeerDHTPingNodeMessage', null, global);
goog.exportSymbol('proto.peerInterface.PeerInfoListMessage', null, global);
goog.exportSymbol('proto.peerInterface.PeerInfoMessage', null, global);
goog.exportSymbol('proto.peerInterface.PeerMessage', null, global);
goog.exportSymbol('proto.peerInterface.PingPeerMessage', null, global);
goog.exportSymbol('proto.peerInterface.RelayConnectionMessage', null, global);
goog.exportSymbol('proto.peerInterface.SubServiceType', null, global);
goog.exportSymbol('proto.peerInterface.UDPAddressMessage', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.peerInterface.PeerMessage = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.peerInterface.PeerMessage, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.peerInterface.PeerMessage.displayName = 'proto.peerInterface.PeerMessage';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.peerInterface.PingPeerMessage = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.peerInterface.PingPeerMessage, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.peerInterface.PingPeerMessage.displayName = 'proto.peerInterface.PingPeerMessage';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.peerInterface.PeerInfoMessage = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.peerInterface.PeerInfoMessage, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.peerInterface.PeerInfoMessage.displayName = 'proto.peerInterface.PeerInfoMessage';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.peerInterface.PeerInfoListMessage = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.peerInterface.PeerInfoListMessage.repeatedFields_, null);
};
goog.inherits(proto.peerInterface.PeerInfoListMessage, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.peerInterface.PeerInfoListMessage.displayName = 'proto.peerInterface.PeerInfoListMessage';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.peerInterface.ErrorMessage = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.peerInterface.ErrorMessage, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.peerInterface.ErrorMessage.displayName = 'proto.peerInterface.ErrorMessage';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.peerInterface.NatMessage = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.peerInterface.NatMessage, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.peerInterface.NatMessage.displayName = 'proto.peerInterface.NatMessage';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.peerInterface.UDPAddressMessage = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.peerInterface.UDPAddressMessage, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.peerInterface.UDPAddressMessage.displayName = 'proto.peerInterface.UDPAddressMessage';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.peerInterface.DirectConnectionMessage = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.peerInterface.DirectConnectionMessage, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.peerInterface.DirectConnectionMessage.displayName = 'proto.peerInterface.DirectConnectionMessage';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.peerInterface.HolePunchConnectionMessage = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.peerInterface.HolePunchConnectionMessage, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.peerInterface.HolePunchConnectionMessage.displayName = 'proto.peerInterface.HolePunchConnectionMessage';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.peerInterface.RelayConnectionMessage = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.peerInterface.RelayConnectionMessage, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.peerInterface.RelayConnectionMessage.displayName = 'proto.peerInterface.RelayConnectionMessage';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.peerInterface.CAMessage = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.peerInterface.CAMessage, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.peerInterface.CAMessage.displayName = 'proto.peerInterface.CAMessage';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.peerInterface.PeerDHTMessage = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.peerInterface.PeerDHTMessage, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.peerInterface.PeerDHTMessage.displayName = 'proto.peerInterface.PeerDHTMessage';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.peerInterface.PeerDHTPingNodeMessage = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.peerInterface.PeerDHTPingNodeMessage, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.peerInterface.PeerDHTPingNodeMessage.displayName = 'proto.peerInterface.PeerDHTPingNodeMessage';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.peerInterface.PeerDHTFindNodeMessage = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.peerInterface.PeerDHTFindNodeMessage.repeatedFields_, null);
};
goog.inherits(proto.peerInterface.PeerDHTFindNodeMessage, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.peerInterface.PeerDHTFindNodeMessage.displayName = 'proto.peerInterface.PeerDHTFindNodeMessage';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.peerInterface.MTPPacket = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.peerInterface.MTPPacket, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.peerInterface.MTPPacket.displayName = 'proto.peerInterface.MTPPacket';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.peerInterface.PeerMessage.prototype.toObject = function(opt_includeInstance) {
  return proto.peerInterface.PeerMessage.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.peerInterface.PeerMessage} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.peerInterface.PeerMessage.toObject = function(includeInstance, msg) {
  var f, obj = {
    publicKey: jspb.Message.getFieldWithDefault(msg, 1, ""),
    type: jspb.Message.getFieldWithDefault(msg, 2, 0),
    subMessage: jspb.Message.getFieldWithDefault(msg, 3, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.peerInterface.PeerMessage}
 */
proto.peerInterface.PeerMessage.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.peerInterface.PeerMessage;
  return proto.peerInterface.PeerMessage.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.peerInterface.PeerMessage} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.peerInterface.PeerMessage}
 */
proto.peerInterface.PeerMessage.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setPublicKey(value);
      break;
    case 2:
      var value = /** @type {!proto.peerInterface.SubServiceType} */ (reader.readEnum());
      msg.setType(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setSubMessage(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.peerInterface.PeerMessage.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.peerInterface.PeerMessage.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.peerInterface.PeerMessage} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.peerInterface.PeerMessage.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPublicKey();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getType();
  if (f !== 0.0) {
    writer.writeEnum(
      2,
      f
    );
  }
  f = message.getSubMessage();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
};


/**
 * optional string public_key = 1;
 * @return {string}
 */
proto.peerInterface.PeerMessage.prototype.getPublicKey = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.peerInterface.PeerMessage} returns this
 */
proto.peerInterface.PeerMessage.prototype.setPublicKey = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional SubServiceType type = 2;
 * @return {!proto.peerInterface.SubServiceType}
 */
proto.peerInterface.PeerMessage.prototype.getType = function() {
  return /** @type {!proto.peerInterface.SubServiceType} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {!proto.peerInterface.SubServiceType} value
 * @return {!proto.peerInterface.PeerMessage} returns this
 */
proto.peerInterface.PeerMessage.prototype.setType = function(value) {
  return jspb.Message.setProto3EnumField(this, 2, value);
};


/**
 * optional string sub_message = 3;
 * @return {string}
 */
proto.peerInterface.PeerMessage.prototype.getSubMessage = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.peerInterface.PeerMessage} returns this
 */
proto.peerInterface.PeerMessage.prototype.setSubMessage = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.peerInterface.PingPeerMessage.prototype.toObject = function(opt_includeInstance) {
  return proto.peerInterface.PingPeerMessage.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.peerInterface.PingPeerMessage} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.peerInterface.PingPeerMessage.toObject = function(includeInstance, msg) {
  var f, obj = {
    publicKey: jspb.Message.getFieldWithDefault(msg, 1, ""),
    challenge: jspb.Message.getFieldWithDefault(msg, 2, ""),
    peerinfo: (f = msg.getPeerinfo()) && proto.peerInterface.PeerInfoMessage.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.peerInterface.PingPeerMessage}
 */
proto.peerInterface.PingPeerMessage.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.peerInterface.PingPeerMessage;
  return proto.peerInterface.PingPeerMessage.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.peerInterface.PingPeerMessage} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.peerInterface.PingPeerMessage}
 */
proto.peerInterface.PingPeerMessage.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setPublicKey(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setChallenge(value);
      break;
    case 3:
      var value = new proto.peerInterface.PeerInfoMessage;
      reader.readMessage(value,proto.peerInterface.PeerInfoMessage.deserializeBinaryFromReader);
      msg.setPeerinfo(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.peerInterface.PingPeerMessage.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.peerInterface.PingPeerMessage.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.peerInterface.PingPeerMessage} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.peerInterface.PingPeerMessage.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPublicKey();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getChallenge();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getPeerinfo();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.peerInterface.PeerInfoMessage.serializeBinaryToWriter
    );
  }
};


/**
 * optional string public_key = 1;
 * @return {string}
 */
proto.peerInterface.PingPeerMessage.prototype.getPublicKey = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.peerInterface.PingPeerMessage} returns this
 */
proto.peerInterface.PingPeerMessage.prototype.setPublicKey = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string challenge = 2;
 * @return {string}
 */
proto.peerInterface.PingPeerMessage.prototype.getChallenge = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.peerInterface.PingPeerMessage} returns this
 */
proto.peerInterface.PingPeerMessage.prototype.setChallenge = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional PeerInfoMessage peerInfo = 3;
 * @return {?proto.peerInterface.PeerInfoMessage}
 */
proto.peerInterface.PingPeerMessage.prototype.getPeerinfo = function() {
  return /** @type{?proto.peerInterface.PeerInfoMessage} */ (
    jspb.Message.getWrapperField(this, proto.peerInterface.PeerInfoMessage, 3));
};


/**
 * @param {?proto.peerInterface.PeerInfoMessage|undefined} value
 * @return {!proto.peerInterface.PingPeerMessage} returns this
*/
proto.peerInterface.PingPeerMessage.prototype.setPeerinfo = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.peerInterface.PingPeerMessage} returns this
 */
proto.peerInterface.PingPeerMessage.prototype.clearPeerinfo = function() {
  return this.setPeerinfo(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.peerInterface.PingPeerMessage.prototype.hasPeerinfo = function() {
  return jspb.Message.getField(this, 3) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.peerInterface.PeerInfoMessage.prototype.toObject = function(opt_includeInstance) {
  return proto.peerInterface.PeerInfoMessage.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.peerInterface.PeerInfoMessage} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.peerInterface.PeerInfoMessage.toObject = function(includeInstance, msg) {
  var f, obj = {
    publicKey: jspb.Message.getFieldWithDefault(msg, 1, ""),
    rootCertificate: jspb.Message.getFieldWithDefault(msg, 2, ""),
    peerAddress: jspb.Message.getFieldWithDefault(msg, 3, ""),
    apiAddress: jspb.Message.getFieldWithDefault(msg, 4, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.peerInterface.PeerInfoMessage}
 */
proto.peerInterface.PeerInfoMessage.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.peerInterface.PeerInfoMessage;
  return proto.peerInterface.PeerInfoMessage.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.peerInterface.PeerInfoMessage} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.peerInterface.PeerInfoMessage}
 */
proto.peerInterface.PeerInfoMessage.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setPublicKey(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setRootCertificate(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setPeerAddress(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setApiAddress(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.peerInterface.PeerInfoMessage.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.peerInterface.PeerInfoMessage.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.peerInterface.PeerInfoMessage} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.peerInterface.PeerInfoMessage.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPublicKey();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getRootCertificate();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getPeerAddress();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getApiAddress();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
};


/**
 * optional string public_key = 1;
 * @return {string}
 */
proto.peerInterface.PeerInfoMessage.prototype.getPublicKey = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.peerInterface.PeerInfoMessage} returns this
 */
proto.peerInterface.PeerInfoMessage.prototype.setPublicKey = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string root_certificate = 2;
 * @return {string}
 */
proto.peerInterface.PeerInfoMessage.prototype.getRootCertificate = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.peerInterface.PeerInfoMessage} returns this
 */
proto.peerInterface.PeerInfoMessage.prototype.setRootCertificate = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string peer_address = 3;
 * @return {string}
 */
proto.peerInterface.PeerInfoMessage.prototype.getPeerAddress = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.peerInterface.PeerInfoMessage} returns this
 */
proto.peerInterface.PeerInfoMessage.prototype.setPeerAddress = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string api_address = 4;
 * @return {string}
 */
proto.peerInterface.PeerInfoMessage.prototype.getApiAddress = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.peerInterface.PeerInfoMessage} returns this
 */
proto.peerInterface.PeerInfoMessage.prototype.setApiAddress = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.peerInterface.PeerInfoListMessage.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.peerInterface.PeerInfoListMessage.prototype.toObject = function(opt_includeInstance) {
  return proto.peerInterface.PeerInfoListMessage.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.peerInterface.PeerInfoListMessage} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.peerInterface.PeerInfoListMessage.toObject = function(includeInstance, msg) {
  var f, obj = {
    peerInfoListList: jspb.Message.toObjectList(msg.getPeerInfoListList(),
    proto.peerInterface.PeerInfoMessage.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.peerInterface.PeerInfoListMessage}
 */
proto.peerInterface.PeerInfoListMessage.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.peerInterface.PeerInfoListMessage;
  return proto.peerInterface.PeerInfoListMessage.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.peerInterface.PeerInfoListMessage} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.peerInterface.PeerInfoListMessage}
 */
proto.peerInterface.PeerInfoListMessage.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.peerInterface.PeerInfoMessage;
      reader.readMessage(value,proto.peerInterface.PeerInfoMessage.deserializeBinaryFromReader);
      msg.addPeerInfoList(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.peerInterface.PeerInfoListMessage.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.peerInterface.PeerInfoListMessage.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.peerInterface.PeerInfoListMessage} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.peerInterface.PeerInfoListMessage.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPeerInfoListList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.peerInterface.PeerInfoMessage.serializeBinaryToWriter
    );
  }
};


/**
 * repeated PeerInfoMessage peer_info_list = 1;
 * @return {!Array<!proto.peerInterface.PeerInfoMessage>}
 */
proto.peerInterface.PeerInfoListMessage.prototype.getPeerInfoListList = function() {
  return /** @type{!Array<!proto.peerInterface.PeerInfoMessage>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.peerInterface.PeerInfoMessage, 1));
};


/**
 * @param {!Array<!proto.peerInterface.PeerInfoMessage>} value
 * @return {!proto.peerInterface.PeerInfoListMessage} returns this
*/
proto.peerInterface.PeerInfoListMessage.prototype.setPeerInfoListList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.peerInterface.PeerInfoMessage=} opt_value
 * @param {number=} opt_index
 * @return {!proto.peerInterface.PeerInfoMessage}
 */
proto.peerInterface.PeerInfoListMessage.prototype.addPeerInfoList = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.peerInterface.PeerInfoMessage, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.peerInterface.PeerInfoListMessage} returns this
 */
proto.peerInterface.PeerInfoListMessage.prototype.clearPeerInfoListList = function() {
  return this.setPeerInfoListList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.peerInterface.ErrorMessage.prototype.toObject = function(opt_includeInstance) {
  return proto.peerInterface.ErrorMessage.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.peerInterface.ErrorMessage} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.peerInterface.ErrorMessage.toObject = function(includeInstance, msg) {
  var f, obj = {
    error: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.peerInterface.ErrorMessage}
 */
proto.peerInterface.ErrorMessage.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.peerInterface.ErrorMessage;
  return proto.peerInterface.ErrorMessage.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.peerInterface.ErrorMessage} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.peerInterface.ErrorMessage}
 */
proto.peerInterface.ErrorMessage.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setError(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.peerInterface.ErrorMessage.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.peerInterface.ErrorMessage.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.peerInterface.ErrorMessage} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.peerInterface.ErrorMessage.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getError();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string error = 1;
 * @return {string}
 */
proto.peerInterface.ErrorMessage.prototype.getError = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.peerInterface.ErrorMessage} returns this
 */
proto.peerInterface.ErrorMessage.prototype.setError = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.peerInterface.NatMessage.prototype.toObject = function(opt_includeInstance) {
  return proto.peerInterface.NatMessage.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.peerInterface.NatMessage} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.peerInterface.NatMessage.toObject = function(includeInstance, msg) {
  var f, obj = {
    type: jspb.Message.getFieldWithDefault(msg, 1, 0),
    isResponse: jspb.Message.getBooleanFieldWithDefault(msg, 2, false),
    subMessage: msg.getSubMessage_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.peerInterface.NatMessage}
 */
proto.peerInterface.NatMessage.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.peerInterface.NatMessage;
  return proto.peerInterface.NatMessage.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.peerInterface.NatMessage} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.peerInterface.NatMessage}
 */
proto.peerInterface.NatMessage.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.peerInterface.NatMessageType} */ (reader.readEnum());
      msg.setType(value);
      break;
    case 2:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIsResponse(value);
      break;
    case 3:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setSubMessage(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.peerInterface.NatMessage.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.peerInterface.NatMessage.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.peerInterface.NatMessage} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.peerInterface.NatMessage.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getType();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getIsResponse();
  if (f) {
    writer.writeBool(
      2,
      f
    );
  }
  f = message.getSubMessage_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      3,
      f
    );
  }
};


/**
 * optional NatMessageType type = 1;
 * @return {!proto.peerInterface.NatMessageType}
 */
proto.peerInterface.NatMessage.prototype.getType = function() {
  return /** @type {!proto.peerInterface.NatMessageType} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.peerInterface.NatMessageType} value
 * @return {!proto.peerInterface.NatMessage} returns this
 */
proto.peerInterface.NatMessage.prototype.setType = function(value) {
  return jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional bool is_response = 2;
 * @return {boolean}
 */
proto.peerInterface.NatMessage.prototype.getIsResponse = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 2, false));
};


/**
 * @param {boolean} value
 * @return {!proto.peerInterface.NatMessage} returns this
 */
proto.peerInterface.NatMessage.prototype.setIsResponse = function(value) {
  return jspb.Message.setProto3BooleanField(this, 2, value);
};


/**
 * optional bytes sub_message = 3;
 * @return {!(string|Uint8Array)}
 */
proto.peerInterface.NatMessage.prototype.getSubMessage = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * optional bytes sub_message = 3;
 * This is a type-conversion wrapper around `getSubMessage()`
 * @return {string}
 */
proto.peerInterface.NatMessage.prototype.getSubMessage_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getSubMessage()));
};


/**
 * optional bytes sub_message = 3;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getSubMessage()`
 * @return {!Uint8Array}
 */
proto.peerInterface.NatMessage.prototype.getSubMessage_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getSubMessage()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.peerInterface.NatMessage} returns this
 */
proto.peerInterface.NatMessage.prototype.setSubMessage = function(value) {
  return jspb.Message.setProto3BytesField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.peerInterface.UDPAddressMessage.prototype.toObject = function(opt_includeInstance) {
  return proto.peerInterface.UDPAddressMessage.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.peerInterface.UDPAddressMessage} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.peerInterface.UDPAddressMessage.toObject = function(includeInstance, msg) {
  var f, obj = {
    address: jspb.Message.getFieldWithDefault(msg, 1, ""),
    token: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.peerInterface.UDPAddressMessage}
 */
proto.peerInterface.UDPAddressMessage.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.peerInterface.UDPAddressMessage;
  return proto.peerInterface.UDPAddressMessage.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.peerInterface.UDPAddressMessage} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.peerInterface.UDPAddressMessage}
 */
proto.peerInterface.UDPAddressMessage.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setAddress(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setToken(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.peerInterface.UDPAddressMessage.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.peerInterface.UDPAddressMessage.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.peerInterface.UDPAddressMessage} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.peerInterface.UDPAddressMessage.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAddress();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getToken();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string address = 1;
 * @return {string}
 */
proto.peerInterface.UDPAddressMessage.prototype.getAddress = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.peerInterface.UDPAddressMessage} returns this
 */
proto.peerInterface.UDPAddressMessage.prototype.setAddress = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string token = 2;
 * @return {string}
 */
proto.peerInterface.UDPAddressMessage.prototype.getToken = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.peerInterface.UDPAddressMessage} returns this
 */
proto.peerInterface.UDPAddressMessage.prototype.setToken = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.peerInterface.DirectConnectionMessage.prototype.toObject = function(opt_includeInstance) {
  return proto.peerInterface.DirectConnectionMessage.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.peerInterface.DirectConnectionMessage} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.peerInterface.DirectConnectionMessage.toObject = function(includeInstance, msg) {
  var f, obj = {
    peerId: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.peerInterface.DirectConnectionMessage}
 */
proto.peerInterface.DirectConnectionMessage.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.peerInterface.DirectConnectionMessage;
  return proto.peerInterface.DirectConnectionMessage.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.peerInterface.DirectConnectionMessage} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.peerInterface.DirectConnectionMessage}
 */
proto.peerInterface.DirectConnectionMessage.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setPeerId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.peerInterface.DirectConnectionMessage.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.peerInterface.DirectConnectionMessage.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.peerInterface.DirectConnectionMessage} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.peerInterface.DirectConnectionMessage.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPeerId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string peer_id = 1;
 * @return {string}
 */
proto.peerInterface.DirectConnectionMessage.prototype.getPeerId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.peerInterface.DirectConnectionMessage} returns this
 */
proto.peerInterface.DirectConnectionMessage.prototype.setPeerId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.peerInterface.HolePunchConnectionMessage.prototype.toObject = function(opt_includeInstance) {
  return proto.peerInterface.HolePunchConnectionMessage.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.peerInterface.HolePunchConnectionMessage} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.peerInterface.HolePunchConnectionMessage.toObject = function(includeInstance, msg) {
  var f, obj = {
    targetPeerId: jspb.Message.getFieldWithDefault(msg, 1, ""),
    originPeerId: jspb.Message.getFieldWithDefault(msg, 2, ""),
    udpAddress: jspb.Message.getFieldWithDefault(msg, 3, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.peerInterface.HolePunchConnectionMessage}
 */
proto.peerInterface.HolePunchConnectionMessage.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.peerInterface.HolePunchConnectionMessage;
  return proto.peerInterface.HolePunchConnectionMessage.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.peerInterface.HolePunchConnectionMessage} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.peerInterface.HolePunchConnectionMessage}
 */
proto.peerInterface.HolePunchConnectionMessage.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setTargetPeerId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setOriginPeerId(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setUdpAddress(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.peerInterface.HolePunchConnectionMessage.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.peerInterface.HolePunchConnectionMessage.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.peerInterface.HolePunchConnectionMessage} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.peerInterface.HolePunchConnectionMessage.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTargetPeerId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getOriginPeerId();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getUdpAddress();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
};


/**
 * optional string target_peer_id = 1;
 * @return {string}
 */
proto.peerInterface.HolePunchConnectionMessage.prototype.getTargetPeerId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.peerInterface.HolePunchConnectionMessage} returns this
 */
proto.peerInterface.HolePunchConnectionMessage.prototype.setTargetPeerId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string origin_peer_id = 2;
 * @return {string}
 */
proto.peerInterface.HolePunchConnectionMessage.prototype.getOriginPeerId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.peerInterface.HolePunchConnectionMessage} returns this
 */
proto.peerInterface.HolePunchConnectionMessage.prototype.setOriginPeerId = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string udp_address = 3;
 * @return {string}
 */
proto.peerInterface.HolePunchConnectionMessage.prototype.getUdpAddress = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.peerInterface.HolePunchConnectionMessage} returns this
 */
proto.peerInterface.HolePunchConnectionMessage.prototype.setUdpAddress = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.peerInterface.RelayConnectionMessage.prototype.toObject = function(opt_includeInstance) {
  return proto.peerInterface.RelayConnectionMessage.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.peerInterface.RelayConnectionMessage} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.peerInterface.RelayConnectionMessage.toObject = function(includeInstance, msg) {
  var f, obj = {
    targetPeerId: jspb.Message.getFieldWithDefault(msg, 1, ""),
    originPeerId: jspb.Message.getFieldWithDefault(msg, 2, ""),
    relayAddress: jspb.Message.getFieldWithDefault(msg, 3, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.peerInterface.RelayConnectionMessage}
 */
proto.peerInterface.RelayConnectionMessage.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.peerInterface.RelayConnectionMessage;
  return proto.peerInterface.RelayConnectionMessage.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.peerInterface.RelayConnectionMessage} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.peerInterface.RelayConnectionMessage}
 */
proto.peerInterface.RelayConnectionMessage.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setTargetPeerId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setOriginPeerId(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setRelayAddress(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.peerInterface.RelayConnectionMessage.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.peerInterface.RelayConnectionMessage.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.peerInterface.RelayConnectionMessage} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.peerInterface.RelayConnectionMessage.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTargetPeerId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getOriginPeerId();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getRelayAddress();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
};


/**
 * optional string target_peer_id = 1;
 * @return {string}
 */
proto.peerInterface.RelayConnectionMessage.prototype.getTargetPeerId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.peerInterface.RelayConnectionMessage} returns this
 */
proto.peerInterface.RelayConnectionMessage.prototype.setTargetPeerId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string origin_peer_id = 2;
 * @return {string}
 */
proto.peerInterface.RelayConnectionMessage.prototype.getOriginPeerId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.peerInterface.RelayConnectionMessage} returns this
 */
proto.peerInterface.RelayConnectionMessage.prototype.setOriginPeerId = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string relay_address = 3;
 * @return {string}
 */
proto.peerInterface.RelayConnectionMessage.prototype.getRelayAddress = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.peerInterface.RelayConnectionMessage} returns this
 */
proto.peerInterface.RelayConnectionMessage.prototype.setRelayAddress = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.peerInterface.CAMessage.prototype.toObject = function(opt_includeInstance) {
  return proto.peerInterface.CAMessage.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.peerInterface.CAMessage} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.peerInterface.CAMessage.toObject = function(includeInstance, msg) {
  var f, obj = {
    type: jspb.Message.getFieldWithDefault(msg, 1, 0),
    isResponse: jspb.Message.getBooleanFieldWithDefault(msg, 2, false),
    subMessage: msg.getSubMessage_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.peerInterface.CAMessage}
 */
proto.peerInterface.CAMessage.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.peerInterface.CAMessage;
  return proto.peerInterface.CAMessage.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.peerInterface.CAMessage} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.peerInterface.CAMessage}
 */
proto.peerInterface.CAMessage.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.peerInterface.CAMessageType} */ (reader.readEnum());
      msg.setType(value);
      break;
    case 2:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIsResponse(value);
      break;
    case 3:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setSubMessage(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.peerInterface.CAMessage.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.peerInterface.CAMessage.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.peerInterface.CAMessage} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.peerInterface.CAMessage.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getType();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getIsResponse();
  if (f) {
    writer.writeBool(
      2,
      f
    );
  }
  f = message.getSubMessage_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      3,
      f
    );
  }
};


/**
 * optional CAMessageType type = 1;
 * @return {!proto.peerInterface.CAMessageType}
 */
proto.peerInterface.CAMessage.prototype.getType = function() {
  return /** @type {!proto.peerInterface.CAMessageType} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.peerInterface.CAMessageType} value
 * @return {!proto.peerInterface.CAMessage} returns this
 */
proto.peerInterface.CAMessage.prototype.setType = function(value) {
  return jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional bool is_response = 2;
 * @return {boolean}
 */
proto.peerInterface.CAMessage.prototype.getIsResponse = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 2, false));
};


/**
 * @param {boolean} value
 * @return {!proto.peerInterface.CAMessage} returns this
 */
proto.peerInterface.CAMessage.prototype.setIsResponse = function(value) {
  return jspb.Message.setProto3BooleanField(this, 2, value);
};


/**
 * optional bytes sub_message = 3;
 * @return {!(string|Uint8Array)}
 */
proto.peerInterface.CAMessage.prototype.getSubMessage = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * optional bytes sub_message = 3;
 * This is a type-conversion wrapper around `getSubMessage()`
 * @return {string}
 */
proto.peerInterface.CAMessage.prototype.getSubMessage_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getSubMessage()));
};


/**
 * optional bytes sub_message = 3;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getSubMessage()`
 * @return {!Uint8Array}
 */
proto.peerInterface.CAMessage.prototype.getSubMessage_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getSubMessage()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.peerInterface.CAMessage} returns this
 */
proto.peerInterface.CAMessage.prototype.setSubMessage = function(value) {
  return jspb.Message.setProto3BytesField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.peerInterface.PeerDHTMessage.prototype.toObject = function(opt_includeInstance) {
  return proto.peerInterface.PeerDHTMessage.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.peerInterface.PeerDHTMessage} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.peerInterface.PeerDHTMessage.toObject = function(includeInstance, msg) {
  var f, obj = {
    type: jspb.Message.getFieldWithDefault(msg, 1, 0),
    isResponse: jspb.Message.getBooleanFieldWithDefault(msg, 2, false),
    subMessage: msg.getSubMessage_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.peerInterface.PeerDHTMessage}
 */
proto.peerInterface.PeerDHTMessage.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.peerInterface.PeerDHTMessage;
  return proto.peerInterface.PeerDHTMessage.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.peerInterface.PeerDHTMessage} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.peerInterface.PeerDHTMessage}
 */
proto.peerInterface.PeerDHTMessage.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.peerInterface.PeerDHTMessageType} */ (reader.readEnum());
      msg.setType(value);
      break;
    case 2:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIsResponse(value);
      break;
    case 3:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setSubMessage(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.peerInterface.PeerDHTMessage.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.peerInterface.PeerDHTMessage.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.peerInterface.PeerDHTMessage} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.peerInterface.PeerDHTMessage.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getType();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getIsResponse();
  if (f) {
    writer.writeBool(
      2,
      f
    );
  }
  f = message.getSubMessage_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      3,
      f
    );
  }
};


/**
 * optional PeerDHTMessageType type = 1;
 * @return {!proto.peerInterface.PeerDHTMessageType}
 */
proto.peerInterface.PeerDHTMessage.prototype.getType = function() {
  return /** @type {!proto.peerInterface.PeerDHTMessageType} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.peerInterface.PeerDHTMessageType} value
 * @return {!proto.peerInterface.PeerDHTMessage} returns this
 */
proto.peerInterface.PeerDHTMessage.prototype.setType = function(value) {
  return jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional bool is_response = 2;
 * @return {boolean}
 */
proto.peerInterface.PeerDHTMessage.prototype.getIsResponse = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 2, false));
};


/**
 * @param {boolean} value
 * @return {!proto.peerInterface.PeerDHTMessage} returns this
 */
proto.peerInterface.PeerDHTMessage.prototype.setIsResponse = function(value) {
  return jspb.Message.setProto3BooleanField(this, 2, value);
};


/**
 * optional bytes sub_message = 3;
 * @return {!(string|Uint8Array)}
 */
proto.peerInterface.PeerDHTMessage.prototype.getSubMessage = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * optional bytes sub_message = 3;
 * This is a type-conversion wrapper around `getSubMessage()`
 * @return {string}
 */
proto.peerInterface.PeerDHTMessage.prototype.getSubMessage_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getSubMessage()));
};


/**
 * optional bytes sub_message = 3;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getSubMessage()`
 * @return {!Uint8Array}
 */
proto.peerInterface.PeerDHTMessage.prototype.getSubMessage_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getSubMessage()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.peerInterface.PeerDHTMessage} returns this
 */
proto.peerInterface.PeerDHTMessage.prototype.setSubMessage = function(value) {
  return jspb.Message.setProto3BytesField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.peerInterface.PeerDHTPingNodeMessage.prototype.toObject = function(opt_includeInstance) {
  return proto.peerInterface.PeerDHTPingNodeMessage.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.peerInterface.PeerDHTPingNodeMessage} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.peerInterface.PeerDHTPingNodeMessage.toObject = function(includeInstance, msg) {
  var f, obj = {
    peerId: jspb.Message.getFieldWithDefault(msg, 1, ""),
    randomChallenge: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.peerInterface.PeerDHTPingNodeMessage}
 */
proto.peerInterface.PeerDHTPingNodeMessage.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.peerInterface.PeerDHTPingNodeMessage;
  return proto.peerInterface.PeerDHTPingNodeMessage.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.peerInterface.PeerDHTPingNodeMessage} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.peerInterface.PeerDHTPingNodeMessage}
 */
proto.peerInterface.PeerDHTPingNodeMessage.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setPeerId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setRandomChallenge(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.peerInterface.PeerDHTPingNodeMessage.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.peerInterface.PeerDHTPingNodeMessage.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.peerInterface.PeerDHTPingNodeMessage} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.peerInterface.PeerDHTPingNodeMessage.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPeerId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getRandomChallenge();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string peer_id = 1;
 * @return {string}
 */
proto.peerInterface.PeerDHTPingNodeMessage.prototype.getPeerId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.peerInterface.PeerDHTPingNodeMessage} returns this
 */
proto.peerInterface.PeerDHTPingNodeMessage.prototype.setPeerId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string random_challenge = 2;
 * @return {string}
 */
proto.peerInterface.PeerDHTPingNodeMessage.prototype.getRandomChallenge = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.peerInterface.PeerDHTPingNodeMessage} returns this
 */
proto.peerInterface.PeerDHTPingNodeMessage.prototype.setRandomChallenge = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.peerInterface.PeerDHTFindNodeMessage.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.peerInterface.PeerDHTFindNodeMessage.prototype.toObject = function(opt_includeInstance) {
  return proto.peerInterface.PeerDHTFindNodeMessage.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.peerInterface.PeerDHTFindNodeMessage} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.peerInterface.PeerDHTFindNodeMessage.toObject = function(includeInstance, msg) {
  var f, obj = {
    peerId: jspb.Message.getFieldWithDefault(msg, 1, ""),
    closestPeersList: jspb.Message.toObjectList(msg.getClosestPeersList(),
    proto.peerInterface.PeerInfoMessage.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.peerInterface.PeerDHTFindNodeMessage}
 */
proto.peerInterface.PeerDHTFindNodeMessage.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.peerInterface.PeerDHTFindNodeMessage;
  return proto.peerInterface.PeerDHTFindNodeMessage.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.peerInterface.PeerDHTFindNodeMessage} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.peerInterface.PeerDHTFindNodeMessage}
 */
proto.peerInterface.PeerDHTFindNodeMessage.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setPeerId(value);
      break;
    case 2:
      var value = new proto.peerInterface.PeerInfoMessage;
      reader.readMessage(value,proto.peerInterface.PeerInfoMessage.deserializeBinaryFromReader);
      msg.addClosestPeers(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.peerInterface.PeerDHTFindNodeMessage.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.peerInterface.PeerDHTFindNodeMessage.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.peerInterface.PeerDHTFindNodeMessage} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.peerInterface.PeerDHTFindNodeMessage.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPeerId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getClosestPeersList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.peerInterface.PeerInfoMessage.serializeBinaryToWriter
    );
  }
};


/**
 * optional string peer_id = 1;
 * @return {string}
 */
proto.peerInterface.PeerDHTFindNodeMessage.prototype.getPeerId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.peerInterface.PeerDHTFindNodeMessage} returns this
 */
proto.peerInterface.PeerDHTFindNodeMessage.prototype.setPeerId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * repeated PeerInfoMessage closest_peers = 2;
 * @return {!Array<!proto.peerInterface.PeerInfoMessage>}
 */
proto.peerInterface.PeerDHTFindNodeMessage.prototype.getClosestPeersList = function() {
  return /** @type{!Array<!proto.peerInterface.PeerInfoMessage>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.peerInterface.PeerInfoMessage, 2));
};


/**
 * @param {!Array<!proto.peerInterface.PeerInfoMessage>} value
 * @return {!proto.peerInterface.PeerDHTFindNodeMessage} returns this
*/
proto.peerInterface.PeerDHTFindNodeMessage.prototype.setClosestPeersList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.peerInterface.PeerInfoMessage=} opt_value
 * @param {number=} opt_index
 * @return {!proto.peerInterface.PeerInfoMessage}
 */
proto.peerInterface.PeerDHTFindNodeMessage.prototype.addClosestPeers = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.peerInterface.PeerInfoMessage, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.peerInterface.PeerDHTFindNodeMessage} returns this
 */
proto.peerInterface.PeerDHTFindNodeMessage.prototype.clearClosestPeersList = function() {
  return this.setClosestPeersList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.peerInterface.MTPPacket.prototype.toObject = function(opt_includeInstance) {
  return proto.peerInterface.MTPPacket.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.peerInterface.MTPPacket} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.peerInterface.MTPPacket.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, 0),
    peerid: jspb.Message.getFieldWithDefault(msg, 2, ""),
    connection: jspb.Message.getFieldWithDefault(msg, 3, 0),
    timestamp: jspb.Message.getFieldWithDefault(msg, 4, 0),
    timediff: jspb.Message.getFieldWithDefault(msg, 5, 0),
    window: jspb.Message.getFieldWithDefault(msg, 6, 0),
    seq: jspb.Message.getFieldWithDefault(msg, 7, 0),
    ack: jspb.Message.getFieldWithDefault(msg, 8, 0),
    data: msg.getData_asB64(),
    sent: jspb.Message.getFieldWithDefault(msg, 10, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.peerInterface.MTPPacket}
 */
proto.peerInterface.MTPPacket.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.peerInterface.MTPPacket;
  return proto.peerInterface.MTPPacket.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.peerInterface.MTPPacket} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.peerInterface.MTPPacket}
 */
proto.peerInterface.MTPPacket.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setPeerid(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setConnection(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setTimestamp(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setTimediff(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setWindow(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setSeq(value);
      break;
    case 8:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setAck(value);
      break;
    case 9:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setData(value);
      break;
    case 10:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setSent(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.peerInterface.MTPPacket.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.peerInterface.MTPPacket.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.peerInterface.MTPPacket} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.peerInterface.MTPPacket.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getPeerid();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getConnection();
  if (f !== 0) {
    writer.writeInt32(
      3,
      f
    );
  }
  f = message.getTimestamp();
  if (f !== 0) {
    writer.writeInt32(
      4,
      f
    );
  }
  f = message.getTimediff();
  if (f !== 0) {
    writer.writeInt32(
      5,
      f
    );
  }
  f = message.getWindow();
  if (f !== 0) {
    writer.writeInt32(
      6,
      f
    );
  }
  f = message.getSeq();
  if (f !== 0) {
    writer.writeInt32(
      7,
      f
    );
  }
  f = message.getAck();
  if (f !== 0) {
    writer.writeInt32(
      8,
      f
    );
  }
  f = message.getData_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      9,
      f
    );
  }
  f = message.getSent();
  if (f !== 0) {
    writer.writeInt32(
      10,
      f
    );
  }
};


/**
 * optional int32 id = 1;
 * @return {number}
 */
proto.peerInterface.MTPPacket.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.peerInterface.MTPPacket} returns this
 */
proto.peerInterface.MTPPacket.prototype.setId = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional string peerId = 2;
 * @return {string}
 */
proto.peerInterface.MTPPacket.prototype.getPeerid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.peerInterface.MTPPacket} returns this
 */
proto.peerInterface.MTPPacket.prototype.setPeerid = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional int32 connection = 3;
 * @return {number}
 */
proto.peerInterface.MTPPacket.prototype.getConnection = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.peerInterface.MTPPacket} returns this
 */
proto.peerInterface.MTPPacket.prototype.setConnection = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional int32 timestamp = 4;
 * @return {number}
 */
proto.peerInterface.MTPPacket.prototype.getTimestamp = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.peerInterface.MTPPacket} returns this
 */
proto.peerInterface.MTPPacket.prototype.setTimestamp = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional int32 timediff = 5;
 * @return {number}
 */
proto.peerInterface.MTPPacket.prototype.getTimediff = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {number} value
 * @return {!proto.peerInterface.MTPPacket} returns this
 */
proto.peerInterface.MTPPacket.prototype.setTimediff = function(value) {
  return jspb.Message.setProto3IntField(this, 5, value);
};


/**
 * optional int32 window = 6;
 * @return {number}
 */
proto.peerInterface.MTPPacket.prototype.getWindow = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/**
 * @param {number} value
 * @return {!proto.peerInterface.MTPPacket} returns this
 */
proto.peerInterface.MTPPacket.prototype.setWindow = function(value) {
  return jspb.Message.setProto3IntField(this, 6, value);
};


/**
 * optional int32 seq = 7;
 * @return {number}
 */
proto.peerInterface.MTPPacket.prototype.getSeq = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/**
 * @param {number} value
 * @return {!proto.peerInterface.MTPPacket} returns this
 */
proto.peerInterface.MTPPacket.prototype.setSeq = function(value) {
  return jspb.Message.setProto3IntField(this, 7, value);
};


/**
 * optional int32 ack = 8;
 * @return {number}
 */
proto.peerInterface.MTPPacket.prototype.getAck = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 8, 0));
};


/**
 * @param {number} value
 * @return {!proto.peerInterface.MTPPacket} returns this
 */
proto.peerInterface.MTPPacket.prototype.setAck = function(value) {
  return jspb.Message.setProto3IntField(this, 8, value);
};


/**
 * optional bytes data = 9;
 * @return {!(string|Uint8Array)}
 */
proto.peerInterface.MTPPacket.prototype.getData = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 9, ""));
};


/**
 * optional bytes data = 9;
 * This is a type-conversion wrapper around `getData()`
 * @return {string}
 */
proto.peerInterface.MTPPacket.prototype.getData_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getData()));
};


/**
 * optional bytes data = 9;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getData()`
 * @return {!Uint8Array}
 */
proto.peerInterface.MTPPacket.prototype.getData_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getData()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.peerInterface.MTPPacket} returns this
 */
proto.peerInterface.MTPPacket.prototype.setData = function(value) {
  return jspb.Message.setProto3BytesField(this, 9, value);
};


/**
 * optional int32 sent = 10;
 * @return {number}
 */
proto.peerInterface.MTPPacket.prototype.getSent = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 10, 0));
};


/**
 * @param {number} value
 * @return {!proto.peerInterface.MTPPacket} returns this
 */
proto.peerInterface.MTPPacket.prototype.setSent = function(value) {
  return jspb.Message.setProto3IntField(this, 10, value);
};


/**
 * @enum {number}
 */
proto.peerInterface.SubServiceType = {
  PING_PEER: 0,
  GIT: 1,
  NAT_TRAVERSAL: 2,
  CERTIFICATE_AUTHORITY: 3,
  PEER_DHT: 4
};

/**
 * @enum {number}
 */
proto.peerInterface.NatMessageType = {
  UDP_ADDRESS: 0,
  DIRECT_CONNECTION: 1,
  HOLE_PUNCH_CONNECTION: 2,
  RELAY_CONNECTION: 3
};

/**
 * @enum {number}
 */
proto.peerInterface.CAMessageType = {
  ROOT_CERT: 0,
  REQUEST_CERT: 1
};

/**
 * @enum {number}
 */
proto.peerInterface.PeerDHTMessageType = {
  PING: 0,
  FIND_NODE: 1
};

goog.object.extend(exports, proto.peerInterface);
