syntax = "proto3";

package agentInterface;

///////////////////
// Agent Service //
///////////////////
service Agent {
  rpc AddPeer (PeerInfoReadOnlyMessage) returns (StringMessage) {};
  rpc AugmentKeynode (AugmentKeynodeRequest) returns (AugmentKeynodeReply) {};
  rpc AuthenticateProvider (AuthenticateProviderRequest) returns (AuthenticateProviderReply) {};
  rpc DecryptFile (DecryptFileMessage) returns (StringMessage) {};
  rpc DeleteKey (StringMessage) returns (EmptyMessage) {};
  rpc DeleteSecret (SecretPathMessage) returns (EmptyMessage) {};
  rpc DeleteVault (StringMessage) returns (EmptyMessage) {};
  rpc DeriveKey (DeriveKeyMessage) returns (EmptyMessage) {};
  rpc DeriveKeyPair (DeriveKeyPairMessage) returns (EmptyMessage) {};
  rpc DiscoverGestaltIdentity (IdentityMessage) returns (stream EmptyMessage) {};
  rpc DiscoverGestaltNode (IdentityMessage) returns (stream EmptyMessage) {};
  rpc EncryptFile (EncryptFileMessage) returns (StringMessage) {};
  rpc FindPeer (ContactPeerMessage) returns (EmptyMessage) {};
  rpc GetConnectedIdentityInfos (ProviderSearchMessage) returns (stream IdentityInfoMessage) {};
  rpc GetIdentityInfo (EmptyMessage) returns (IdentityInfo) {};
  rpc GetGestalts (EmptyMessage) returns (GestaltListMessage) {};
  rpc GetGestaltByIdentity (IdentityMessage) returns (GestaltMessage) {};
  rpc GestaltIsTrusted (StringMessage) returns (BooleanMessage) {};
  rpc GetOAuthClient (EmptyMessage) returns (OAuthClientMessage) {};
  rpc GetKey (StringMessage) returns (StringMessage) {};
  rpc GetLocalPeerInfo (EmptyMessage) returns (PeerInfoMessage) {};
  rpc GetPeerInfo (StringMessage) returns (PeerInfoMessage) {};
  rpc GetPrimaryKeyPair (BooleanMessage) returns (KeyPairMessage) {};
  rpc GetRootCertificate (EmptyMessage) returns (StringMessage) {};
  rpc GetSecret (SecretPathMessage) returns (StringMessage) {};
  rpc GetStatus (EmptyMessage) returns (AgentStatusMessage) {};
  rpc GetVaultStats (StringMessage) returns (VaultStatsMessage) {};
  rpc InitializeNode (NewKeyPairMessage) returns (EmptyMessage) {};
  rpc ListOAuthTokens (EmptyMessage) returns (StringListMessage) {};
  rpc ListKeys (EmptyMessage) returns (StringListMessage) {};
  rpc ListPeers (EmptyMessage) returns (StringListMessage) {};
  rpc ListSecrets (StringMessage) returns (StringListMessage) {};
  rpc ListVaults (EmptyMessage) returns (StringListMessage) {};
  rpc LockNode (EmptyMessage) returns (EmptyMessage) {};
  rpc NewClientCertificate (NewClientCertificateMessage) returns (NewClientCertificateMessage) {};
  rpc NewSecret (SecretContentMessage) returns (EmptyMessage) {};
  rpc NewOAuthToken (NewOAuthTokenMessage) returns (StringMessage) {};
  rpc NewVault (StringMessage) returns (EmptyMessage) {};
  rpc PingPeer (ContactPeerMessage) returns (EmptyMessage) {};
  rpc PullVault (VaultPathMessage) returns (EmptyMessage) {};
  rpc RenameVault (RenameVaultMessage) returns (EmptyMessage) {};
  rpc RecoverKeynode (RecoverKeynodeMessage) returns (EmptyMessage) {};
  rpc RevokeOAuthToken (StringMessage) returns (EmptyMessage) {};
  rpc ScanVaultNames (StringMessage) returns (StringListMessage) {};
  rpc SetAlias (PeerAliasMessage) returns (EmptyMessage) {};
  rpc SetIdentity (StringMessage) returns (EmptyMessage) {};
  rpc ShareVault (ShareVaultMessage) returns (EmptyMessage) {};
  rpc SignFile (SignFileMessage) returns (StringMessage) {};
  rpc StopAgent (EmptyMessage) returns (EmptyMessage) {};
  rpc ToggleStealthMode (BooleanMessage) returns (EmptyMessage) {};
  rpc TrustGestalt (StringMessage) returns (EmptyMessage) {};
  rpc UnlockNode (UnlockNodeMessage) returns (EmptyMessage) {};
  rpc UnsetAlias (StringMessage) returns (EmptyMessage) {};
  rpc UnshareVault (VaultPathMessage) returns (EmptyMessage) {};
  rpc UntrustGestalt (StringMessage) returns (EmptyMessage) {};
  rpc UpdateLocalPeerInfo (PeerInfoMessage) returns (EmptyMessage) {};
  rpc UpdatePeerInfo (PeerInfoReadOnlyMessage) returns (EmptyMessage) {};
  rpc UpdateSecret (SecretContentMessage) returns (EmptyMessage) {};
  rpc VerifyFile (VerifyFileMessage) returns (EmptyMessage) {};
  rpc VerifyMnemonic (StringMessage) returns (EmptyMessage) {};
}
message EmptyMessage {}
message StringMessage {
  string s = 1;
}
message BooleanMessage {
  bool b = 1;
}
message StringListMessage {
  repeated string s = 1;
}

// === PeerInfo === //
message PeerInfoMessage {
  // This is a hash of the public key that uniquely identifies the peer
  string peer_id = 1;

  // This is keynode alias that is attached to each identity (x.509) certificate
  // oid: 1.3.1.4.1
  string alias = 2;

  // This is the public key that cryptographically identifies this keynode
  string public_key = 3;

  // The root public key is the crypto-identity that this keynode
  // is "crypto-link"-ed to. This is empty by default for keynodes
  // that do not belong to a heirarchy
  // oid: 1.3.1.4.2
  string root_public_key = 4;

  // This is the known address (e.g. '132.454.243.21:1314') on which the keynode can be found
  // oid: 1.3.1.4.3
  string peer_address = 5;

  // This address is where the keynode's HTTP API is served
  // oid: 1.3.1.4.4
  string api_address = 6;

  // The LinkInfo list
  // oid: 1.3.1.4.5
  repeated LinkInfoIdentityMessage link_info = 7;

  // This is the original pem x.509 certificate that is signed
  // by the private key of the peer
  string pem = 8;
}

// === PeerInfoReadOnly === //
message PeerInfoReadOnlyMessage {
  // This is a hash of the public key that uniquely identifies the peer
  string peer_id = 1;

  // This is the original pem x.509 certificate that is signed
  // by the private key of the peer
  string pem = 2;

  // This is the unsigned alias that the user has set for the keynode
  string unsigned_alias = 3;

  // This is the unverified known address (e.g. '132.454.243.21:1314') on which the keynode can be found
  // This is not the address signed by the keynode, but a provision for users to modify where they know
  // the keynode can be found
  string unsigned_peer_address = 4;

  // This address is where the keynode's HTTP API is served
  // oid: 1.3.1.4.4
  string unsigned_api_address = 5;
}

// ==== AgentStatus ==== //
enum AgentStatusType {
  ONLINE = 0;
  OFFLINE = 1;
  ERRORED = 2;
}
message AgentStatusMessage {
  AgentStatusType status = 1;
}

// ==== NewNode ==== //
message NewKeyPairMessage {
  string passphrase = 1;
  int32 nbits = 2;
}

// ==== DeriveKey ==== //
message DeriveKeyMessage {
  string key_name = 1;
  string passphrase = 2;
}

// ==== DeriveKeyPair ==== //
message DeriveKeyPairMessage {
  NewKeyPairMessage keypair_details = 1;
  string public_key_path = 2;
  string private_key_path = 3;
}

// ==== SignFile ==== //
message SignFileMessage {
  string file_path = 1;
  string private_key_path = 2;
  string passphrase = 3;
}

// ==== VerifyFile ==== //
message VerifyFileMessage {
  string file_path = 1;
  string public_key_path = 2;
}

// ==== SecretPath ==== //
message SecretPathMessage {
  string vault_name = 1;
  string secret_name = 2;
}

// ==== SecretContent ==== //
message SecretContentMessage {
  SecretPathMessage secret_path = 1;
  string secret_file_path = 2;
  string secret_content = 3;
}

// ==== EncryptFile ==== //
message EncryptFileMessage {
  string file_path = 1;
  string public_key_path = 2;
}

// ==== DecryptFile ==== //
message DecryptFileMessage {
  string file_path = 1;
  string private_key_path = 2;
  string passphrase = 3;
}

// === KeyPair === //
message KeyPairMessage {
  string public_key = 1;
  string private_key = 2;
}

// ==== VaultPath ==== //
message VaultPathMessage {
  string vault_name = 1;
  string public_key = 2;
}

// === ContactPeer === //
message ContactPeerMessage {
  string public_key_or_handle = 1;
  int32 timeout = 2;
}

// === UnlockNode === //
message UnlockNodeMessage {
  string passphrase = 1;
  int32 timeout = 2;
}

// === ContactPeer === //
message NewClientCertificateMessage {
  string domain = 1;
  string cert_file = 2;
  string key_file = 3;
}

// === NewAPIToken === //
message NewOAuthTokenMessage {
  repeated string scopes = 1;
  int32 expiry = 2;
}

// === OAuthClient === //
message OAuthClientMessage {
  string id = 1;
  string secret = 2;
}

// === PeerAlias === //
message PeerAliasMessage {
  string peer_id = 1;
  string alias = 2;
}

// === RenameVault === //
message RenameVaultMessage {
  string vault_name = 1;
  string new_name = 2;
}

// === VaultStats === //
message VaultStatsMessage {
  int32 created_at = 1;
}

// ==== ShareVault ==== //
message ShareVaultMessage {
  string peer_id = 1;
  string vault_name = 2;
  bool can_edit = 3;
}
// === PolykeyProof === //
enum PolykeyProofType {
  AUTOMATIC = 0;
  MANUAL = 1;
}
message PolykeyProofMessage {
  PolykeyProofType type = 1;
  string instructions = 2;
  string proof = 3;
}
message GestaltIdentityMessage {
  string identity_provider_name = 1;
  string identifier = 2;
}

// === RecoverKeynode === //
message RecoverKeynodeMessage {
  string mnemonic = 1;
  string user_id = 2;
  string passphrase = 3;
}

// === AuthenticateProvider === //
message AuthenticateProviderRequest {
  string provider_key = 1;
}
message AuthenticateProviderReply {
  string user_code = 1;
}

// === AugmentKeynode === //
message AugmentKeynodeRequest {
  string provider_key = 1;
  string identity_key = 2;
}
message AugmentKeynodeReply {
  string url = 1;
}

// === LinkInfoIdentity === //
message LinkInfoIdentityMessage {
  string type = 1;
  string node = 2;
  string identity = 3;
  string provider = 4;
  string dateIssued = 5;
  string signature = 6;
  string key = 7;
  string url = 8;
}
// === LinkInfoNode === //
message LinkInfoNodeMessage {
  string type = 1;
  string node1 = 2;
  string node2 = 3;
  string dateIssued = 4;
  string signature = 5;
  string key = 6;
  string url = 7;
}
// === LinkInfo === //
message LinkInfoMessage {
  LinkInfoIdentityMessage link_info_identity = 1;
  LinkInfoNodeMessage link_info_node = 2;
}

// === GestaltMatrixEdge === //
message GestaltMatrixEdgeMessage {
  map<string, LinkInfoMessage> pairs = 1;
}
// === GestaltNode === //
message GestaltNodeMessage {
  string id = 1;
}
// === Gestalt === //
message GestaltMessage {
  map<string, GestaltMatrixEdgeMessage> gestalt_matrix = 1;
  map<string, GestaltNodeMessage> gestalt_nodes = 2;
  map<string, IdentityInfoMessage> identities = 3;
}
// === GestaltList === //
message GestaltListMessage {
  repeated GestaltMessage gestalt_message = 1;
}

// === Message === //
message ProviderSearchMessage {
  string provider_key = 1;
  repeated string search_term = 2;
}
message IdentityInfoMessage {
  string key = 1;
  string provider = 2;
  string name = 3;
  string email = 4;
  string url = 5;
}
message IdentityMessage {
  string key = 1;
  string provider_key = 2;
}

message IdentityInfo {
  string key = 1;
}
