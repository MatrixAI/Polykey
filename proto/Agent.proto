syntax = "proto3";

package agentInterface;

///////////////////
// Agent Service //
///////////////////
service Agent {
  rpc AddPeer (PeerInfoMessage) returns (BooleanMessage) {};
  rpc DecryptFile (DecryptFileMessage) returns (StringMessage) {};
  rpc DeleteKey (StringMessage) returns (BooleanMessage) {};
  rpc DeleteSecret (SecretPathMessage) returns (BooleanMessage) {};
  rpc DeleteVault (StringMessage) returns (BooleanMessage) {};
  rpc DeriveKey (DeriveKeyMessage) returns (BooleanMessage) {};
  rpc EncryptFile (EncryptFileMessage) returns (StringMessage) {};
  rpc FindPeer (ContactPeerMessage) returns (BooleanMessage) {};
  rpc FindSocialPeer (ContactPeerMessage) returns (BooleanMessage) {};
  rpc GetOAuthClient (EmptyMessage) returns (OAuthClientMessage) {};
  rpc GetKey (StringMessage) returns (StringMessage) {};
  rpc GetLocalPeerInfo (EmptyMessage) returns (PeerInfoMessage) {};
  rpc GetPeerInfo (StringMessage) returns (PeerInfoMessage) {};
  rpc GetPrimaryKeyPair (BooleanMessage) returns (KeyPairMessage) {};
  rpc GetRootCertificate (EmptyMessage) returns (StringMessage) {};
  rpc GetSecret (SecretPathMessage) returns (StringMessage) {};
  rpc GetStatus (EmptyMessage) returns (AgentStatusMessage) {};
  rpc ListOAuthTokens (EmptyMessage) returns (StringListMessage) {};
  rpc ListKeys (EmptyMessage) returns (StringListMessage) {};
  rpc ListNodes (BooleanMessage) returns (StringListMessage) {};
  rpc ListPeers (EmptyMessage) returns (StringListMessage) {};
  rpc ListSecrets (StringMessage) returns (StringListMessage) {};
  rpc ListVaults (EmptyMessage) returns (StringListMessage) {};
  rpc NewClientCertificate (NewClientCertificateMessage) returns (NewClientCertificateMessage) {};
  rpc NewNode (NewNodeMessage) returns (BooleanMessage) {};
  rpc NewSecret (SecretContentMessage) returns (BooleanMessage) {};
  rpc NewOAuthToken (NewOAuthTokenMessage) returns (StringMessage) {};
  rpc NewVault (StringMessage) returns (BooleanMessage) {};
  rpc PingPeer (ContactPeerMessage) returns (BooleanMessage) {};
  rpc PullVault (VaultPathMessage) returns (BooleanMessage) {};
  rpc RegisterNode (StringMessage) returns (BooleanMessage) {};
  rpc RevokeOAuthToken (StringMessage) returns (BooleanMessage) {};
  rpc RequestHolePunch (StringMessage) returns (BooleanMessage) {};
  rpc RequestRelay (StringMessage) returns (BooleanMessage) {};
  rpc ScanVaultNames (StringMessage) returns (StringListMessage) {};
  rpc SignFile (SignFileMessage) returns (StringMessage) {};
  rpc StopAgent (EmptyMessage) returns (BooleanMessage) {};
  rpc ToggleStealthMode (BooleanMessage) returns (BooleanMessage) {};
  rpc UpdateLocalPeerInfo (PeerInfoMessage) returns (BooleanMessage) {};
  rpc UpdatePeerInfo (PeerInfoMessage) returns (BooleanMessage) {};
  rpc UpdateSecret (SecretContentMessage) returns (BooleanMessage) {};
  rpc VerifyFile (VerifyFileMessage) returns (BooleanMessage) {};
}
message EmptyMessage {}
message StringMessage {
  string s = 1;
}
message BooleanMessage {
  bool b = 1;
}
message StringListMessage {
  repeated string s = 1;
}

// === PeerInfo === //
message PeerInfoMessage {
  string public_key = 1;
  string relay_public_key = 2;
  string peer_address = 3;
  string api_address = 4;
}

// ==== AgentStatus ==== //
enum AgentStatusType {
  ONLINE = 0;
  OFFLINE = 1;
  ERRORED = 2;
}
message AgentStatusMessage {
  AgentStatusType status = 1;
}

// ==== NewNode ==== //
message NewNodeMessage {
  string userId = 1;
  string passphrase = 2;
  int32 nbits = 3;
}

// ==== DeriveKey ==== //
message DeriveKeyMessage {
  string vault_name = 1;
  string key_name = 2;
  string passphrase = 3;
}

// ==== SignFile ==== //
message SignFileMessage {
  string file_path = 1;
  string private_key_path = 2;
  string passphrase = 3;
}

// ==== VerifyFile ==== //
message VerifyFileMessage {
  string file_path = 1;
  string public_key_path = 2;
}

// ==== SecretPath ==== //
message SecretPathMessage {
  string vault_name = 1;
  string secret_name = 2;
}

// ==== SecretContent ==== //
message SecretContentMessage {
  SecretPathMessage secret_path = 1;
  string secret_file_path = 2;
  string secret_content = 3;
}

// ==== EncryptFile ==== //
message EncryptFileMessage {
  string file_path = 1;
  string public_key_path = 2;
}

// ==== DecryptFile ==== //
message DecryptFileMessage {
  string file_path = 1;
  string private_key_path = 2;
  string passphrase = 3;
}

// === KeyPair === //
message KeyPairMessage {
  string public_key = 1;
  string private_key = 2;
}

// ==== VaultPath ==== //
message VaultPathMessage {
  string vault_name = 1;
  string public_key = 2;
}

// === ContactPeer === //
message ContactPeerMessage {
  string public_key_or_handle = 1;
  int32 timeout = 2;
}

// === ContactPeer === //
message NewClientCertificateMessage {
  string domain = 1;
  string cert_file = 2;
  string key_file = 3;
}

// === NewAPIToken === //
message NewOAuthTokenMessage {
  repeated string scopes = 1;
  int32 expiry = 2;
}

// === OAuthClient === //
message OAuthClientMessage {
  string id = 1;
  string secret = 2;
}

