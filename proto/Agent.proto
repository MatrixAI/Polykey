syntax = "proto3";

package agentInterface;

enum AgentMessageType {
  ERROR = 0;
  STOP_AGENT = 1;
  STATUS = 2;
  REGISTER_NODE = 3;
  NEW_NODE = 4;
  LIST_NODES = 5;
  DERIVE_KEY = 6;
  SIGN_FILE = 7;
  VERIFY_FILE = 8;
  LIST_VAULTS = 9;
  NEW_VAULT = 10;
  DESTROY_VAULT = 11;
  LIST_SECRETS = 12;
  CREATE_SECRET = 13;
  DESTROY_SECRET = 14;
  GET_SECRET = 15;
  LIST_KEYS = 16;
  GET_KEY = 17;
  DELETE_KEY = 18;
  ENCRYPT_FILE = 19;
  DECRYPT_FILE = 20;
  GET_PRIMARY_KEYPAIR = 21;
  UPDATE_SECRET = 22;
  GET_PEER_INFO = 23;
  ADD_PEER = 24;
  PULL_VAULT = 26;
  PING_PEER = 27;
  FIND_PEER = 28;
  FIND_SOCIAL_PEER = 29;
  LIST_PEERS = 30;
  TOGGLE_STEALTH = 31;
  UPDATE_PEER_INFO = 32;
  REQUEST_RELAY = 33;
  REQUEST_PUNCH = 34;
  SCAN_VAULT_NAMES = 35;
}
message AgentMessage {
  AgentMessageType type = 1;
  bool isResponse = 2;
  string node_path = 3;
  bytes sub_message = 4;
}
message ErrorMessage {
  string error = 1;
}

// ==== AgentStatus ==== //
enum AgentStatusType {
  ONLINE = 0;
  OFFLINE = 1;
  ERRORED = 2;
}
message AgentStatusResponseMessage {
  AgentStatusType status = 1;
}

// ==== RegisterNode ==== //
message RegisterNodeRequestMessage {
  string passphrase = 1;
}
message RegisterNodeResponseMessage {
  bool successful = 1;
}

// ==== NewNode ==== //
message NewNodeRequestMessage {
  string userId = 1;
  string passphrase = 2;
  int32 nbits = 3;
}
message NewNodeResponseMessage {
  bool successful = 1;
}

// ==== ListNodes ==== //
message ListNodesRequestMessage {
  bool unlocked_only = 1;
}
message ListNodesResponseMessage {
  repeated string nodes = 1;
}

// ==== SignFile ==== //
message SignFileRequestMessage {
  string file_path = 1;
  string private_key_path = 2;
  string passphrase = 3;
}
message SignFileResponseMessage {
  string signature_path = 1;
}

// ==== VerifyFile ==== //
message VerifyFileRequestMessage {
  string file_path = 1;
  string public_key_path = 2;
}
message VerifyFileResponseMessage {
  bool verified = 1;
}

// ==== EncryptFile ==== //
message EncryptFileRequestMessage {
  string file_path = 1;
  string public_key_path = 2;
}
message EncryptFileResponseMessage {
  string encryptedPath = 1;
}

// ==== DecryptFile ==== //
message DecryptFileRequestMessage {
  string file_path = 1;
  string private_key_path = 2;
  string passphrase = 3;
}
message DecryptFileResponseMessage {
  string decryptedPath = 1;
}

// ==== ListVaults ==== //
message ListVaultsRequestMessage {
}
message ListVaultsResponseMessage {
  repeated string vault_names = 1;
}

// ==== ScanVaultNames ==== //
message ScanVaultNamesRequestMessage {
  string public_key = 1;
}
message ScanVaultNamesResponseMessage {
  repeated string vault_names = 1;
}

// ==== NewVault ==== //
message NewVaultRequestMessage {
  string vault_name = 1;
}
message NewVaultResponseMessage {
  bool successful = 1;
}

// ==== PullVault ==== //
message PullVaultRequestMessage {
  string vault_name = 1;
  string public_key = 2;
}
message PullVaultResponseMessage {
  bool successful = 1;
}

// ==== DestroyVault ==== //
message DestroyVaultRequestMessage {
  string vault_name = 1;
}
message DestroyVaultResponseMessage {
  bool successful = 1;
}

// ==== ListSecrets ==== //
message ListSecretsRequestMessage {
  string vault_name = 1;
}
message ListSecretsResponseMessage {
  repeated string secret_names = 1;
}

// ==== CreateSecret ==== //
message CreateSecretRequestMessage {
  string vault_name = 1;
  string secret_name = 2;
  string secret_path = 3;
  bytes secret_content = 4;
}
message CreateSecretResponseMessage {
  bool successful = 1;
}

// ==== DestroySecret ==== //
message DestroySecretRequestMessage {
  string vault_name = 1;
  string secret_name = 2;
}
message DestroySecretResponseMessage {
  bool successful = 1;
}

// ==== GetSecret ==== //
message GetSecretRequestMessage {
  string vault_name = 1;
  string secret_name = 2;
}
message GetSecretResponseMessage {
  bytes secret = 1;
}

// ==== DeriveKey ==== //
message DeriveKeyRequestMessage {
  string vault_name = 1;
  string key_name = 2;
  string passphrase = 3;
}
message DeriveKeyResponseMessage {
  bool successful = 1;
}

// ==== ListKeys ==== //
message ListKeysRequestMessage {
}
message ListKeysResponseMessage {
  repeated string key_names = 1;
}

// ==== GetKey ==== //
message GetKeyRequestMessage {
  string key_name = 1;
}
message GetKeyResponseMessage {
  string key_name = 1;
  string key_content = 2;
}

// ==== GetPrimaryKeyPair ==== //
message GetPrimaryKeyPairRequestMessage {
  bool include_private_key = 1;
}
message GetPrimaryKeyPairResponseMessage {
  string public_key = 1;
  string private_key = 2;
}

// ==== UpdateSecret ==== //
message UpdateSecretRequestMessage {
  string vault_name = 1;
  string secret_name = 2;
  string secret_path = 3;
  bytes secret_content = 4;
}
message UpdateSecretResponseMessage {
  bool successful = 1;
}

// ==== DeleteKey ==== //
message DeleteKeyRequestMessage {
  string key_name = 1;
}
message DeleteKeyResponseMessage {
  bool successful = 1;
}

// ==== PeerInfo ==== //
message PeerInfoRequestMessage {
  bool current = 1;
  string public_key = 2;
}
message PeerInfoResponseMessage {
  string public_key = 1;
  string peer_address = 2;
  string relay_public_key = 3;
}

// ==== AddPeer ==== //
message AddPeerRequestMessage {
  string public_key = 1;
  string peer_address = 2;
  string relay_public_key = 3;
}
message AddPeerResponseMessage {
  bool successful = 1;
}

// ==== PingPeer ==== //
message PingPeerRequestMessage {
  string public_key = 1;
  int32 timeout = 2;
}
message PingPeerResponseMessage {
  bool successful = 1;
}

// ==== FindPeer ==== //
message FindPeerRequestMessage {
  string public_key = 1;
  int32 timeout = 2;
}
message FindPeerResponseMessage {
  bool successful = 1;
}

// ==== FindPeer ==== //
message FindSocialPeerRequestMessage {
  string handle = 1;
  string service = 2;
  int32 timeout = 3;
}
message FindSocialPeerResponseMessage {
  bool successful = 1;
}

// ==== ListPeers ==== //
message ListPeersRequestMessage {
}
message ListPeersResponseMessage {
  repeated string public_keys = 1;
}


// ==== ToggleStealth ==== //
message ToggleStealthRequestMessage {
  bool active = 1;
}
message ToggleStealthResponseMessage {
  bool successful = 1;
}

// ==== UpdatePeerInfo ==== //
message UpdatePeerInfoRequestMessage {
  string public_key = 1;
  bool current_node = 2;
  string peer_host = 3;
  int32 peer_port = 4;
  string relay_public_key = 5;
}
message UpdatePeerInfoResponseMessage {
  bool successful = 1;
}

// ==== RequestRelay ==== //
message RequestRelayRequestMessage {
  string public_key = 1;
}
message RequestRelayResponseMessage {
  bool successful = 1;
}

// ==== RequestPunch ==== //
message RequestPunchRequestMessage {
  string public_key = 1;
}
message RequestPunchResponseMessage {
  string address = 1;
}
