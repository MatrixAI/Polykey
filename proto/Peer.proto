syntax = "proto3";

package peerInterface;

//////////////////
// Peer Service //
//////////////////
service Peer {
  rpc MessagePeer (PeerMessage) returns (PeerMessage) {};
}
message PeerMessage {
  string public_key = 1;
  SubServiceType type = 2;
  string sub_message = 3;
}
enum SubServiceType {
  PING_PEER = 0;
  GIT = 1;
  NAT_TRAVERSAL = 2;
  CERTIFICATE_AUTHORITY = 3;
  PEER_DHT = 4;
}

///////////////
// Ping Peer //
///////////////
message PingPeerMessage {
  string public_key = 1;
  string challenge = 2;
  PeerInfoMessage peerInfo = 3;
}
message PeerInfoMessage {
  string public_key = 1;
  string root_certificate = 2;
  string peer_address = 3;
  string api_address = 4;
}
message PeerInfoListMessage {
  repeated PeerInfoMessage peer_info_list = 1;
}

///////////
// Error //
///////////
message ErrorMessage {
  string error = 1;
}

///////////////////
// NAT Traversal //
///////////////////
enum NatMessageType {
  UDP_ADDRESS = 0;
  DIRECT_CONNECTION = 1;
  HOLE_PUNCH_CONNECTION = 2;
  RELAY_CONNECTION = 3;
}
message NatMessage {
  NatMessageType type = 1;
  bool is_response = 2;
  bytes sub_message = 3;
}

/////////////////
// UDP Address //
/////////////////
message UDPAddressMessage {
  string address = 1;
  string token = 2;
}

///////////////////////
// Direct Connection //
///////////////////////
message DirectConnectionMessage {
  string peer_id = 1;
}

///////////////////////////
// Hole Punch Connection //
///////////////////////////
message HolePunchConnectionMessage {
  string target_peer_id = 1;
  string origin_peer_id = 2;
  string udp_address = 3;
}

//////////////////////
// Relay Connection //
//////////////////////
message RelayConnectionMessage {
  string target_peer_id = 1;
  string origin_peer_id = 2;
  string relay_address = 3;
}

//////////////////////
// CA Functionality //
//////////////////////
enum CAMessageType {
  ROOT_CERT = 0;
  REQUEST_CERT = 1;
}
message CAMessage {
  CAMessageType type = 1;
  bool is_response = 2;
  bytes sub_message = 3;
}

///////////////////////
// DHT Functionality //
///////////////////////
enum PeerDHTMessageType {
  PING = 0;
  FIND_NODE = 1;
}
message PeerDHTMessage {
  PeerDHTMessageType type = 1;
  bool is_response = 2;
  bytes sub_message = 3;
}
message PeerDHTPingNodeMessage {
  string peer_id = 1;
  string random_challenge = 2;
}
message PeerDHTFindNodeMessage {
  string peer_id = 1;
  repeated PeerInfoMessage closest_peers = 2;
}

//////////////////////////////
// Micro Transport Protocol //
//////////////////////////////
message MTPPacket {
  int32 id = 1;
  string peerId = 2;
  int32 connection = 3;
  int32 timestamp = 4;
  int32 timediff = 5;
  int32 window = 6;
  int32 seq = 7;
  int32 ack = 8;
  bytes data = 9;
  int32 sent = 10;
}

