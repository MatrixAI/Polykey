syntax = "proto3";

package clientInterface;

service Client {
  rpc Echo(EchoMessage) returns (EchoMessage) {};

  // Agent
  rpc AgentStop(EmptyMessage) returns (EmptyMessage) {};

  // Session
  rpc SessionRequestJWT (EmptyMessage) returns (JWTTokenMessage) {};
  rpc SessionChangeKey (EmptyMessage) returns (StatusMessage) {};

  // Nodes
  rpc NodesGetLocalDetails(EmptyMessage) returns (NodeDetailsMessage) {};
  rpc NodesGetDetails(NodeMessage) returns (NodeDetailsMessage) {};
  rpc NodesAdd(NodeAddressMessage) returns (EmptyMessage) {};
  rpc NodesPing(NodeMessage) returns (StatusMessage) {};
  rpc NodesClaim(NodeMessage) returns (StatusMessage) {};
  rpc NodesFind(NodeMessage) returns (NodeAddressMessage) {};

  // Keys
  rpc KeysRootKeyPair (EmptyMessage) returns (KeyPairMessage) {};
  rpc KeysResetKeyPair (KeyMessage) returns (EmptyMessage) {};
  rpc KeysRenewKeyPair (KeyMessage) returns (EmptyMessage) {};
  rpc KeysEncrypt (CryptoMessage) returns (CryptoMessage) {};
  rpc KeysDecrypt (CryptoMessage) returns (CryptoMessage) {};
  rpc KeysSign (CryptoMessage) returns (CryptoMessage) {};
  rpc KeysVerify (CryptoMessage) returns (StatusMessage) {};
  rpc KeysChangePassword (PasswordMessage) returns (EmptyMessage) {};
  rpc CertsGet (EmptyMessage) returns (CertificateMessage) {};
  rpc CertsChainGet (EmptyMessage) returns (stream CertificateMessage) {};

  // Vaults
  rpc VaultsList(EmptyMessage) returns (stream VaultListMessage) {};
  rpc VaultsCreate(VaultMessage) returns (VaultMessage) {};
  rpc VaultsRename(VaultRenameMessage) returns (VaultMessage) {};
  rpc VaultsDelete(VaultMessage) returns (StatusMessage) {};
  rpc VaultsListSecrets(VaultMessage) returns (stream SecretMessage) {};
  rpc VaultsMkdir(VaultMkdirMessage) returns (StatusMessage) {};
  rpc VaultsStat(VaultMessage) returns (StatMessage) {};
  rpc VaultsPull(VaultPullMessage) returns (StatusMessage) {};
  rpc VaultsScan(NodeMessage) returns (stream VaultListMessage) {};
  rpc VaultsDeleteSecret(SecretMessage) returns (StatusMessage) {};
  rpc VaultsEditSecret(SecretEditMessage) returns (StatusMessage) {};
  rpc VaultsGetSecret(SecretMessage) returns (SecretMessage) {};
  rpc VaultsRenameSecret(SecretRenameMessage) returns (StatusMessage) {};
  rpc VaultsNewSecret(SecretMessage) returns (StatusMessage) {};
  rpc VaultsNewDirSecret(SecretDirectoryMessage) returns (StatusMessage) {};
  rpc VaultsSetPerms(SetVaultPermMessage) returns (StatusMessage) {};
  rpc VaultsUnsetPerms(UnsetVaultPermMessage) returns (StatusMessage) {}
  rpc VaultsPermissions(GetVaultPermMessage) returns (stream PermissionMessage) {};

  // Identities
  rpc IdentitiesAuthenticate(ProviderMessage) returns (stream ProviderMessage) {};
  rpc IdentitiesPutToken(TokenSpecificMessage) returns (EmptyMessage) {};
  rpc IdentitiesGetToken(ProviderMessage) returns (TokenMessage) {};
  rpc IdentitiesDeleteToken(ProviderMessage) returns (EmptyMessage) {};
  rpc IdentitiesGetProviders(EmptyMessage) returns (ProviderMessage) {};
  rpc IdentitiesGetConnectedInfos(ProviderSearchMessage) returns (stream IdentityInfoMessage) {}; // Returns a list of connected identities.
  rpc IdentitiesGetInfo(ProviderMessage) returns (ProviderMessage) {}; // Gets current Gestalt probably? placeholder, used to return IdentityInfo
  rpc IdentitiesAugmentKeynode(ProviderMessage) returns (EmptyMessage) {}; //Augmenting, throws error if fail.

  // Gestalts
  rpc GestaltsGetNode(NodeMessage) returns (GestaltMessage) {};  //Returns gestalt from node id
  rpc GestaltsGetIdentity(ProviderMessage) returns (GestaltMessage) {}; //Returns gestalt from identity id
  rpc GestaltsList(EmptyMessage) returns (stream GestaltMessage) {};  //list of all known gestalts
  rpc GestaltsSetNode(GestaltTrustMessage) returns (EmptyMessage) {}; // creating a link betweeen nodes
  rpc GestaltsSetIdentity(GestaltTrustMessage) returns (EmptyMessage) {}; // creating a link between identity and node?
  rpc GestaltsDiscoverNode(NodeMessage) returns (EmptyMessage) {}; //finds 3rd party gestalt from nodeID
  rpc GestaltsDiscoverIdentity(ProviderMessage) returns (EmptyMessage) {}; // Finds 3rd party gestalt from identity
  rpc GestaltsGetActionsByNode(NodeMessage) returns (ActionsMessage) {};
  rpc GestaltsGetActionsByIdentity(ProviderMessage) returns (ActionsMessage) {};
  rpc GestaltsSetActionByNode(SetActionsMessage) returns (EmptyMessage) {};
  rpc GestaltsSetActionByIdentity(SetActionsMessage) returns (EmptyMessage) {};
  rpc GestaltsUnsetActionByNode(SetActionsMessage) returns (EmptyMessage) {};
  rpc GestaltsUnsetActionByIdentity(SetActionsMessage) returns (EmptyMessage) {};

  rpc GestaltSync(stream GestaltMessage) returns (stream GestaltMessage) {};

  // Notifications
  rpc NotificationsSend(NotificationInfoMessage) returns (EmptyMessage) {};
  rpc NotificationsRead(NotificationDisplayMessage) returns (NotificationListMessage) {};
  rpc NotificationsClear(EmptyMessage) returns (EmptyMessage) {};
}

message EmptyMessage {}

message StatusMessage {
  bool success = 1;
}

message EchoMessage {
  string challenge = 1;
}

// Session

message JWTTokenMessage {
  string token = 1;
}

// Vaults

message VaultListMessage {
  string name = 1;
  string id = 2;
}

message VaultMessage {
  oneof nameOrId {
    string name = 1;
    string id = 2;
  }
}

message VaultRenameMessage {
  VaultMessage vault = 1;
  string newName = 2;
}

message VaultMkdirMessage {
  VaultMessage vault = 1;
  string dirName = 2;
}

message VaultPullMessage {
  VaultMessage vault = 1;
  NodeMessage node = 2;
}

message SecretRenameMessage {
  SecretMessage oldSecret = 1;
  string newName = 2;
}

message SecretMessage {
  VaultMessage vault = 1;
  string name = 2;
  string content = 3;
}

message SecretEditMessage {
  SecretMessage secret = 1;
}

message SecretDirectoryMessage {
  VaultMessage vault = 1;
  string secretDirectory = 2;
}

message StatMessage {
  string stats = 1;
}

message SetVaultPermMessage {
  VaultMessage vault = 1;
  NodeMessage node = 2;
}

message UnsetVaultPermMessage {
  VaultMessage vault = 1;
  NodeMessage node = 2;
}

message GetVaultPermMessage {
  VaultMessage vault = 1;
  NodeMessage node = 2;
}

message PermissionMessage {
  string id = 1;
  string action = 2;
}

// Nodes

message NodeMessage {
  string name = 1;
}

message NodeAddressMessage {
  string id = 1;
  string host = 2;
  int32 port = 3;
}

message NodeDetailsMessage {
  // This is a hash of the public key that uniquely identifies the node
  string node_id = 1;

  // public key of the node (root key)
  string public_key = 2;

  // host:port of node
  string node_address = 3;
}

// Keys

message CryptoMessage {
  string data = 1;
  string signature = 2;
}

message KeyMessage {
  string name = 1;
  string key = 2;
}

message KeyPairMessage {
  string public = 1;
  string private = 2;
}

message CertificateMessage {
  string cert = 1;
}

message PasswordMessage {
  string password = 1;
}

// Identities

message ProviderMessage {
  string id = 1;
  string message = 2;
}

message TokenSpecificMessage {
  ProviderMessage provider = 1;
  string token = 2;
}

message TokenMessage {
  string token = 1;
}

message ProviderSearchMessage {
  ProviderMessage provider = 1;
  repeated string search_term = 2;
}

message IdentityInfoMessage {
  ProviderMessage provider = 1;
  string name = 3;
  string email = 4;
  string url = 5;
}

// Gestalts

message GestaltMessage {
  string name = 1;
}

message GestaltTrustMessage {
  string provider = 1;
  string name = 2;
  bool set = 3;
}

// Permissions
message ActionsMessage {
  repeated string action = 1;
}

message SetActionsMessage {
  oneof node_or_provider {
    NodeMessage node = 1;
    ProviderMessage identity = 2;
  }
  string action = 3;
}

// Notifications
message NotificationInfoMessage {
  string receiver_id = 1;
  string message = 2;
}

message NotificationDisplayMessage {
  bool unread = 1;
  NumberMessage number = 2;
  string order = 3;
}

message NotificationListMessage {
  string messages = 1;
}

message NumberMessage {
  oneof number_or_all {
    int32 number = 1;
    string all = 2;
  }
}
