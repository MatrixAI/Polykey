syntax = "proto3";

import public "Gestalts.proto";
import public "Identities.proto";
import public "Keys.proto";
import public "Nodes.proto";
import public "Notifications.proto";
import public "Permissions.proto";
import public "Secrets.proto";
import public "Sessions.proto";
import public "Vaults.proto";


package clientInterface;

service Client {
  rpc Echo(EchoMessage) returns (EchoMessage);

  // Agent
  rpc AgentStop(EmptyMessage) returns (EmptyMessage);

  // Session
  rpc SessionUnlock (Session.Password) returns (Session.Token);
  rpc SessionRefresh (EmptyMessage) returns (Session.Token);
  rpc SessionLockAll (EmptyMessage) returns (StatusMessage);

  // Nodes
  rpc NodesAdd(Node.Address) returns (EmptyMessage);
  rpc NodesPing(Node.Node) returns (StatusMessage);
  rpc NodesClaim(Node.Claim) returns (StatusMessage);
  rpc NodesFind(Node.Node) returns (Node.Address);

  // Keys
  rpc KeysKeyPairRoot (EmptyMessage) returns (Key.KeyPair);
  rpc KeysKeyPairReset (Key.Key) returns (EmptyMessage);
  rpc KeysKeyPairRenew (Key.Key) returns (EmptyMessage);
  rpc KeysEncrypt (Key.Crypto) returns (Key.Crypto);
  rpc KeysDecrypt (Key.Crypto) returns (Key.Crypto);
  rpc KeysSign (Key.Crypto) returns (Key.Crypto);
  rpc KeysVerify (Key.Crypto) returns (StatusMessage);
  rpc KeysPasswordChange (Session.Password) returns (EmptyMessage); // FIXME: passwordMessage is shared.
  rpc KeysCertsGet (EmptyMessage) returns (Key.Certificate);
  rpc KeysCertsChainGet (EmptyMessage) returns (stream Key.Certificate);

  // Vaults
  rpc VaultsList(EmptyMessage) returns (stream Vault.List);
  rpc VaultsCreate(Vault.Vault) returns (Vault.Vault);
  rpc VaultsRename(Vault.Rename) returns (Vault.Vault);
  rpc VaultsDelete(Vault.Vault) returns (StatusMessage);
  rpc VaultsPull(Vault.Pull) returns (StatusMessage);
  rpc VaultsClone(Vault.Clone) returns (StatusMessage);
  rpc VaultsScan(Node.Node) returns (stream Vault.List);
  rpc VaultsSecretsList(Vault.Vault) returns (stream secret.Secret);
  rpc VaultsSecretsMkdir(Vault.Mkdir) returns (StatusMessage);
  rpc VaultsSecretsStat(Vault.Vault) returns (Vault.Stat);
  rpc VaultsSecretsDelete(secret.Secret) returns (StatusMessage);
  rpc VaultsSecretsEdit(secret.Secret) returns (StatusMessage);
  rpc VaultsSecretsGet(secret.Secret) returns (secret.Secret);
  rpc VaultsSecretsRename(secret.Rename) returns (StatusMessage);
  rpc VaultsSecretsNew(secret.Secret) returns (StatusMessage);
  rpc VaultsSecretsNewDir(secret.Directory) returns (StatusMessage);
  rpc VaultsPermissionsSet(Vault.PermSet) returns (StatusMessage);
  rpc VaultsPermissionsUnset(Vault.PermUnset) returns (StatusMessage);
  rpc VaultsPermissions(Vault.PermGet) returns (stream Vault.Permission);
  rpc VaultsVersion(Vault.Version) returns (Vault.VersionResult);
  rpc VaultsLog(Vault.Log) returns (stream Vault.LogEntry);

  // Identities
  rpc IdentitiesAuthenticate(Identitiy.Provider) returns (stream Identitiy.Provider);
  rpc IdentitiesTokenPut(Identitiy.TokenSpecific) returns (EmptyMessage);
  rpc IdentitiesTokenGet(Identitiy.Provider) returns (Identitiy.Token);
  rpc IdentitiesTokenDelete(Identitiy.Provider) returns (EmptyMessage);
  rpc IdentitiesProvidersList(EmptyMessage) returns (Identitiy.Provider);
  rpc IdentitiesInfoGet(Identitiy.Provider) returns (Identitiy.Provider);
  rpc IdentitiesInfoGetConnected(Identitiy.ProviderSearch) returns (stream Identitiy.Info);
  rpc IdentitiesClaim(Identitiy.Provider) returns (EmptyMessage);

  // Gestalts
  rpc GestaltsGestaltList(EmptyMessage) returns (stream Gestalt.Gestalt);
  rpc GestaltsGestaltGetByNode(Node.Node) returns (Gestalt.Graph);
  rpc GestaltsGestaltGetByIdentity(Identitiy.Provider) returns (Gestalt.Graph);
  rpc GestaltsDiscoveryByNode(Node.Node) returns (EmptyMessage);
  rpc GestaltsDiscoveryByIdentity(Identitiy.Provider) returns (EmptyMessage);
  rpc GestaltsActionsGetByNode(Node.Node) returns (Permission.Actions);
  rpc GestaltsActionsGetByIdentity(Identitiy.Provider) returns (Permission.Actions);
  rpc GestaltsActionsSetByNode(Permission.ActionSet) returns (EmptyMessage);
  rpc GestaltsActionsSetByIdentity(Permission.ActionSet) returns (EmptyMessage);
  rpc GestaltsActionsUnsetByNode(Permission.ActionSet) returns (EmptyMessage);
  rpc GestaltsActionsUnsetByIdentity(Permission.ActionSet) returns (EmptyMessage);

  // Notifications
  rpc NotificationsSend(Notification.Send) returns (EmptyMessage);
  rpc NotificationsRead(Notification.Read) returns (Notification.List);
  rpc NotificationsClear(EmptyMessage) returns (EmptyMessage);
}

message EmptyMessage {};

message StatusMessage {
  bool success = 1;
}

message EchoMessage {
  string challenge = 1;
}
