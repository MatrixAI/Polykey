syntax = "proto3";

package agentInterface;

service Agent {

  rpc Echo(EchoMessage) returns (EchoMessage) {};

  rpc GetGitInfo (InfoRequest) returns (stream PackChunk) {};
  rpc GetGitPack(stream PackChunk) returns (stream PackChunk) {};
  rpc ScanVaults (NodeIdMessage) returns (stream PackChunk) {};

  rpc GetNodeDetails (EmptyMessage) returns (NodeDetailsMessage) {}
  rpc GetClosestLocalNodes (NodeIdMessage) returns (NodeTableMessage) {}
  rpc GetClaims (ClaimTypeMessage) returns (ClaimsMessage) {}
  rpc GetChainData (EmptyMessage) returns (ChainDataMessage) {}

  rpc SendHolePunchMessage (RelayMessage) returns (EmptyMessage) {}

  rpc checkVaultPermisssions (VaultPermMessage) returns (PermissionMessage) {}
}

message EmptyMessage {}

message EchoMessage {
  string challenge = 1;
}

// Info Request

message InfoRequest {
  string vault_name = 1;
}

message InfoResponse {
  string vault_name = 1;
  bytes body = 2;
}

// Pack Request

message PackRequest {
  string vault_name = 1;
  bytes body = 2;
}

message PackResponse {
  string vault_name = 1;
  bytes body = 2;
}

message PackChunk {
  bytes chunk = 1;
}

message ConnectionMessage {
  string aId = 1;
  string bId = 2;
  string aIp = 3;
  string bIp = 4;
}

message RelayMessage {
  string srcId = 1;
  string targetId = 2;
  string egressAddress = 3;
  string signature = 4;
}

message NodeIdMessage {
  string nodeId = 1;
}

message NodeDetailsMessage {
  // This is a hash of the public key that uniquely identifies the node
  string node_id = 1;

  // public key of the node (root key)
  string public_key = 2;

  // host:port of node
  string node_address = 3;
}

message NodeAddressMessage {
  string ip = 1;
  int32 port = 2;
}

message NodeTableMessage {
  map<string, NodeAddressMessage> nodeTable = 1;
}

message VaultPermMessage {
  string nodeId = 1;
  string vaultId = 2;
}

message PermissionMessage {
  bool permission = 1;
}

// The specific ClaimType of Claims to get
message ClaimTypeMessage {
  string claimType = 1;
}

// A list of base64url encoded claims
message ClaimsMessage {
  repeated ClaimMessage claims = 1;
}

// A map of ClaimId -> ClaimEncoded
message ChainDataMessage {
  map<string, ClaimMessage> chainData = 1;
}

// The components of a ClaimEncoded type (i.e. a GeneralJWS) for GRPC transport
message ClaimMessage {
  string payload = 1;  // base64 encoded
  repeated SignatureMessage signatures = 2;
}

message SignatureMessage {
  string signature = 1; // base64 encoded
  string header = 2;    // base64 encoded ('protected' field in GeneralJWS)
}