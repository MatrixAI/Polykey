// source: Notifications.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

goog.exportSymbol('proto.Notification.General', null, global);
goog.exportSymbol('proto.Notification.List', null, global);
goog.exportSymbol('proto.Notification.Notification', null, global);
goog.exportSymbol('proto.Notification.Notification.DataCase', null, global);
goog.exportSymbol('proto.Notification.Read', null, global);
goog.exportSymbol('proto.Notification.Send', null, global);
goog.exportSymbol('proto.Notification.Share', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Notification.Notification = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.Notification.Notification.oneofGroups_);
};
goog.inherits(proto.Notification.Notification, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.Notification.Notification.displayName = 'proto.Notification.Notification';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Notification.Send = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.Notification.Send, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.Notification.Send.displayName = 'proto.Notification.Send';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Notification.Read = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.Notification.Read, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.Notification.Read.displayName = 'proto.Notification.Read';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Notification.List = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.Notification.List.repeatedFields_, null);
};
goog.inherits(proto.Notification.List, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.Notification.List.displayName = 'proto.Notification.List';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Notification.General = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.Notification.General, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.Notification.General.displayName = 'proto.Notification.General';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Notification.Share = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.Notification.Share.repeatedFields_, null);
};
goog.inherits(proto.Notification.Share, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.Notification.Share.displayName = 'proto.Notification.Share';
}

/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.Notification.Notification.oneofGroups_ = [[1,2,3]];

/**
 * @enum {number}
 */
proto.Notification.Notification.DataCase = {
  DATA_NOT_SET: 0,
  GENERAL: 1,
  GESTALT_INVITE: 2,
  VAULT_SHARE: 3
};

/**
 * @return {proto.Notification.Notification.DataCase}
 */
proto.Notification.Notification.prototype.getDataCase = function() {
  return /** @type {proto.Notification.Notification.DataCase} */(jspb.Message.computeOneofCase(this, proto.Notification.Notification.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Notification.Notification.prototype.toObject = function(opt_includeInstance) {
  return proto.Notification.Notification.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Notification.Notification} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Notification.Notification.toObject = function(includeInstance, msg) {
  var f, obj = {
    general: (f = msg.getGeneral()) && proto.Notification.General.toObject(includeInstance, f),
    gestaltInvite: jspb.Message.getFieldWithDefault(msg, 2, ""),
    vaultShare: (f = msg.getVaultShare()) && proto.Notification.Share.toObject(includeInstance, f),
    senderId: jspb.Message.getFieldWithDefault(msg, 4, ""),
    isRead: jspb.Message.getBooleanFieldWithDefault(msg, 5, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Notification.Notification}
 */
proto.Notification.Notification.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Notification.Notification;
  return proto.Notification.Notification.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Notification.Notification} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Notification.Notification}
 */
proto.Notification.Notification.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.Notification.General;
      reader.readMessage(value,proto.Notification.General.deserializeBinaryFromReader);
      msg.setGeneral(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setGestaltInvite(value);
      break;
    case 3:
      var value = new proto.Notification.Share;
      reader.readMessage(value,proto.Notification.Share.deserializeBinaryFromReader);
      msg.setVaultShare(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setSenderId(value);
      break;
    case 5:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIsRead(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Notification.Notification.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Notification.Notification.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Notification.Notification} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Notification.Notification.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getGeneral();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.Notification.General.serializeBinaryToWriter
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getVaultShare();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.Notification.Share.serializeBinaryToWriter
    );
  }
  f = message.getSenderId();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getIsRead();
  if (f) {
    writer.writeBool(
      5,
      f
    );
  }
};


/**
 * optional General general = 1;
 * @return {?proto.Notification.General}
 */
proto.Notification.Notification.prototype.getGeneral = function() {
  return /** @type{?proto.Notification.General} */ (
    jspb.Message.getWrapperField(this, proto.Notification.General, 1));
};


/**
 * @param {?proto.Notification.General|undefined} value
 * @return {!proto.Notification.Notification} returns this
*/
proto.Notification.Notification.prototype.setGeneral = function(value) {
  return jspb.Message.setOneofWrapperField(this, 1, proto.Notification.Notification.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.Notification.Notification} returns this
 */
proto.Notification.Notification.prototype.clearGeneral = function() {
  return this.setGeneral(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Notification.Notification.prototype.hasGeneral = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string gestalt_invite = 2;
 * @return {string}
 */
proto.Notification.Notification.prototype.getGestaltInvite = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.Notification.Notification} returns this
 */
proto.Notification.Notification.prototype.setGestaltInvite = function(value) {
  return jspb.Message.setOneofField(this, 2, proto.Notification.Notification.oneofGroups_[0], value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.Notification.Notification} returns this
 */
proto.Notification.Notification.prototype.clearGestaltInvite = function() {
  return jspb.Message.setOneofField(this, 2, proto.Notification.Notification.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Notification.Notification.prototype.hasGestaltInvite = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional Share vault_share = 3;
 * @return {?proto.Notification.Share}
 */
proto.Notification.Notification.prototype.getVaultShare = function() {
  return /** @type{?proto.Notification.Share} */ (
    jspb.Message.getWrapperField(this, proto.Notification.Share, 3));
};


/**
 * @param {?proto.Notification.Share|undefined} value
 * @return {!proto.Notification.Notification} returns this
*/
proto.Notification.Notification.prototype.setVaultShare = function(value) {
  return jspb.Message.setOneofWrapperField(this, 3, proto.Notification.Notification.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.Notification.Notification} returns this
 */
proto.Notification.Notification.prototype.clearVaultShare = function() {
  return this.setVaultShare(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Notification.Notification.prototype.hasVaultShare = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional string sender_id = 4;
 * @return {string}
 */
proto.Notification.Notification.prototype.getSenderId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.Notification.Notification} returns this
 */
proto.Notification.Notification.prototype.setSenderId = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional bool is_read = 5;
 * @return {boolean}
 */
proto.Notification.Notification.prototype.getIsRead = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 5, false));
};


/**
 * @param {boolean} value
 * @return {!proto.Notification.Notification} returns this
 */
proto.Notification.Notification.prototype.setIsRead = function(value) {
  return jspb.Message.setProto3BooleanField(this, 5, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Notification.Send.prototype.toObject = function(opt_includeInstance) {
  return proto.Notification.Send.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Notification.Send} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Notification.Send.toObject = function(includeInstance, msg) {
  var f, obj = {
    receiverId: jspb.Message.getFieldWithDefault(msg, 1, ""),
    data: (f = msg.getData()) && proto.Notification.General.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Notification.Send}
 */
proto.Notification.Send.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Notification.Send;
  return proto.Notification.Send.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Notification.Send} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Notification.Send}
 */
proto.Notification.Send.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setReceiverId(value);
      break;
    case 2:
      var value = new proto.Notification.General;
      reader.readMessage(value,proto.Notification.General.deserializeBinaryFromReader);
      msg.setData(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Notification.Send.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Notification.Send.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Notification.Send} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Notification.Send.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getReceiverId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getData();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.Notification.General.serializeBinaryToWriter
    );
  }
};


/**
 * optional string receiver_id = 1;
 * @return {string}
 */
proto.Notification.Send.prototype.getReceiverId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.Notification.Send} returns this
 */
proto.Notification.Send.prototype.setReceiverId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional General data = 2;
 * @return {?proto.Notification.General}
 */
proto.Notification.Send.prototype.getData = function() {
  return /** @type{?proto.Notification.General} */ (
    jspb.Message.getWrapperField(this, proto.Notification.General, 2));
};


/**
 * @param {?proto.Notification.General|undefined} value
 * @return {!proto.Notification.Send} returns this
*/
proto.Notification.Send.prototype.setData = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.Notification.Send} returns this
 */
proto.Notification.Send.prototype.clearData = function() {
  return this.setData(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Notification.Send.prototype.hasData = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Notification.Read.prototype.toObject = function(opt_includeInstance) {
  return proto.Notification.Read.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Notification.Read} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Notification.Read.toObject = function(includeInstance, msg) {
  var f, obj = {
    unread: jspb.Message.getBooleanFieldWithDefault(msg, 1, false),
    number: jspb.Message.getFieldWithDefault(msg, 2, ""),
    order: jspb.Message.getFieldWithDefault(msg, 3, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Notification.Read}
 */
proto.Notification.Read.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Notification.Read;
  return proto.Notification.Read.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Notification.Read} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Notification.Read}
 */
proto.Notification.Read.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setUnread(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setNumber(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setOrder(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Notification.Read.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Notification.Read.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Notification.Read} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Notification.Read.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUnread();
  if (f) {
    writer.writeBool(
      1,
      f
    );
  }
  f = message.getNumber();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getOrder();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
};


/**
 * optional bool unread = 1;
 * @return {boolean}
 */
proto.Notification.Read.prototype.getUnread = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 1, false));
};


/**
 * @param {boolean} value
 * @return {!proto.Notification.Read} returns this
 */
proto.Notification.Read.prototype.setUnread = function(value) {
  return jspb.Message.setProto3BooleanField(this, 1, value);
};


/**
 * optional string number = 2;
 * @return {string}
 */
proto.Notification.Read.prototype.getNumber = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.Notification.Read} returns this
 */
proto.Notification.Read.prototype.setNumber = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string order = 3;
 * @return {string}
 */
proto.Notification.Read.prototype.getOrder = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.Notification.Read} returns this
 */
proto.Notification.Read.prototype.setOrder = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.Notification.List.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Notification.List.prototype.toObject = function(opt_includeInstance) {
  return proto.Notification.List.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Notification.List} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Notification.List.toObject = function(includeInstance, msg) {
  var f, obj = {
    notificationList: jspb.Message.toObjectList(msg.getNotificationList(),
    proto.Notification.Notification.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Notification.List}
 */
proto.Notification.List.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Notification.List;
  return proto.Notification.List.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Notification.List} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Notification.List}
 */
proto.Notification.List.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.Notification.Notification;
      reader.readMessage(value,proto.Notification.Notification.deserializeBinaryFromReader);
      msg.addNotification(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Notification.List.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Notification.List.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Notification.List} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Notification.List.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getNotificationList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.Notification.Notification.serializeBinaryToWriter
    );
  }
};


/**
 * repeated Notification notification = 1;
 * @return {!Array<!proto.Notification.Notification>}
 */
proto.Notification.List.prototype.getNotificationList = function() {
  return /** @type{!Array<!proto.Notification.Notification>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.Notification.Notification, 1));
};


/**
 * @param {!Array<!proto.Notification.Notification>} value
 * @return {!proto.Notification.List} returns this
*/
proto.Notification.List.prototype.setNotificationList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.Notification.Notification=} opt_value
 * @param {number=} opt_index
 * @return {!proto.Notification.Notification}
 */
proto.Notification.List.prototype.addNotification = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.Notification.Notification, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.Notification.List} returns this
 */
proto.Notification.List.prototype.clearNotificationList = function() {
  return this.setNotificationList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Notification.General.prototype.toObject = function(opt_includeInstance) {
  return proto.Notification.General.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Notification.General} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Notification.General.toObject = function(includeInstance, msg) {
  var f, obj = {
    message: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Notification.General}
 */
proto.Notification.General.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Notification.General;
  return proto.Notification.General.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Notification.General} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Notification.General}
 */
proto.Notification.General.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setMessage(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Notification.General.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Notification.General.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Notification.General} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Notification.General.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMessage();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string message = 1;
 * @return {string}
 */
proto.Notification.General.prototype.getMessage = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.Notification.General} returns this
 */
proto.Notification.General.prototype.setMessage = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.Notification.Share.repeatedFields_ = [3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Notification.Share.prototype.toObject = function(opt_includeInstance) {
  return proto.Notification.Share.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Notification.Share} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Notification.Share.toObject = function(includeInstance, msg) {
  var f, obj = {
    vaultId: msg.getVaultId_asB64(),
    vaultName: jspb.Message.getFieldWithDefault(msg, 2, ""),
    actionsList: (f = jspb.Message.getRepeatedField(msg, 3)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Notification.Share}
 */
proto.Notification.Share.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Notification.Share;
  return proto.Notification.Share.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Notification.Share} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Notification.Share}
 */
proto.Notification.Share.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setVaultId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setVaultName(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.addActions(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Notification.Share.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Notification.Share.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Notification.Share} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Notification.Share.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getVaultId_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getVaultName();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getActionsList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      3,
      f
    );
  }
};


/**
 * optional bytes vault_id = 1;
 * @return {!(string|Uint8Array)}
 */
proto.Notification.Share.prototype.getVaultId = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes vault_id = 1;
 * This is a type-conversion wrapper around `getVaultId()`
 * @return {string}
 */
proto.Notification.Share.prototype.getVaultId_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getVaultId()));
};


/**
 * optional bytes vault_id = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getVaultId()`
 * @return {!Uint8Array}
 */
proto.Notification.Share.prototype.getVaultId_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getVaultId()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.Notification.Share} returns this
 */
proto.Notification.Share.prototype.setVaultId = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * optional string vault_name = 2;
 * @return {string}
 */
proto.Notification.Share.prototype.getVaultName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.Notification.Share} returns this
 */
proto.Notification.Share.prototype.setVaultName = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * repeated string actions = 3;
 * @return {!Array<string>}
 */
proto.Notification.Share.prototype.getActionsList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 3));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.Notification.Share} returns this
 */
proto.Notification.Share.prototype.setActionsList = function(value) {
  return jspb.Message.setField(this, 3, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.Notification.Share} returns this
 */
proto.Notification.Share.prototype.addActions = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 3, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.Notification.Share} returns this
 */
proto.Notification.Share.prototype.clearActionsList = function() {
  return this.setActionsList([]);
};


goog.object.extend(exports, proto.Notification);
