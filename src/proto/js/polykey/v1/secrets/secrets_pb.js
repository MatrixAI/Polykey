// source: polykey/v1/secrets/secrets.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var polykey_v1_vaults_vaults_pb = require('../../../polykey/v1/vaults/vaults_pb.js');
goog.object.extend(proto, polykey_v1_vaults_vaults_pb);
goog.exportSymbol('proto.polykey.v1.secrets.Directory', null, global);
goog.exportSymbol('proto.polykey.v1.secrets.Rename', null, global);
goog.exportSymbol('proto.polykey.v1.secrets.Secret', null, global);
goog.exportSymbol('proto.polykey.v1.secrets.Stat', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.polykey.v1.secrets.Rename = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.polykey.v1.secrets.Rename, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.polykey.v1.secrets.Rename.displayName = 'proto.polykey.v1.secrets.Rename';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.polykey.v1.secrets.Secret = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.polykey.v1.secrets.Secret, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.polykey.v1.secrets.Secret.displayName = 'proto.polykey.v1.secrets.Secret';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.polykey.v1.secrets.Directory = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.polykey.v1.secrets.Directory, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.polykey.v1.secrets.Directory.displayName = 'proto.polykey.v1.secrets.Directory';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.polykey.v1.secrets.Stat = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.polykey.v1.secrets.Stat, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.polykey.v1.secrets.Stat.displayName = 'proto.polykey.v1.secrets.Stat';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.polykey.v1.secrets.Rename.prototype.toObject = function(opt_includeInstance) {
  return proto.polykey.v1.secrets.Rename.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.polykey.v1.secrets.Rename} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.polykey.v1.secrets.Rename.toObject = function(includeInstance, msg) {
  var f, obj = {
    oldSecret: (f = msg.getOldSecret()) && proto.polykey.v1.secrets.Secret.toObject(includeInstance, f),
    newName: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.polykey.v1.secrets.Rename}
 */
proto.polykey.v1.secrets.Rename.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.polykey.v1.secrets.Rename;
  return proto.polykey.v1.secrets.Rename.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.polykey.v1.secrets.Rename} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.polykey.v1.secrets.Rename}
 */
proto.polykey.v1.secrets.Rename.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.polykey.v1.secrets.Secret;
      reader.readMessage(value,proto.polykey.v1.secrets.Secret.deserializeBinaryFromReader);
      msg.setOldSecret(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setNewName(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.polykey.v1.secrets.Rename.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.polykey.v1.secrets.Rename.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.polykey.v1.secrets.Rename} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.polykey.v1.secrets.Rename.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getOldSecret();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.polykey.v1.secrets.Secret.serializeBinaryToWriter
    );
  }
  f = message.getNewName();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional Secret old_secret = 1;
 * @return {?proto.polykey.v1.secrets.Secret}
 */
proto.polykey.v1.secrets.Rename.prototype.getOldSecret = function() {
  return /** @type{?proto.polykey.v1.secrets.Secret} */ (
    jspb.Message.getWrapperField(this, proto.polykey.v1.secrets.Secret, 1));
};


/**
 * @param {?proto.polykey.v1.secrets.Secret|undefined} value
 * @return {!proto.polykey.v1.secrets.Rename} returns this
*/
proto.polykey.v1.secrets.Rename.prototype.setOldSecret = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.polykey.v1.secrets.Rename} returns this
 */
proto.polykey.v1.secrets.Rename.prototype.clearOldSecret = function() {
  return this.setOldSecret(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.polykey.v1.secrets.Rename.prototype.hasOldSecret = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string new_name = 2;
 * @return {string}
 */
proto.polykey.v1.secrets.Rename.prototype.getNewName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.polykey.v1.secrets.Rename} returns this
 */
proto.polykey.v1.secrets.Rename.prototype.setNewName = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.polykey.v1.secrets.Secret.prototype.toObject = function(opt_includeInstance) {
  return proto.polykey.v1.secrets.Secret.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.polykey.v1.secrets.Secret} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.polykey.v1.secrets.Secret.toObject = function(includeInstance, msg) {
  var f, obj = {
    vault: (f = msg.getVault()) && polykey_v1_vaults_vaults_pb.Vault.toObject(includeInstance, f),
    secretName: jspb.Message.getFieldWithDefault(msg, 2, ""),
    secretContent: msg.getSecretContent_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.polykey.v1.secrets.Secret}
 */
proto.polykey.v1.secrets.Secret.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.polykey.v1.secrets.Secret;
  return proto.polykey.v1.secrets.Secret.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.polykey.v1.secrets.Secret} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.polykey.v1.secrets.Secret}
 */
proto.polykey.v1.secrets.Secret.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new polykey_v1_vaults_vaults_pb.Vault;
      reader.readMessage(value,polykey_v1_vaults_vaults_pb.Vault.deserializeBinaryFromReader);
      msg.setVault(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setSecretName(value);
      break;
    case 3:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setSecretContent(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.polykey.v1.secrets.Secret.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.polykey.v1.secrets.Secret.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.polykey.v1.secrets.Secret} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.polykey.v1.secrets.Secret.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getVault();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      polykey_v1_vaults_vaults_pb.Vault.serializeBinaryToWriter
    );
  }
  f = message.getSecretName();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getSecretContent_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      3,
      f
    );
  }
};


/**
 * optional polykey.v1.vaults.Vault vault = 1;
 * @return {?proto.polykey.v1.vaults.Vault}
 */
proto.polykey.v1.secrets.Secret.prototype.getVault = function() {
  return /** @type{?proto.polykey.v1.vaults.Vault} */ (
    jspb.Message.getWrapperField(this, polykey_v1_vaults_vaults_pb.Vault, 1));
};


/**
 * @param {?proto.polykey.v1.vaults.Vault|undefined} value
 * @return {!proto.polykey.v1.secrets.Secret} returns this
*/
proto.polykey.v1.secrets.Secret.prototype.setVault = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.polykey.v1.secrets.Secret} returns this
 */
proto.polykey.v1.secrets.Secret.prototype.clearVault = function() {
  return this.setVault(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.polykey.v1.secrets.Secret.prototype.hasVault = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string secret_name = 2;
 * @return {string}
 */
proto.polykey.v1.secrets.Secret.prototype.getSecretName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.polykey.v1.secrets.Secret} returns this
 */
proto.polykey.v1.secrets.Secret.prototype.setSecretName = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional bytes secret_content = 3;
 * @return {!(string|Uint8Array)}
 */
proto.polykey.v1.secrets.Secret.prototype.getSecretContent = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * optional bytes secret_content = 3;
 * This is a type-conversion wrapper around `getSecretContent()`
 * @return {string}
 */
proto.polykey.v1.secrets.Secret.prototype.getSecretContent_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getSecretContent()));
};


/**
 * optional bytes secret_content = 3;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getSecretContent()`
 * @return {!Uint8Array}
 */
proto.polykey.v1.secrets.Secret.prototype.getSecretContent_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getSecretContent()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.polykey.v1.secrets.Secret} returns this
 */
proto.polykey.v1.secrets.Secret.prototype.setSecretContent = function(value) {
  return jspb.Message.setProto3BytesField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.polykey.v1.secrets.Directory.prototype.toObject = function(opt_includeInstance) {
  return proto.polykey.v1.secrets.Directory.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.polykey.v1.secrets.Directory} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.polykey.v1.secrets.Directory.toObject = function(includeInstance, msg) {
  var f, obj = {
    vault: (f = msg.getVault()) && polykey_v1_vaults_vaults_pb.Vault.toObject(includeInstance, f),
    secretDirectory: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.polykey.v1.secrets.Directory}
 */
proto.polykey.v1.secrets.Directory.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.polykey.v1.secrets.Directory;
  return proto.polykey.v1.secrets.Directory.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.polykey.v1.secrets.Directory} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.polykey.v1.secrets.Directory}
 */
proto.polykey.v1.secrets.Directory.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new polykey_v1_vaults_vaults_pb.Vault;
      reader.readMessage(value,polykey_v1_vaults_vaults_pb.Vault.deserializeBinaryFromReader);
      msg.setVault(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setSecretDirectory(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.polykey.v1.secrets.Directory.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.polykey.v1.secrets.Directory.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.polykey.v1.secrets.Directory} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.polykey.v1.secrets.Directory.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getVault();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      polykey_v1_vaults_vaults_pb.Vault.serializeBinaryToWriter
    );
  }
  f = message.getSecretDirectory();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional polykey.v1.vaults.Vault vault = 1;
 * @return {?proto.polykey.v1.vaults.Vault}
 */
proto.polykey.v1.secrets.Directory.prototype.getVault = function() {
  return /** @type{?proto.polykey.v1.vaults.Vault} */ (
    jspb.Message.getWrapperField(this, polykey_v1_vaults_vaults_pb.Vault, 1));
};


/**
 * @param {?proto.polykey.v1.vaults.Vault|undefined} value
 * @return {!proto.polykey.v1.secrets.Directory} returns this
*/
proto.polykey.v1.secrets.Directory.prototype.setVault = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.polykey.v1.secrets.Directory} returns this
 */
proto.polykey.v1.secrets.Directory.prototype.clearVault = function() {
  return this.setVault(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.polykey.v1.secrets.Directory.prototype.hasVault = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string secret_directory = 2;
 * @return {string}
 */
proto.polykey.v1.secrets.Directory.prototype.getSecretDirectory = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.polykey.v1.secrets.Directory} returns this
 */
proto.polykey.v1.secrets.Directory.prototype.setSecretDirectory = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.polykey.v1.secrets.Stat.prototype.toObject = function(opt_includeInstance) {
  return proto.polykey.v1.secrets.Stat.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.polykey.v1.secrets.Stat} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.polykey.v1.secrets.Stat.toObject = function(includeInstance, msg) {
  var f, obj = {
    json: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.polykey.v1.secrets.Stat}
 */
proto.polykey.v1.secrets.Stat.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.polykey.v1.secrets.Stat;
  return proto.polykey.v1.secrets.Stat.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.polykey.v1.secrets.Stat} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.polykey.v1.secrets.Stat}
 */
proto.polykey.v1.secrets.Stat.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setJson(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.polykey.v1.secrets.Stat.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.polykey.v1.secrets.Stat.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.polykey.v1.secrets.Stat} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.polykey.v1.secrets.Stat.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getJson();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string json = 1;
 * @return {string}
 */
proto.polykey.v1.secrets.Stat.prototype.getJson = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.polykey.v1.secrets.Stat} returns this
 */
proto.polykey.v1.secrets.Stat.prototype.setJson = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


goog.object.extend(exports, proto.polykey.v1.secrets);
