// source: polykey/v1/agent/agent.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

goog.exportSymbol('proto.polykey.v1.agent.InfoMessage', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.polykey.v1.agent.InfoMessage = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.polykey.v1.agent.InfoMessage, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.polykey.v1.agent.InfoMessage.displayName = 'proto.polykey.v1.agent.InfoMessage';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.polykey.v1.agent.InfoMessage.prototype.toObject = function(opt_includeInstance) {
  return proto.polykey.v1.agent.InfoMessage.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.polykey.v1.agent.InfoMessage} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.polykey.v1.agent.InfoMessage.toObject = function(includeInstance, msg) {
  var f, obj = {
    pid: jspb.Message.getFieldWithDefault(msg, 1, 0),
    nodeId: jspb.Message.getFieldWithDefault(msg, 2, ""),
    clientHost: jspb.Message.getFieldWithDefault(msg, 3, ""),
    clientPort: jspb.Message.getFieldWithDefault(msg, 4, 0),
    proxyHost: jspb.Message.getFieldWithDefault(msg, 5, ""),
    proxyPort: jspb.Message.getFieldWithDefault(msg, 6, 0),
    agentHost: jspb.Message.getFieldWithDefault(msg, 9, ""),
    agentPort: jspb.Message.getFieldWithDefault(msg, 10, 0),
    forwardHost: jspb.Message.getFieldWithDefault(msg, 11, ""),
    forwardPort: jspb.Message.getFieldWithDefault(msg, 12, 0),
    rootPublicKeyPem: jspb.Message.getFieldWithDefault(msg, 13, ""),
    rootCertPem: jspb.Message.getFieldWithDefault(msg, 14, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.polykey.v1.agent.InfoMessage}
 */
proto.polykey.v1.agent.InfoMessage.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.polykey.v1.agent.InfoMessage;
  return proto.polykey.v1.agent.InfoMessage.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.polykey.v1.agent.InfoMessage} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.polykey.v1.agent.InfoMessage}
 */
proto.polykey.v1.agent.InfoMessage.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setPid(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setNodeId(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setClientHost(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setClientPort(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setProxyHost(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setProxyPort(value);
      break;
    case 9:
      var value = /** @type {string} */ (reader.readString());
      msg.setAgentHost(value);
      break;
    case 10:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setAgentPort(value);
      break;
    case 11:
      var value = /** @type {string} */ (reader.readString());
      msg.setForwardHost(value);
      break;
    case 12:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setForwardPort(value);
      break;
    case 13:
      var value = /** @type {string} */ (reader.readString());
      msg.setRootPublicKeyPem(value);
      break;
    case 14:
      var value = /** @type {string} */ (reader.readString());
      msg.setRootCertPem(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.polykey.v1.agent.InfoMessage.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.polykey.v1.agent.InfoMessage.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.polykey.v1.agent.InfoMessage} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.polykey.v1.agent.InfoMessage.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPid();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = message.getNodeId();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getClientHost();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getClientPort();
  if (f !== 0) {
    writer.writeUint32(
      4,
      f
    );
  }
  f = message.getProxyHost();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getProxyPort();
  if (f !== 0) {
    writer.writeUint32(
      6,
      f
    );
  }
  f = message.getAgentHost();
  if (f.length > 0) {
    writer.writeString(
      9,
      f
    );
  }
  f = message.getAgentPort();
  if (f !== 0) {
    writer.writeUint32(
      10,
      f
    );
  }
  f = message.getForwardHost();
  if (f.length > 0) {
    writer.writeString(
      11,
      f
    );
  }
  f = message.getForwardPort();
  if (f !== 0) {
    writer.writeUint32(
      12,
      f
    );
  }
  f = message.getRootPublicKeyPem();
  if (f.length > 0) {
    writer.writeString(
      13,
      f
    );
  }
  f = message.getRootCertPem();
  if (f.length > 0) {
    writer.writeString(
      14,
      f
    );
  }
};


/**
 * optional uint32 pid = 1;
 * @return {number}
 */
proto.polykey.v1.agent.InfoMessage.prototype.getPid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.polykey.v1.agent.InfoMessage} returns this
 */
proto.polykey.v1.agent.InfoMessage.prototype.setPid = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional string node_id = 2;
 * @return {string}
 */
proto.polykey.v1.agent.InfoMessage.prototype.getNodeId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.polykey.v1.agent.InfoMessage} returns this
 */
proto.polykey.v1.agent.InfoMessage.prototype.setNodeId = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string client_host = 3;
 * @return {string}
 */
proto.polykey.v1.agent.InfoMessage.prototype.getClientHost = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.polykey.v1.agent.InfoMessage} returns this
 */
proto.polykey.v1.agent.InfoMessage.prototype.setClientHost = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional uint32 client_port = 4;
 * @return {number}
 */
proto.polykey.v1.agent.InfoMessage.prototype.getClientPort = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.polykey.v1.agent.InfoMessage} returns this
 */
proto.polykey.v1.agent.InfoMessage.prototype.setClientPort = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional string proxy_host = 5;
 * @return {string}
 */
proto.polykey.v1.agent.InfoMessage.prototype.getProxyHost = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.polykey.v1.agent.InfoMessage} returns this
 */
proto.polykey.v1.agent.InfoMessage.prototype.setProxyHost = function(value) {
  return jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * optional uint32 proxy_port = 6;
 * @return {number}
 */
proto.polykey.v1.agent.InfoMessage.prototype.getProxyPort = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/**
 * @param {number} value
 * @return {!proto.polykey.v1.agent.InfoMessage} returns this
 */
proto.polykey.v1.agent.InfoMessage.prototype.setProxyPort = function(value) {
  return jspb.Message.setProto3IntField(this, 6, value);
};


/**
 * optional string agent_host = 9;
 * @return {string}
 */
proto.polykey.v1.agent.InfoMessage.prototype.getAgentHost = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 9, ""));
};


/**
 * @param {string} value
 * @return {!proto.polykey.v1.agent.InfoMessage} returns this
 */
proto.polykey.v1.agent.InfoMessage.prototype.setAgentHost = function(value) {
  return jspb.Message.setProto3StringField(this, 9, value);
};


/**
 * optional uint32 agent_port = 10;
 * @return {number}
 */
proto.polykey.v1.agent.InfoMessage.prototype.getAgentPort = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 10, 0));
};


/**
 * @param {number} value
 * @return {!proto.polykey.v1.agent.InfoMessage} returns this
 */
proto.polykey.v1.agent.InfoMessage.prototype.setAgentPort = function(value) {
  return jspb.Message.setProto3IntField(this, 10, value);
};


/**
 * optional string forward_host = 11;
 * @return {string}
 */
proto.polykey.v1.agent.InfoMessage.prototype.getForwardHost = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 11, ""));
};


/**
 * @param {string} value
 * @return {!proto.polykey.v1.agent.InfoMessage} returns this
 */
proto.polykey.v1.agent.InfoMessage.prototype.setForwardHost = function(value) {
  return jspb.Message.setProto3StringField(this, 11, value);
};


/**
 * optional uint32 forward_port = 12;
 * @return {number}
 */
proto.polykey.v1.agent.InfoMessage.prototype.getForwardPort = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 12, 0));
};


/**
 * @param {number} value
 * @return {!proto.polykey.v1.agent.InfoMessage} returns this
 */
proto.polykey.v1.agent.InfoMessage.prototype.setForwardPort = function(value) {
  return jspb.Message.setProto3IntField(this, 12, value);
};


/**
 * optional string root_public_key_pem = 13;
 * @return {string}
 */
proto.polykey.v1.agent.InfoMessage.prototype.getRootPublicKeyPem = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 13, ""));
};


/**
 * @param {string} value
 * @return {!proto.polykey.v1.agent.InfoMessage} returns this
 */
proto.polykey.v1.agent.InfoMessage.prototype.setRootPublicKeyPem = function(value) {
  return jspb.Message.setProto3StringField(this, 13, value);
};


/**
 * optional string root_cert_pem = 14;
 * @return {string}
 */
proto.polykey.v1.agent.InfoMessage.prototype.getRootCertPem = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 14, ""));
};


/**
 * @param {string} value
 * @return {!proto.polykey.v1.agent.InfoMessage} returns this
 */
proto.polykey.v1.agent.InfoMessage.prototype.setRootCertPem = function(value) {
  return jspb.Message.setProto3StringField(this, 14, value);
};


goog.object.extend(exports, proto.polykey.v1.agent);
