// source: Client.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

goog.exportSymbol('proto.clientInterface.ActionsMessage', null, global);
goog.exportSymbol('proto.clientInterface.CertificateMessage', null, global);
goog.exportSymbol('proto.clientInterface.CryptoMessage', null, global);
goog.exportSymbol('proto.clientInterface.EchoMessage', null, global);
goog.exportSymbol('proto.clientInterface.EmptyMessage', null, global);
goog.exportSymbol('proto.clientInterface.GeneralTypeMessage', null, global);
goog.exportSymbol('proto.clientInterface.GestaltGraphMessage', null, global);
goog.exportSymbol('proto.clientInterface.GestaltMessage', null, global);
goog.exportSymbol('proto.clientInterface.GestaltTrustMessage', null, global);
goog.exportSymbol('proto.clientInterface.GetVaultPermMessage', null, global);
goog.exportSymbol('proto.clientInterface.IdentityInfoMessage', null, global);
goog.exportSymbol('proto.clientInterface.KeyMessage', null, global);
goog.exportSymbol('proto.clientInterface.KeyPairMessage', null, global);
goog.exportSymbol('proto.clientInterface.NodeAddressMessage', null, global);
goog.exportSymbol('proto.clientInterface.NodeClaimMessage', null, global);
goog.exportSymbol('proto.clientInterface.NodeMessage', null, global);
goog.exportSymbol('proto.clientInterface.NotificationsListMessage', null, global);
goog.exportSymbol('proto.clientInterface.NotificationsMessage', null, global);
goog.exportSymbol('proto.clientInterface.NotificationsMessage.DataCase', null, global);
goog.exportSymbol('proto.clientInterface.NotificationsReadMessage', null, global);
goog.exportSymbol('proto.clientInterface.NotificationsSendMessage', null, global);
goog.exportSymbol('proto.clientInterface.PasswordMessage', null, global);
goog.exportSymbol('proto.clientInterface.PasswordMessage.PasswordOrFileCase', null, global);
goog.exportSymbol('proto.clientInterface.PermissionMessage', null, global);
goog.exportSymbol('proto.clientInterface.ProviderMessage', null, global);
goog.exportSymbol('proto.clientInterface.ProviderSearchMessage', null, global);
goog.exportSymbol('proto.clientInterface.SecretDirectoryMessage', null, global);
goog.exportSymbol('proto.clientInterface.SecretMessage', null, global);
goog.exportSymbol('proto.clientInterface.SecretRenameMessage', null, global);
goog.exportSymbol('proto.clientInterface.SessionTokenMessage', null, global);
goog.exportSymbol('proto.clientInterface.SetActionsMessage', null, global);
goog.exportSymbol('proto.clientInterface.SetActionsMessage.NodeOrProviderCase', null, global);
goog.exportSymbol('proto.clientInterface.SetVaultPermMessage', null, global);
goog.exportSymbol('proto.clientInterface.StatMessage', null, global);
goog.exportSymbol('proto.clientInterface.StatusMessage', null, global);
goog.exportSymbol('proto.clientInterface.TokenMessage', null, global);
goog.exportSymbol('proto.clientInterface.TokenSpecificMessage', null, global);
goog.exportSymbol('proto.clientInterface.UnsetVaultPermMessage', null, global);
goog.exportSymbol('proto.clientInterface.VaultCloneMessage', null, global);
goog.exportSymbol('proto.clientInterface.VaultListMessage', null, global);
goog.exportSymbol('proto.clientInterface.VaultMessage', null, global);
goog.exportSymbol('proto.clientInterface.VaultMkdirMessage', null, global);
goog.exportSymbol('proto.clientInterface.VaultPullMessage', null, global);
goog.exportSymbol('proto.clientInterface.VaultRenameMessage', null, global);
goog.exportSymbol('proto.clientInterface.VaultShareTypeMessage', null, global);
goog.exportSymbol('proto.clientInterface.VaultsLogEntryMessage', null, global);
goog.exportSymbol('proto.clientInterface.VaultsLogMessage', null, global);
goog.exportSymbol('proto.clientInterface.VaultsVersionMessage', null, global);
goog.exportSymbol('proto.clientInterface.VaultsVersionResultMessage', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.clientInterface.EmptyMessage = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.clientInterface.EmptyMessage, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.clientInterface.EmptyMessage.displayName = 'proto.clientInterface.EmptyMessage';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.clientInterface.StatusMessage = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.clientInterface.StatusMessage, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.clientInterface.StatusMessage.displayName = 'proto.clientInterface.StatusMessage';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.clientInterface.EchoMessage = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.clientInterface.EchoMessage, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.clientInterface.EchoMessage.displayName = 'proto.clientInterface.EchoMessage';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.clientInterface.PasswordMessage = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.clientInterface.PasswordMessage.oneofGroups_);
};
goog.inherits(proto.clientInterface.PasswordMessage, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.clientInterface.PasswordMessage.displayName = 'proto.clientInterface.PasswordMessage';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.clientInterface.SessionTokenMessage = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.clientInterface.SessionTokenMessage, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.clientInterface.SessionTokenMessage.displayName = 'proto.clientInterface.SessionTokenMessage';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.clientInterface.VaultListMessage = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.clientInterface.VaultListMessage, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.clientInterface.VaultListMessage.displayName = 'proto.clientInterface.VaultListMessage';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.clientInterface.VaultMessage = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.clientInterface.VaultMessage, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.clientInterface.VaultMessage.displayName = 'proto.clientInterface.VaultMessage';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.clientInterface.VaultRenameMessage = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.clientInterface.VaultRenameMessage, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.clientInterface.VaultRenameMessage.displayName = 'proto.clientInterface.VaultRenameMessage';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.clientInterface.VaultMkdirMessage = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.clientInterface.VaultMkdirMessage, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.clientInterface.VaultMkdirMessage.displayName = 'proto.clientInterface.VaultMkdirMessage';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.clientInterface.VaultPullMessage = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.clientInterface.VaultPullMessage, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.clientInterface.VaultPullMessage.displayName = 'proto.clientInterface.VaultPullMessage';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.clientInterface.VaultCloneMessage = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.clientInterface.VaultCloneMessage, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.clientInterface.VaultCloneMessage.displayName = 'proto.clientInterface.VaultCloneMessage';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.clientInterface.SecretRenameMessage = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.clientInterface.SecretRenameMessage, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.clientInterface.SecretRenameMessage.displayName = 'proto.clientInterface.SecretRenameMessage';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.clientInterface.SecretMessage = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.clientInterface.SecretMessage, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.clientInterface.SecretMessage.displayName = 'proto.clientInterface.SecretMessage';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.clientInterface.SecretDirectoryMessage = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.clientInterface.SecretDirectoryMessage, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.clientInterface.SecretDirectoryMessage.displayName = 'proto.clientInterface.SecretDirectoryMessage';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.clientInterface.StatMessage = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.clientInterface.StatMessage, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.clientInterface.StatMessage.displayName = 'proto.clientInterface.StatMessage';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.clientInterface.SetVaultPermMessage = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.clientInterface.SetVaultPermMessage, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.clientInterface.SetVaultPermMessage.displayName = 'proto.clientInterface.SetVaultPermMessage';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.clientInterface.UnsetVaultPermMessage = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.clientInterface.UnsetVaultPermMessage, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.clientInterface.UnsetVaultPermMessage.displayName = 'proto.clientInterface.UnsetVaultPermMessage';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.clientInterface.GetVaultPermMessage = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.clientInterface.GetVaultPermMessage, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.clientInterface.GetVaultPermMessage.displayName = 'proto.clientInterface.GetVaultPermMessage';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.clientInterface.PermissionMessage = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.clientInterface.PermissionMessage, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.clientInterface.PermissionMessage.displayName = 'proto.clientInterface.PermissionMessage';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.clientInterface.VaultsVersionMessage = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.clientInterface.VaultsVersionMessage, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.clientInterface.VaultsVersionMessage.displayName = 'proto.clientInterface.VaultsVersionMessage';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.clientInterface.VaultsVersionResultMessage = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.clientInterface.VaultsVersionResultMessage, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.clientInterface.VaultsVersionResultMessage.displayName = 'proto.clientInterface.VaultsVersionResultMessage';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.clientInterface.VaultsLogMessage = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.clientInterface.VaultsLogMessage, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.clientInterface.VaultsLogMessage.displayName = 'proto.clientInterface.VaultsLogMessage';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.clientInterface.VaultsLogEntryMessage = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.clientInterface.VaultsLogEntryMessage, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.clientInterface.VaultsLogEntryMessage.displayName = 'proto.clientInterface.VaultsLogEntryMessage';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.clientInterface.NodeMessage = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.clientInterface.NodeMessage, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.clientInterface.NodeMessage.displayName = 'proto.clientInterface.NodeMessage';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.clientInterface.NodeAddressMessage = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.clientInterface.NodeAddressMessage, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.clientInterface.NodeAddressMessage.displayName = 'proto.clientInterface.NodeAddressMessage';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.clientInterface.NodeClaimMessage = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.clientInterface.NodeClaimMessage, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.clientInterface.NodeClaimMessage.displayName = 'proto.clientInterface.NodeClaimMessage';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.clientInterface.CryptoMessage = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.clientInterface.CryptoMessage, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.clientInterface.CryptoMessage.displayName = 'proto.clientInterface.CryptoMessage';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.clientInterface.KeyMessage = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.clientInterface.KeyMessage, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.clientInterface.KeyMessage.displayName = 'proto.clientInterface.KeyMessage';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.clientInterface.KeyPairMessage = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.clientInterface.KeyPairMessage, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.clientInterface.KeyPairMessage.displayName = 'proto.clientInterface.KeyPairMessage';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.clientInterface.CertificateMessage = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.clientInterface.CertificateMessage, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.clientInterface.CertificateMessage.displayName = 'proto.clientInterface.CertificateMessage';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.clientInterface.ProviderMessage = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.clientInterface.ProviderMessage, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.clientInterface.ProviderMessage.displayName = 'proto.clientInterface.ProviderMessage';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.clientInterface.TokenSpecificMessage = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.clientInterface.TokenSpecificMessage, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.clientInterface.TokenSpecificMessage.displayName = 'proto.clientInterface.TokenSpecificMessage';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.clientInterface.TokenMessage = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.clientInterface.TokenMessage, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.clientInterface.TokenMessage.displayName = 'proto.clientInterface.TokenMessage';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.clientInterface.ProviderSearchMessage = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.clientInterface.ProviderSearchMessage.repeatedFields_, null);
};
goog.inherits(proto.clientInterface.ProviderSearchMessage, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.clientInterface.ProviderSearchMessage.displayName = 'proto.clientInterface.ProviderSearchMessage';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.clientInterface.IdentityInfoMessage = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.clientInterface.IdentityInfoMessage, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.clientInterface.IdentityInfoMessage.displayName = 'proto.clientInterface.IdentityInfoMessage';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.clientInterface.GestaltMessage = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.clientInterface.GestaltMessage, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.clientInterface.GestaltMessage.displayName = 'proto.clientInterface.GestaltMessage';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.clientInterface.GestaltGraphMessage = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.clientInterface.GestaltGraphMessage, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.clientInterface.GestaltGraphMessage.displayName = 'proto.clientInterface.GestaltGraphMessage';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.clientInterface.GestaltTrustMessage = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.clientInterface.GestaltTrustMessage, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.clientInterface.GestaltTrustMessage.displayName = 'proto.clientInterface.GestaltTrustMessage';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.clientInterface.ActionsMessage = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.clientInterface.ActionsMessage.repeatedFields_, null);
};
goog.inherits(proto.clientInterface.ActionsMessage, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.clientInterface.ActionsMessage.displayName = 'proto.clientInterface.ActionsMessage';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.clientInterface.SetActionsMessage = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.clientInterface.SetActionsMessage.oneofGroups_);
};
goog.inherits(proto.clientInterface.SetActionsMessage, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.clientInterface.SetActionsMessage.displayName = 'proto.clientInterface.SetActionsMessage';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.clientInterface.NotificationsMessage = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.clientInterface.NotificationsMessage.oneofGroups_);
};
goog.inherits(proto.clientInterface.NotificationsMessage, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.clientInterface.NotificationsMessage.displayName = 'proto.clientInterface.NotificationsMessage';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.clientInterface.NotificationsSendMessage = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.clientInterface.NotificationsSendMessage, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.clientInterface.NotificationsSendMessage.displayName = 'proto.clientInterface.NotificationsSendMessage';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.clientInterface.NotificationsReadMessage = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.clientInterface.NotificationsReadMessage, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.clientInterface.NotificationsReadMessage.displayName = 'proto.clientInterface.NotificationsReadMessage';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.clientInterface.NotificationsListMessage = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.clientInterface.NotificationsListMessage.repeatedFields_, null);
};
goog.inherits(proto.clientInterface.NotificationsListMessage, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.clientInterface.NotificationsListMessage.displayName = 'proto.clientInterface.NotificationsListMessage';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.clientInterface.GeneralTypeMessage = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.clientInterface.GeneralTypeMessage, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.clientInterface.GeneralTypeMessage.displayName = 'proto.clientInterface.GeneralTypeMessage';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.clientInterface.VaultShareTypeMessage = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.clientInterface.VaultShareTypeMessage.repeatedFields_, null);
};
goog.inherits(proto.clientInterface.VaultShareTypeMessage, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.clientInterface.VaultShareTypeMessage.displayName = 'proto.clientInterface.VaultShareTypeMessage';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.clientInterface.EmptyMessage.prototype.toObject = function(opt_includeInstance) {
  return proto.clientInterface.EmptyMessage.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.clientInterface.EmptyMessage} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.clientInterface.EmptyMessage.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.clientInterface.EmptyMessage}
 */
proto.clientInterface.EmptyMessage.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.clientInterface.EmptyMessage;
  return proto.clientInterface.EmptyMessage.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.clientInterface.EmptyMessage} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.clientInterface.EmptyMessage}
 */
proto.clientInterface.EmptyMessage.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.clientInterface.EmptyMessage.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.clientInterface.EmptyMessage.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.clientInterface.EmptyMessage} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.clientInterface.EmptyMessage.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.clientInterface.StatusMessage.prototype.toObject = function(opt_includeInstance) {
  return proto.clientInterface.StatusMessage.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.clientInterface.StatusMessage} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.clientInterface.StatusMessage.toObject = function(includeInstance, msg) {
  var f, obj = {
    success: jspb.Message.getBooleanFieldWithDefault(msg, 1, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.clientInterface.StatusMessage}
 */
proto.clientInterface.StatusMessage.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.clientInterface.StatusMessage;
  return proto.clientInterface.StatusMessage.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.clientInterface.StatusMessage} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.clientInterface.StatusMessage}
 */
proto.clientInterface.StatusMessage.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setSuccess(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.clientInterface.StatusMessage.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.clientInterface.StatusMessage.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.clientInterface.StatusMessage} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.clientInterface.StatusMessage.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSuccess();
  if (f) {
    writer.writeBool(
      1,
      f
    );
  }
};


/**
 * optional bool success = 1;
 * @return {boolean}
 */
proto.clientInterface.StatusMessage.prototype.getSuccess = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 1, false));
};


/**
 * @param {boolean} value
 * @return {!proto.clientInterface.StatusMessage} returns this
 */
proto.clientInterface.StatusMessage.prototype.setSuccess = function(value) {
  return jspb.Message.setProto3BooleanField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.clientInterface.EchoMessage.prototype.toObject = function(opt_includeInstance) {
  return proto.clientInterface.EchoMessage.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.clientInterface.EchoMessage} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.clientInterface.EchoMessage.toObject = function(includeInstance, msg) {
  var f, obj = {
    challenge: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.clientInterface.EchoMessage}
 */
proto.clientInterface.EchoMessage.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.clientInterface.EchoMessage;
  return proto.clientInterface.EchoMessage.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.clientInterface.EchoMessage} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.clientInterface.EchoMessage}
 */
proto.clientInterface.EchoMessage.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setChallenge(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.clientInterface.EchoMessage.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.clientInterface.EchoMessage.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.clientInterface.EchoMessage} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.clientInterface.EchoMessage.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getChallenge();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string challenge = 1;
 * @return {string}
 */
proto.clientInterface.EchoMessage.prototype.getChallenge = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.clientInterface.EchoMessage} returns this
 */
proto.clientInterface.EchoMessage.prototype.setChallenge = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};



/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.clientInterface.PasswordMessage.oneofGroups_ = [[1,2]];

/**
 * @enum {number}
 */
proto.clientInterface.PasswordMessage.PasswordOrFileCase = {
  PASSWORD_OR_FILE_NOT_SET: 0,
  PASSWORD: 1,
  PASSWORD_FILE: 2
};

/**
 * @return {proto.clientInterface.PasswordMessage.PasswordOrFileCase}
 */
proto.clientInterface.PasswordMessage.prototype.getPasswordOrFileCase = function() {
  return /** @type {proto.clientInterface.PasswordMessage.PasswordOrFileCase} */(jspb.Message.computeOneofCase(this, proto.clientInterface.PasswordMessage.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.clientInterface.PasswordMessage.prototype.toObject = function(opt_includeInstance) {
  return proto.clientInterface.PasswordMessage.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.clientInterface.PasswordMessage} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.clientInterface.PasswordMessage.toObject = function(includeInstance, msg) {
  var f, obj = {
    password: jspb.Message.getFieldWithDefault(msg, 1, ""),
    passwordFile: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.clientInterface.PasswordMessage}
 */
proto.clientInterface.PasswordMessage.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.clientInterface.PasswordMessage;
  return proto.clientInterface.PasswordMessage.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.clientInterface.PasswordMessage} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.clientInterface.PasswordMessage}
 */
proto.clientInterface.PasswordMessage.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setPassword(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setPasswordFile(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.clientInterface.PasswordMessage.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.clientInterface.PasswordMessage.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.clientInterface.PasswordMessage} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.clientInterface.PasswordMessage.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {string} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeString(
      1,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string password = 1;
 * @return {string}
 */
proto.clientInterface.PasswordMessage.prototype.getPassword = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.clientInterface.PasswordMessage} returns this
 */
proto.clientInterface.PasswordMessage.prototype.setPassword = function(value) {
  return jspb.Message.setOneofField(this, 1, proto.clientInterface.PasswordMessage.oneofGroups_[0], value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.clientInterface.PasswordMessage} returns this
 */
proto.clientInterface.PasswordMessage.prototype.clearPassword = function() {
  return jspb.Message.setOneofField(this, 1, proto.clientInterface.PasswordMessage.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.clientInterface.PasswordMessage.prototype.hasPassword = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string password_file = 2;
 * @return {string}
 */
proto.clientInterface.PasswordMessage.prototype.getPasswordFile = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.clientInterface.PasswordMessage} returns this
 */
proto.clientInterface.PasswordMessage.prototype.setPasswordFile = function(value) {
  return jspb.Message.setOneofField(this, 2, proto.clientInterface.PasswordMessage.oneofGroups_[0], value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.clientInterface.PasswordMessage} returns this
 */
proto.clientInterface.PasswordMessage.prototype.clearPasswordFile = function() {
  return jspb.Message.setOneofField(this, 2, proto.clientInterface.PasswordMessage.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.clientInterface.PasswordMessage.prototype.hasPasswordFile = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.clientInterface.SessionTokenMessage.prototype.toObject = function(opt_includeInstance) {
  return proto.clientInterface.SessionTokenMessage.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.clientInterface.SessionTokenMessage} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.clientInterface.SessionTokenMessage.toObject = function(includeInstance, msg) {
  var f, obj = {
    token: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.clientInterface.SessionTokenMessage}
 */
proto.clientInterface.SessionTokenMessage.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.clientInterface.SessionTokenMessage;
  return proto.clientInterface.SessionTokenMessage.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.clientInterface.SessionTokenMessage} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.clientInterface.SessionTokenMessage}
 */
proto.clientInterface.SessionTokenMessage.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setToken(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.clientInterface.SessionTokenMessage.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.clientInterface.SessionTokenMessage.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.clientInterface.SessionTokenMessage} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.clientInterface.SessionTokenMessage.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getToken();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string token = 1;
 * @return {string}
 */
proto.clientInterface.SessionTokenMessage.prototype.getToken = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.clientInterface.SessionTokenMessage} returns this
 */
proto.clientInterface.SessionTokenMessage.prototype.setToken = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.clientInterface.VaultListMessage.prototype.toObject = function(opt_includeInstance) {
  return proto.clientInterface.VaultListMessage.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.clientInterface.VaultListMessage} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.clientInterface.VaultListMessage.toObject = function(includeInstance, msg) {
  var f, obj = {
    vaultName: jspb.Message.getFieldWithDefault(msg, 1, ""),
    vaultId: msg.getVaultId_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.clientInterface.VaultListMessage}
 */
proto.clientInterface.VaultListMessage.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.clientInterface.VaultListMessage;
  return proto.clientInterface.VaultListMessage.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.clientInterface.VaultListMessage} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.clientInterface.VaultListMessage}
 */
proto.clientInterface.VaultListMessage.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setVaultName(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setVaultId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.clientInterface.VaultListMessage.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.clientInterface.VaultListMessage.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.clientInterface.VaultListMessage} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.clientInterface.VaultListMessage.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getVaultName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getVaultId_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      2,
      f
    );
  }
};


/**
 * optional string vault_name = 1;
 * @return {string}
 */
proto.clientInterface.VaultListMessage.prototype.getVaultName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.clientInterface.VaultListMessage} returns this
 */
proto.clientInterface.VaultListMessage.prototype.setVaultName = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional bytes vault_id = 2;
 * @return {!(string|Uint8Array)}
 */
proto.clientInterface.VaultListMessage.prototype.getVaultId = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes vault_id = 2;
 * This is a type-conversion wrapper around `getVaultId()`
 * @return {string}
 */
proto.clientInterface.VaultListMessage.prototype.getVaultId_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getVaultId()));
};


/**
 * optional bytes vault_id = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getVaultId()`
 * @return {!Uint8Array}
 */
proto.clientInterface.VaultListMessage.prototype.getVaultId_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getVaultId()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.clientInterface.VaultListMessage} returns this
 */
proto.clientInterface.VaultListMessage.prototype.setVaultId = function(value) {
  return jspb.Message.setProto3BytesField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.clientInterface.VaultMessage.prototype.toObject = function(opt_includeInstance) {
  return proto.clientInterface.VaultMessage.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.clientInterface.VaultMessage} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.clientInterface.VaultMessage.toObject = function(includeInstance, msg) {
  var f, obj = {
    nameOrId: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.clientInterface.VaultMessage}
 */
proto.clientInterface.VaultMessage.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.clientInterface.VaultMessage;
  return proto.clientInterface.VaultMessage.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.clientInterface.VaultMessage} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.clientInterface.VaultMessage}
 */
proto.clientInterface.VaultMessage.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setNameOrId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.clientInterface.VaultMessage.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.clientInterface.VaultMessage.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.clientInterface.VaultMessage} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.clientInterface.VaultMessage.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getNameOrId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string name_or_Id = 1;
 * @return {string}
 */
proto.clientInterface.VaultMessage.prototype.getNameOrId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.clientInterface.VaultMessage} returns this
 */
proto.clientInterface.VaultMessage.prototype.setNameOrId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.clientInterface.VaultRenameMessage.prototype.toObject = function(opt_includeInstance) {
  return proto.clientInterface.VaultRenameMessage.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.clientInterface.VaultRenameMessage} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.clientInterface.VaultRenameMessage.toObject = function(includeInstance, msg) {
  var f, obj = {
    vault: (f = msg.getVault()) && proto.clientInterface.VaultMessage.toObject(includeInstance, f),
    newName: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.clientInterface.VaultRenameMessage}
 */
proto.clientInterface.VaultRenameMessage.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.clientInterface.VaultRenameMessage;
  return proto.clientInterface.VaultRenameMessage.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.clientInterface.VaultRenameMessage} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.clientInterface.VaultRenameMessage}
 */
proto.clientInterface.VaultRenameMessage.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.clientInterface.VaultMessage;
      reader.readMessage(value,proto.clientInterface.VaultMessage.deserializeBinaryFromReader);
      msg.setVault(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setNewName(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.clientInterface.VaultRenameMessage.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.clientInterface.VaultRenameMessage.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.clientInterface.VaultRenameMessage} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.clientInterface.VaultRenameMessage.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getVault();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.clientInterface.VaultMessage.serializeBinaryToWriter
    );
  }
  f = message.getNewName();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional VaultMessage vault = 1;
 * @return {?proto.clientInterface.VaultMessage}
 */
proto.clientInterface.VaultRenameMessage.prototype.getVault = function() {
  return /** @type{?proto.clientInterface.VaultMessage} */ (
    jspb.Message.getWrapperField(this, proto.clientInterface.VaultMessage, 1));
};


/**
 * @param {?proto.clientInterface.VaultMessage|undefined} value
 * @return {!proto.clientInterface.VaultRenameMessage} returns this
*/
proto.clientInterface.VaultRenameMessage.prototype.setVault = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.clientInterface.VaultRenameMessage} returns this
 */
proto.clientInterface.VaultRenameMessage.prototype.clearVault = function() {
  return this.setVault(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.clientInterface.VaultRenameMessage.prototype.hasVault = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string new_name = 2;
 * @return {string}
 */
proto.clientInterface.VaultRenameMessage.prototype.getNewName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.clientInterface.VaultRenameMessage} returns this
 */
proto.clientInterface.VaultRenameMessage.prototype.setNewName = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.clientInterface.VaultMkdirMessage.prototype.toObject = function(opt_includeInstance) {
  return proto.clientInterface.VaultMkdirMessage.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.clientInterface.VaultMkdirMessage} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.clientInterface.VaultMkdirMessage.toObject = function(includeInstance, msg) {
  var f, obj = {
    vault: (f = msg.getVault()) && proto.clientInterface.VaultMessage.toObject(includeInstance, f),
    dirName: jspb.Message.getFieldWithDefault(msg, 2, ""),
    recursive: jspb.Message.getBooleanFieldWithDefault(msg, 3, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.clientInterface.VaultMkdirMessage}
 */
proto.clientInterface.VaultMkdirMessage.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.clientInterface.VaultMkdirMessage;
  return proto.clientInterface.VaultMkdirMessage.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.clientInterface.VaultMkdirMessage} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.clientInterface.VaultMkdirMessage}
 */
proto.clientInterface.VaultMkdirMessage.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.clientInterface.VaultMessage;
      reader.readMessage(value,proto.clientInterface.VaultMessage.deserializeBinaryFromReader);
      msg.setVault(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setDirName(value);
      break;
    case 3:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setRecursive(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.clientInterface.VaultMkdirMessage.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.clientInterface.VaultMkdirMessage.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.clientInterface.VaultMkdirMessage} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.clientInterface.VaultMkdirMessage.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getVault();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.clientInterface.VaultMessage.serializeBinaryToWriter
    );
  }
  f = message.getDirName();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getRecursive();
  if (f) {
    writer.writeBool(
      3,
      f
    );
  }
};


/**
 * optional VaultMessage vault = 1;
 * @return {?proto.clientInterface.VaultMessage}
 */
proto.clientInterface.VaultMkdirMessage.prototype.getVault = function() {
  return /** @type{?proto.clientInterface.VaultMessage} */ (
    jspb.Message.getWrapperField(this, proto.clientInterface.VaultMessage, 1));
};


/**
 * @param {?proto.clientInterface.VaultMessage|undefined} value
 * @return {!proto.clientInterface.VaultMkdirMessage} returns this
*/
proto.clientInterface.VaultMkdirMessage.prototype.setVault = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.clientInterface.VaultMkdirMessage} returns this
 */
proto.clientInterface.VaultMkdirMessage.prototype.clearVault = function() {
  return this.setVault(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.clientInterface.VaultMkdirMessage.prototype.hasVault = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string dir_name = 2;
 * @return {string}
 */
proto.clientInterface.VaultMkdirMessage.prototype.getDirName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.clientInterface.VaultMkdirMessage} returns this
 */
proto.clientInterface.VaultMkdirMessage.prototype.setDirName = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional bool recursive = 3;
 * @return {boolean}
 */
proto.clientInterface.VaultMkdirMessage.prototype.getRecursive = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 3, false));
};


/**
 * @param {boolean} value
 * @return {!proto.clientInterface.VaultMkdirMessage} returns this
 */
proto.clientInterface.VaultMkdirMessage.prototype.setRecursive = function(value) {
  return jspb.Message.setProto3BooleanField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.clientInterface.VaultPullMessage.prototype.toObject = function(opt_includeInstance) {
  return proto.clientInterface.VaultPullMessage.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.clientInterface.VaultPullMessage} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.clientInterface.VaultPullMessage.toObject = function(includeInstance, msg) {
  var f, obj = {
    vault: (f = msg.getVault()) && proto.clientInterface.VaultMessage.toObject(includeInstance, f),
    node: (f = msg.getNode()) && proto.clientInterface.NodeMessage.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.clientInterface.VaultPullMessage}
 */
proto.clientInterface.VaultPullMessage.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.clientInterface.VaultPullMessage;
  return proto.clientInterface.VaultPullMessage.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.clientInterface.VaultPullMessage} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.clientInterface.VaultPullMessage}
 */
proto.clientInterface.VaultPullMessage.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.clientInterface.VaultMessage;
      reader.readMessage(value,proto.clientInterface.VaultMessage.deserializeBinaryFromReader);
      msg.setVault(value);
      break;
    case 2:
      var value = new proto.clientInterface.NodeMessage;
      reader.readMessage(value,proto.clientInterface.NodeMessage.deserializeBinaryFromReader);
      msg.setNode(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.clientInterface.VaultPullMessage.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.clientInterface.VaultPullMessage.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.clientInterface.VaultPullMessage} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.clientInterface.VaultPullMessage.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getVault();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.clientInterface.VaultMessage.serializeBinaryToWriter
    );
  }
  f = message.getNode();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.clientInterface.NodeMessage.serializeBinaryToWriter
    );
  }
};


/**
 * optional VaultMessage vault = 1;
 * @return {?proto.clientInterface.VaultMessage}
 */
proto.clientInterface.VaultPullMessage.prototype.getVault = function() {
  return /** @type{?proto.clientInterface.VaultMessage} */ (
    jspb.Message.getWrapperField(this, proto.clientInterface.VaultMessage, 1));
};


/**
 * @param {?proto.clientInterface.VaultMessage|undefined} value
 * @return {!proto.clientInterface.VaultPullMessage} returns this
*/
proto.clientInterface.VaultPullMessage.prototype.setVault = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.clientInterface.VaultPullMessage} returns this
 */
proto.clientInterface.VaultPullMessage.prototype.clearVault = function() {
  return this.setVault(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.clientInterface.VaultPullMessage.prototype.hasVault = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional NodeMessage node = 2;
 * @return {?proto.clientInterface.NodeMessage}
 */
proto.clientInterface.VaultPullMessage.prototype.getNode = function() {
  return /** @type{?proto.clientInterface.NodeMessage} */ (
    jspb.Message.getWrapperField(this, proto.clientInterface.NodeMessage, 2));
};


/**
 * @param {?proto.clientInterface.NodeMessage|undefined} value
 * @return {!proto.clientInterface.VaultPullMessage} returns this
*/
proto.clientInterface.VaultPullMessage.prototype.setNode = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.clientInterface.VaultPullMessage} returns this
 */
proto.clientInterface.VaultPullMessage.prototype.clearNode = function() {
  return this.setNode(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.clientInterface.VaultPullMessage.prototype.hasNode = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.clientInterface.VaultCloneMessage.prototype.toObject = function(opt_includeInstance) {
  return proto.clientInterface.VaultCloneMessage.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.clientInterface.VaultCloneMessage} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.clientInterface.VaultCloneMessage.toObject = function(includeInstance, msg) {
  var f, obj = {
    vault: (f = msg.getVault()) && proto.clientInterface.VaultMessage.toObject(includeInstance, f),
    node: (f = msg.getNode()) && proto.clientInterface.NodeMessage.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.clientInterface.VaultCloneMessage}
 */
proto.clientInterface.VaultCloneMessage.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.clientInterface.VaultCloneMessage;
  return proto.clientInterface.VaultCloneMessage.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.clientInterface.VaultCloneMessage} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.clientInterface.VaultCloneMessage}
 */
proto.clientInterface.VaultCloneMessage.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.clientInterface.VaultMessage;
      reader.readMessage(value,proto.clientInterface.VaultMessage.deserializeBinaryFromReader);
      msg.setVault(value);
      break;
    case 2:
      var value = new proto.clientInterface.NodeMessage;
      reader.readMessage(value,proto.clientInterface.NodeMessage.deserializeBinaryFromReader);
      msg.setNode(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.clientInterface.VaultCloneMessage.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.clientInterface.VaultCloneMessage.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.clientInterface.VaultCloneMessage} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.clientInterface.VaultCloneMessage.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getVault();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.clientInterface.VaultMessage.serializeBinaryToWriter
    );
  }
  f = message.getNode();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.clientInterface.NodeMessage.serializeBinaryToWriter
    );
  }
};


/**
 * optional VaultMessage vault = 1;
 * @return {?proto.clientInterface.VaultMessage}
 */
proto.clientInterface.VaultCloneMessage.prototype.getVault = function() {
  return /** @type{?proto.clientInterface.VaultMessage} */ (
    jspb.Message.getWrapperField(this, proto.clientInterface.VaultMessage, 1));
};


/**
 * @param {?proto.clientInterface.VaultMessage|undefined} value
 * @return {!proto.clientInterface.VaultCloneMessage} returns this
*/
proto.clientInterface.VaultCloneMessage.prototype.setVault = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.clientInterface.VaultCloneMessage} returns this
 */
proto.clientInterface.VaultCloneMessage.prototype.clearVault = function() {
  return this.setVault(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.clientInterface.VaultCloneMessage.prototype.hasVault = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional NodeMessage node = 2;
 * @return {?proto.clientInterface.NodeMessage}
 */
proto.clientInterface.VaultCloneMessage.prototype.getNode = function() {
  return /** @type{?proto.clientInterface.NodeMessage} */ (
    jspb.Message.getWrapperField(this, proto.clientInterface.NodeMessage, 2));
};


/**
 * @param {?proto.clientInterface.NodeMessage|undefined} value
 * @return {!proto.clientInterface.VaultCloneMessage} returns this
*/
proto.clientInterface.VaultCloneMessage.prototype.setNode = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.clientInterface.VaultCloneMessage} returns this
 */
proto.clientInterface.VaultCloneMessage.prototype.clearNode = function() {
  return this.setNode(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.clientInterface.VaultCloneMessage.prototype.hasNode = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.clientInterface.SecretRenameMessage.prototype.toObject = function(opt_includeInstance) {
  return proto.clientInterface.SecretRenameMessage.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.clientInterface.SecretRenameMessage} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.clientInterface.SecretRenameMessage.toObject = function(includeInstance, msg) {
  var f, obj = {
    oldSecret: (f = msg.getOldSecret()) && proto.clientInterface.SecretMessage.toObject(includeInstance, f),
    newName: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.clientInterface.SecretRenameMessage}
 */
proto.clientInterface.SecretRenameMessage.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.clientInterface.SecretRenameMessage;
  return proto.clientInterface.SecretRenameMessage.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.clientInterface.SecretRenameMessage} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.clientInterface.SecretRenameMessage}
 */
proto.clientInterface.SecretRenameMessage.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.clientInterface.SecretMessage;
      reader.readMessage(value,proto.clientInterface.SecretMessage.deserializeBinaryFromReader);
      msg.setOldSecret(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setNewName(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.clientInterface.SecretRenameMessage.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.clientInterface.SecretRenameMessage.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.clientInterface.SecretRenameMessage} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.clientInterface.SecretRenameMessage.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getOldSecret();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.clientInterface.SecretMessage.serializeBinaryToWriter
    );
  }
  f = message.getNewName();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional SecretMessage old_secret = 1;
 * @return {?proto.clientInterface.SecretMessage}
 */
proto.clientInterface.SecretRenameMessage.prototype.getOldSecret = function() {
  return /** @type{?proto.clientInterface.SecretMessage} */ (
    jspb.Message.getWrapperField(this, proto.clientInterface.SecretMessage, 1));
};


/**
 * @param {?proto.clientInterface.SecretMessage|undefined} value
 * @return {!proto.clientInterface.SecretRenameMessage} returns this
*/
proto.clientInterface.SecretRenameMessage.prototype.setOldSecret = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.clientInterface.SecretRenameMessage} returns this
 */
proto.clientInterface.SecretRenameMessage.prototype.clearOldSecret = function() {
  return this.setOldSecret(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.clientInterface.SecretRenameMessage.prototype.hasOldSecret = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string new_name = 2;
 * @return {string}
 */
proto.clientInterface.SecretRenameMessage.prototype.getNewName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.clientInterface.SecretRenameMessage} returns this
 */
proto.clientInterface.SecretRenameMessage.prototype.setNewName = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.clientInterface.SecretMessage.prototype.toObject = function(opt_includeInstance) {
  return proto.clientInterface.SecretMessage.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.clientInterface.SecretMessage} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.clientInterface.SecretMessage.toObject = function(includeInstance, msg) {
  var f, obj = {
    vault: (f = msg.getVault()) && proto.clientInterface.VaultMessage.toObject(includeInstance, f),
    secretName: jspb.Message.getFieldWithDefault(msg, 2, ""),
    secretContent: msg.getSecretContent_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.clientInterface.SecretMessage}
 */
proto.clientInterface.SecretMessage.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.clientInterface.SecretMessage;
  return proto.clientInterface.SecretMessage.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.clientInterface.SecretMessage} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.clientInterface.SecretMessage}
 */
proto.clientInterface.SecretMessage.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.clientInterface.VaultMessage;
      reader.readMessage(value,proto.clientInterface.VaultMessage.deserializeBinaryFromReader);
      msg.setVault(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setSecretName(value);
      break;
    case 3:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setSecretContent(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.clientInterface.SecretMessage.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.clientInterface.SecretMessage.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.clientInterface.SecretMessage} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.clientInterface.SecretMessage.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getVault();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.clientInterface.VaultMessage.serializeBinaryToWriter
    );
  }
  f = message.getSecretName();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getSecretContent_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      3,
      f
    );
  }
};


/**
 * optional VaultMessage vault = 1;
 * @return {?proto.clientInterface.VaultMessage}
 */
proto.clientInterface.SecretMessage.prototype.getVault = function() {
  return /** @type{?proto.clientInterface.VaultMessage} */ (
    jspb.Message.getWrapperField(this, proto.clientInterface.VaultMessage, 1));
};


/**
 * @param {?proto.clientInterface.VaultMessage|undefined} value
 * @return {!proto.clientInterface.SecretMessage} returns this
*/
proto.clientInterface.SecretMessage.prototype.setVault = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.clientInterface.SecretMessage} returns this
 */
proto.clientInterface.SecretMessage.prototype.clearVault = function() {
  return this.setVault(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.clientInterface.SecretMessage.prototype.hasVault = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string secret_name = 2;
 * @return {string}
 */
proto.clientInterface.SecretMessage.prototype.getSecretName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.clientInterface.SecretMessage} returns this
 */
proto.clientInterface.SecretMessage.prototype.setSecretName = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional bytes secret_content = 3;
 * @return {!(string|Uint8Array)}
 */
proto.clientInterface.SecretMessage.prototype.getSecretContent = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * optional bytes secret_content = 3;
 * This is a type-conversion wrapper around `getSecretContent()`
 * @return {string}
 */
proto.clientInterface.SecretMessage.prototype.getSecretContent_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getSecretContent()));
};


/**
 * optional bytes secret_content = 3;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getSecretContent()`
 * @return {!Uint8Array}
 */
proto.clientInterface.SecretMessage.prototype.getSecretContent_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getSecretContent()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.clientInterface.SecretMessage} returns this
 */
proto.clientInterface.SecretMessage.prototype.setSecretContent = function(value) {
  return jspb.Message.setProto3BytesField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.clientInterface.SecretDirectoryMessage.prototype.toObject = function(opt_includeInstance) {
  return proto.clientInterface.SecretDirectoryMessage.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.clientInterface.SecretDirectoryMessage} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.clientInterface.SecretDirectoryMessage.toObject = function(includeInstance, msg) {
  var f, obj = {
    vault: (f = msg.getVault()) && proto.clientInterface.VaultMessage.toObject(includeInstance, f),
    secretDirectory: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.clientInterface.SecretDirectoryMessage}
 */
proto.clientInterface.SecretDirectoryMessage.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.clientInterface.SecretDirectoryMessage;
  return proto.clientInterface.SecretDirectoryMessage.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.clientInterface.SecretDirectoryMessage} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.clientInterface.SecretDirectoryMessage}
 */
proto.clientInterface.SecretDirectoryMessage.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.clientInterface.VaultMessage;
      reader.readMessage(value,proto.clientInterface.VaultMessage.deserializeBinaryFromReader);
      msg.setVault(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setSecretDirectory(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.clientInterface.SecretDirectoryMessage.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.clientInterface.SecretDirectoryMessage.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.clientInterface.SecretDirectoryMessage} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.clientInterface.SecretDirectoryMessage.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getVault();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.clientInterface.VaultMessage.serializeBinaryToWriter
    );
  }
  f = message.getSecretDirectory();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional VaultMessage vault = 1;
 * @return {?proto.clientInterface.VaultMessage}
 */
proto.clientInterface.SecretDirectoryMessage.prototype.getVault = function() {
  return /** @type{?proto.clientInterface.VaultMessage} */ (
    jspb.Message.getWrapperField(this, proto.clientInterface.VaultMessage, 1));
};


/**
 * @param {?proto.clientInterface.VaultMessage|undefined} value
 * @return {!proto.clientInterface.SecretDirectoryMessage} returns this
*/
proto.clientInterface.SecretDirectoryMessage.prototype.setVault = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.clientInterface.SecretDirectoryMessage} returns this
 */
proto.clientInterface.SecretDirectoryMessage.prototype.clearVault = function() {
  return this.setVault(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.clientInterface.SecretDirectoryMessage.prototype.hasVault = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string secret_directory = 2;
 * @return {string}
 */
proto.clientInterface.SecretDirectoryMessage.prototype.getSecretDirectory = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.clientInterface.SecretDirectoryMessage} returns this
 */
proto.clientInterface.SecretDirectoryMessage.prototype.setSecretDirectory = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.clientInterface.StatMessage.prototype.toObject = function(opt_includeInstance) {
  return proto.clientInterface.StatMessage.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.clientInterface.StatMessage} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.clientInterface.StatMessage.toObject = function(includeInstance, msg) {
  var f, obj = {
    stats: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.clientInterface.StatMessage}
 */
proto.clientInterface.StatMessage.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.clientInterface.StatMessage;
  return proto.clientInterface.StatMessage.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.clientInterface.StatMessage} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.clientInterface.StatMessage}
 */
proto.clientInterface.StatMessage.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setStats(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.clientInterface.StatMessage.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.clientInterface.StatMessage.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.clientInterface.StatMessage} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.clientInterface.StatMessage.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getStats();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string stats = 1;
 * @return {string}
 */
proto.clientInterface.StatMessage.prototype.getStats = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.clientInterface.StatMessage} returns this
 */
proto.clientInterface.StatMessage.prototype.setStats = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.clientInterface.SetVaultPermMessage.prototype.toObject = function(opt_includeInstance) {
  return proto.clientInterface.SetVaultPermMessage.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.clientInterface.SetVaultPermMessage} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.clientInterface.SetVaultPermMessage.toObject = function(includeInstance, msg) {
  var f, obj = {
    vault: (f = msg.getVault()) && proto.clientInterface.VaultMessage.toObject(includeInstance, f),
    node: (f = msg.getNode()) && proto.clientInterface.NodeMessage.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.clientInterface.SetVaultPermMessage}
 */
proto.clientInterface.SetVaultPermMessage.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.clientInterface.SetVaultPermMessage;
  return proto.clientInterface.SetVaultPermMessage.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.clientInterface.SetVaultPermMessage} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.clientInterface.SetVaultPermMessage}
 */
proto.clientInterface.SetVaultPermMessage.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.clientInterface.VaultMessage;
      reader.readMessage(value,proto.clientInterface.VaultMessage.deserializeBinaryFromReader);
      msg.setVault(value);
      break;
    case 2:
      var value = new proto.clientInterface.NodeMessage;
      reader.readMessage(value,proto.clientInterface.NodeMessage.deserializeBinaryFromReader);
      msg.setNode(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.clientInterface.SetVaultPermMessage.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.clientInterface.SetVaultPermMessage.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.clientInterface.SetVaultPermMessage} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.clientInterface.SetVaultPermMessage.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getVault();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.clientInterface.VaultMessage.serializeBinaryToWriter
    );
  }
  f = message.getNode();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.clientInterface.NodeMessage.serializeBinaryToWriter
    );
  }
};


/**
 * optional VaultMessage vault = 1;
 * @return {?proto.clientInterface.VaultMessage}
 */
proto.clientInterface.SetVaultPermMessage.prototype.getVault = function() {
  return /** @type{?proto.clientInterface.VaultMessage} */ (
    jspb.Message.getWrapperField(this, proto.clientInterface.VaultMessage, 1));
};


/**
 * @param {?proto.clientInterface.VaultMessage|undefined} value
 * @return {!proto.clientInterface.SetVaultPermMessage} returns this
*/
proto.clientInterface.SetVaultPermMessage.prototype.setVault = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.clientInterface.SetVaultPermMessage} returns this
 */
proto.clientInterface.SetVaultPermMessage.prototype.clearVault = function() {
  return this.setVault(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.clientInterface.SetVaultPermMessage.prototype.hasVault = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional NodeMessage node = 2;
 * @return {?proto.clientInterface.NodeMessage}
 */
proto.clientInterface.SetVaultPermMessage.prototype.getNode = function() {
  return /** @type{?proto.clientInterface.NodeMessage} */ (
    jspb.Message.getWrapperField(this, proto.clientInterface.NodeMessage, 2));
};


/**
 * @param {?proto.clientInterface.NodeMessage|undefined} value
 * @return {!proto.clientInterface.SetVaultPermMessage} returns this
*/
proto.clientInterface.SetVaultPermMessage.prototype.setNode = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.clientInterface.SetVaultPermMessage} returns this
 */
proto.clientInterface.SetVaultPermMessage.prototype.clearNode = function() {
  return this.setNode(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.clientInterface.SetVaultPermMessage.prototype.hasNode = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.clientInterface.UnsetVaultPermMessage.prototype.toObject = function(opt_includeInstance) {
  return proto.clientInterface.UnsetVaultPermMessage.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.clientInterface.UnsetVaultPermMessage} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.clientInterface.UnsetVaultPermMessage.toObject = function(includeInstance, msg) {
  var f, obj = {
    vault: (f = msg.getVault()) && proto.clientInterface.VaultMessage.toObject(includeInstance, f),
    node: (f = msg.getNode()) && proto.clientInterface.NodeMessage.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.clientInterface.UnsetVaultPermMessage}
 */
proto.clientInterface.UnsetVaultPermMessage.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.clientInterface.UnsetVaultPermMessage;
  return proto.clientInterface.UnsetVaultPermMessage.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.clientInterface.UnsetVaultPermMessage} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.clientInterface.UnsetVaultPermMessage}
 */
proto.clientInterface.UnsetVaultPermMessage.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.clientInterface.VaultMessage;
      reader.readMessage(value,proto.clientInterface.VaultMessage.deserializeBinaryFromReader);
      msg.setVault(value);
      break;
    case 2:
      var value = new proto.clientInterface.NodeMessage;
      reader.readMessage(value,proto.clientInterface.NodeMessage.deserializeBinaryFromReader);
      msg.setNode(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.clientInterface.UnsetVaultPermMessage.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.clientInterface.UnsetVaultPermMessage.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.clientInterface.UnsetVaultPermMessage} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.clientInterface.UnsetVaultPermMessage.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getVault();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.clientInterface.VaultMessage.serializeBinaryToWriter
    );
  }
  f = message.getNode();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.clientInterface.NodeMessage.serializeBinaryToWriter
    );
  }
};


/**
 * optional VaultMessage vault = 1;
 * @return {?proto.clientInterface.VaultMessage}
 */
proto.clientInterface.UnsetVaultPermMessage.prototype.getVault = function() {
  return /** @type{?proto.clientInterface.VaultMessage} */ (
    jspb.Message.getWrapperField(this, proto.clientInterface.VaultMessage, 1));
};


/**
 * @param {?proto.clientInterface.VaultMessage|undefined} value
 * @return {!proto.clientInterface.UnsetVaultPermMessage} returns this
*/
proto.clientInterface.UnsetVaultPermMessage.prototype.setVault = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.clientInterface.UnsetVaultPermMessage} returns this
 */
proto.clientInterface.UnsetVaultPermMessage.prototype.clearVault = function() {
  return this.setVault(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.clientInterface.UnsetVaultPermMessage.prototype.hasVault = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional NodeMessage node = 2;
 * @return {?proto.clientInterface.NodeMessage}
 */
proto.clientInterface.UnsetVaultPermMessage.prototype.getNode = function() {
  return /** @type{?proto.clientInterface.NodeMessage} */ (
    jspb.Message.getWrapperField(this, proto.clientInterface.NodeMessage, 2));
};


/**
 * @param {?proto.clientInterface.NodeMessage|undefined} value
 * @return {!proto.clientInterface.UnsetVaultPermMessage} returns this
*/
proto.clientInterface.UnsetVaultPermMessage.prototype.setNode = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.clientInterface.UnsetVaultPermMessage} returns this
 */
proto.clientInterface.UnsetVaultPermMessage.prototype.clearNode = function() {
  return this.setNode(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.clientInterface.UnsetVaultPermMessage.prototype.hasNode = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.clientInterface.GetVaultPermMessage.prototype.toObject = function(opt_includeInstance) {
  return proto.clientInterface.GetVaultPermMessage.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.clientInterface.GetVaultPermMessage} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.clientInterface.GetVaultPermMessage.toObject = function(includeInstance, msg) {
  var f, obj = {
    vault: (f = msg.getVault()) && proto.clientInterface.VaultMessage.toObject(includeInstance, f),
    node: (f = msg.getNode()) && proto.clientInterface.NodeMessage.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.clientInterface.GetVaultPermMessage}
 */
proto.clientInterface.GetVaultPermMessage.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.clientInterface.GetVaultPermMessage;
  return proto.clientInterface.GetVaultPermMessage.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.clientInterface.GetVaultPermMessage} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.clientInterface.GetVaultPermMessage}
 */
proto.clientInterface.GetVaultPermMessage.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.clientInterface.VaultMessage;
      reader.readMessage(value,proto.clientInterface.VaultMessage.deserializeBinaryFromReader);
      msg.setVault(value);
      break;
    case 2:
      var value = new proto.clientInterface.NodeMessage;
      reader.readMessage(value,proto.clientInterface.NodeMessage.deserializeBinaryFromReader);
      msg.setNode(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.clientInterface.GetVaultPermMessage.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.clientInterface.GetVaultPermMessage.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.clientInterface.GetVaultPermMessage} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.clientInterface.GetVaultPermMessage.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getVault();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.clientInterface.VaultMessage.serializeBinaryToWriter
    );
  }
  f = message.getNode();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.clientInterface.NodeMessage.serializeBinaryToWriter
    );
  }
};


/**
 * optional VaultMessage vault = 1;
 * @return {?proto.clientInterface.VaultMessage}
 */
proto.clientInterface.GetVaultPermMessage.prototype.getVault = function() {
  return /** @type{?proto.clientInterface.VaultMessage} */ (
    jspb.Message.getWrapperField(this, proto.clientInterface.VaultMessage, 1));
};


/**
 * @param {?proto.clientInterface.VaultMessage|undefined} value
 * @return {!proto.clientInterface.GetVaultPermMessage} returns this
*/
proto.clientInterface.GetVaultPermMessage.prototype.setVault = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.clientInterface.GetVaultPermMessage} returns this
 */
proto.clientInterface.GetVaultPermMessage.prototype.clearVault = function() {
  return this.setVault(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.clientInterface.GetVaultPermMessage.prototype.hasVault = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional NodeMessage node = 2;
 * @return {?proto.clientInterface.NodeMessage}
 */
proto.clientInterface.GetVaultPermMessage.prototype.getNode = function() {
  return /** @type{?proto.clientInterface.NodeMessage} */ (
    jspb.Message.getWrapperField(this, proto.clientInterface.NodeMessage, 2));
};


/**
 * @param {?proto.clientInterface.NodeMessage|undefined} value
 * @return {!proto.clientInterface.GetVaultPermMessage} returns this
*/
proto.clientInterface.GetVaultPermMessage.prototype.setNode = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.clientInterface.GetVaultPermMessage} returns this
 */
proto.clientInterface.GetVaultPermMessage.prototype.clearNode = function() {
  return this.setNode(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.clientInterface.GetVaultPermMessage.prototype.hasNode = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.clientInterface.PermissionMessage.prototype.toObject = function(opt_includeInstance) {
  return proto.clientInterface.PermissionMessage.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.clientInterface.PermissionMessage} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.clientInterface.PermissionMessage.toObject = function(includeInstance, msg) {
  var f, obj = {
    nodeId: jspb.Message.getFieldWithDefault(msg, 1, ""),
    action: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.clientInterface.PermissionMessage}
 */
proto.clientInterface.PermissionMessage.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.clientInterface.PermissionMessage;
  return proto.clientInterface.PermissionMessage.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.clientInterface.PermissionMessage} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.clientInterface.PermissionMessage}
 */
proto.clientInterface.PermissionMessage.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setNodeId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setAction(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.clientInterface.PermissionMessage.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.clientInterface.PermissionMessage.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.clientInterface.PermissionMessage} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.clientInterface.PermissionMessage.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getNodeId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getAction();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string node_id = 1;
 * @return {string}
 */
proto.clientInterface.PermissionMessage.prototype.getNodeId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.clientInterface.PermissionMessage} returns this
 */
proto.clientInterface.PermissionMessage.prototype.setNodeId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string action = 2;
 * @return {string}
 */
proto.clientInterface.PermissionMessage.prototype.getAction = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.clientInterface.PermissionMessage} returns this
 */
proto.clientInterface.PermissionMessage.prototype.setAction = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.clientInterface.VaultsVersionMessage.prototype.toObject = function(opt_includeInstance) {
  return proto.clientInterface.VaultsVersionMessage.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.clientInterface.VaultsVersionMessage} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.clientInterface.VaultsVersionMessage.toObject = function(includeInstance, msg) {
  var f, obj = {
    vault: (f = msg.getVault()) && proto.clientInterface.VaultMessage.toObject(includeInstance, f),
    versionId: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.clientInterface.VaultsVersionMessage}
 */
proto.clientInterface.VaultsVersionMessage.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.clientInterface.VaultsVersionMessage;
  return proto.clientInterface.VaultsVersionMessage.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.clientInterface.VaultsVersionMessage} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.clientInterface.VaultsVersionMessage}
 */
proto.clientInterface.VaultsVersionMessage.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.clientInterface.VaultMessage;
      reader.readMessage(value,proto.clientInterface.VaultMessage.deserializeBinaryFromReader);
      msg.setVault(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setVersionId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.clientInterface.VaultsVersionMessage.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.clientInterface.VaultsVersionMessage.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.clientInterface.VaultsVersionMessage} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.clientInterface.VaultsVersionMessage.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getVault();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.clientInterface.VaultMessage.serializeBinaryToWriter
    );
  }
  f = message.getVersionId();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional VaultMessage vault = 1;
 * @return {?proto.clientInterface.VaultMessage}
 */
proto.clientInterface.VaultsVersionMessage.prototype.getVault = function() {
  return /** @type{?proto.clientInterface.VaultMessage} */ (
    jspb.Message.getWrapperField(this, proto.clientInterface.VaultMessage, 1));
};


/**
 * @param {?proto.clientInterface.VaultMessage|undefined} value
 * @return {!proto.clientInterface.VaultsVersionMessage} returns this
*/
proto.clientInterface.VaultsVersionMessage.prototype.setVault = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.clientInterface.VaultsVersionMessage} returns this
 */
proto.clientInterface.VaultsVersionMessage.prototype.clearVault = function() {
  return this.setVault(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.clientInterface.VaultsVersionMessage.prototype.hasVault = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string version_id = 2;
 * @return {string}
 */
proto.clientInterface.VaultsVersionMessage.prototype.getVersionId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.clientInterface.VaultsVersionMessage} returns this
 */
proto.clientInterface.VaultsVersionMessage.prototype.setVersionId = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.clientInterface.VaultsVersionResultMessage.prototype.toObject = function(opt_includeInstance) {
  return proto.clientInterface.VaultsVersionResultMessage.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.clientInterface.VaultsVersionResultMessage} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.clientInterface.VaultsVersionResultMessage.toObject = function(includeInstance, msg) {
  var f, obj = {
    isLatestVersion: jspb.Message.getBooleanFieldWithDefault(msg, 1, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.clientInterface.VaultsVersionResultMessage}
 */
proto.clientInterface.VaultsVersionResultMessage.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.clientInterface.VaultsVersionResultMessage;
  return proto.clientInterface.VaultsVersionResultMessage.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.clientInterface.VaultsVersionResultMessage} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.clientInterface.VaultsVersionResultMessage}
 */
proto.clientInterface.VaultsVersionResultMessage.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIsLatestVersion(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.clientInterface.VaultsVersionResultMessage.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.clientInterface.VaultsVersionResultMessage.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.clientInterface.VaultsVersionResultMessage} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.clientInterface.VaultsVersionResultMessage.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getIsLatestVersion();
  if (f) {
    writer.writeBool(
      1,
      f
    );
  }
};


/**
 * optional bool is_latest_version = 1;
 * @return {boolean}
 */
proto.clientInterface.VaultsVersionResultMessage.prototype.getIsLatestVersion = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 1, false));
};


/**
 * @param {boolean} value
 * @return {!proto.clientInterface.VaultsVersionResultMessage} returns this
 */
proto.clientInterface.VaultsVersionResultMessage.prototype.setIsLatestVersion = function(value) {
  return jspb.Message.setProto3BooleanField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.clientInterface.VaultsLogMessage.prototype.toObject = function(opt_includeInstance) {
  return proto.clientInterface.VaultsLogMessage.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.clientInterface.VaultsLogMessage} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.clientInterface.VaultsLogMessage.toObject = function(includeInstance, msg) {
  var f, obj = {
    vault: (f = msg.getVault()) && proto.clientInterface.VaultMessage.toObject(includeInstance, f),
    logDepth: jspb.Message.getFieldWithDefault(msg, 3, 0),
    commitId: jspb.Message.getFieldWithDefault(msg, 4, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.clientInterface.VaultsLogMessage}
 */
proto.clientInterface.VaultsLogMessage.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.clientInterface.VaultsLogMessage;
  return proto.clientInterface.VaultsLogMessage.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.clientInterface.VaultsLogMessage} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.clientInterface.VaultsLogMessage}
 */
proto.clientInterface.VaultsLogMessage.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.clientInterface.VaultMessage;
      reader.readMessage(value,proto.clientInterface.VaultMessage.deserializeBinaryFromReader);
      msg.setVault(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setLogDepth(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setCommitId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.clientInterface.VaultsLogMessage.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.clientInterface.VaultsLogMessage.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.clientInterface.VaultsLogMessage} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.clientInterface.VaultsLogMessage.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getVault();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.clientInterface.VaultMessage.serializeBinaryToWriter
    );
  }
  f = message.getLogDepth();
  if (f !== 0) {
    writer.writeInt32(
      3,
      f
    );
  }
  f = message.getCommitId();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
};


/**
 * optional VaultMessage vault = 1;
 * @return {?proto.clientInterface.VaultMessage}
 */
proto.clientInterface.VaultsLogMessage.prototype.getVault = function() {
  return /** @type{?proto.clientInterface.VaultMessage} */ (
    jspb.Message.getWrapperField(this, proto.clientInterface.VaultMessage, 1));
};


/**
 * @param {?proto.clientInterface.VaultMessage|undefined} value
 * @return {!proto.clientInterface.VaultsLogMessage} returns this
*/
proto.clientInterface.VaultsLogMessage.prototype.setVault = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.clientInterface.VaultsLogMessage} returns this
 */
proto.clientInterface.VaultsLogMessage.prototype.clearVault = function() {
  return this.setVault(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.clientInterface.VaultsLogMessage.prototype.hasVault = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional int32 log_depth = 3;
 * @return {number}
 */
proto.clientInterface.VaultsLogMessage.prototype.getLogDepth = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.clientInterface.VaultsLogMessage} returns this
 */
proto.clientInterface.VaultsLogMessage.prototype.setLogDepth = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional string commit_id = 4;
 * @return {string}
 */
proto.clientInterface.VaultsLogMessage.prototype.getCommitId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.clientInterface.VaultsLogMessage} returns this
 */
proto.clientInterface.VaultsLogMessage.prototype.setCommitId = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.clientInterface.VaultsLogEntryMessage.prototype.toObject = function(opt_includeInstance) {
  return proto.clientInterface.VaultsLogEntryMessage.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.clientInterface.VaultsLogEntryMessage} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.clientInterface.VaultsLogEntryMessage.toObject = function(includeInstance, msg) {
  var f, obj = {
    oid: jspb.Message.getFieldWithDefault(msg, 1, ""),
    committer: jspb.Message.getFieldWithDefault(msg, 2, ""),
    timeStamp: jspb.Message.getFieldWithDefault(msg, 4, 0),
    message: jspb.Message.getFieldWithDefault(msg, 3, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.clientInterface.VaultsLogEntryMessage}
 */
proto.clientInterface.VaultsLogEntryMessage.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.clientInterface.VaultsLogEntryMessage;
  return proto.clientInterface.VaultsLogEntryMessage.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.clientInterface.VaultsLogEntryMessage} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.clientInterface.VaultsLogEntryMessage}
 */
proto.clientInterface.VaultsLogEntryMessage.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setOid(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setCommitter(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setTimeStamp(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setMessage(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.clientInterface.VaultsLogEntryMessage.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.clientInterface.VaultsLogEntryMessage.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.clientInterface.VaultsLogEntryMessage} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.clientInterface.VaultsLogEntryMessage.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getOid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getCommitter();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getTimeStamp();
  if (f !== 0) {
    writer.writeUint64(
      4,
      f
    );
  }
  f = message.getMessage();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
};


/**
 * optional string oid = 1;
 * @return {string}
 */
proto.clientInterface.VaultsLogEntryMessage.prototype.getOid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.clientInterface.VaultsLogEntryMessage} returns this
 */
proto.clientInterface.VaultsLogEntryMessage.prototype.setOid = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string committer = 2;
 * @return {string}
 */
proto.clientInterface.VaultsLogEntryMessage.prototype.getCommitter = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.clientInterface.VaultsLogEntryMessage} returns this
 */
proto.clientInterface.VaultsLogEntryMessage.prototype.setCommitter = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional uint64 time_stamp = 4;
 * @return {number}
 */
proto.clientInterface.VaultsLogEntryMessage.prototype.getTimeStamp = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.clientInterface.VaultsLogEntryMessage} returns this
 */
proto.clientInterface.VaultsLogEntryMessage.prototype.setTimeStamp = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional string message = 3;
 * @return {string}
 */
proto.clientInterface.VaultsLogEntryMessage.prototype.getMessage = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.clientInterface.VaultsLogEntryMessage} returns this
 */
proto.clientInterface.VaultsLogEntryMessage.prototype.setMessage = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.clientInterface.NodeMessage.prototype.toObject = function(opt_includeInstance) {
  return proto.clientInterface.NodeMessage.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.clientInterface.NodeMessage} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.clientInterface.NodeMessage.toObject = function(includeInstance, msg) {
  var f, obj = {
    nodeId: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.clientInterface.NodeMessage}
 */
proto.clientInterface.NodeMessage.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.clientInterface.NodeMessage;
  return proto.clientInterface.NodeMessage.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.clientInterface.NodeMessage} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.clientInterface.NodeMessage}
 */
proto.clientInterface.NodeMessage.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setNodeId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.clientInterface.NodeMessage.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.clientInterface.NodeMessage.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.clientInterface.NodeMessage} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.clientInterface.NodeMessage.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getNodeId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string node_id = 1;
 * @return {string}
 */
proto.clientInterface.NodeMessage.prototype.getNodeId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.clientInterface.NodeMessage} returns this
 */
proto.clientInterface.NodeMessage.prototype.setNodeId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.clientInterface.NodeAddressMessage.prototype.toObject = function(opt_includeInstance) {
  return proto.clientInterface.NodeAddressMessage.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.clientInterface.NodeAddressMessage} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.clientInterface.NodeAddressMessage.toObject = function(includeInstance, msg) {
  var f, obj = {
    nodeId: jspb.Message.getFieldWithDefault(msg, 1, ""),
    host: jspb.Message.getFieldWithDefault(msg, 2, ""),
    port: jspb.Message.getFieldWithDefault(msg, 3, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.clientInterface.NodeAddressMessage}
 */
proto.clientInterface.NodeAddressMessage.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.clientInterface.NodeAddressMessage;
  return proto.clientInterface.NodeAddressMessage.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.clientInterface.NodeAddressMessage} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.clientInterface.NodeAddressMessage}
 */
proto.clientInterface.NodeAddressMessage.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setNodeId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setHost(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setPort(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.clientInterface.NodeAddressMessage.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.clientInterface.NodeAddressMessage.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.clientInterface.NodeAddressMessage} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.clientInterface.NodeAddressMessage.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getNodeId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getHost();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getPort();
  if (f !== 0) {
    writer.writeInt32(
      3,
      f
    );
  }
};


/**
 * optional string node_id = 1;
 * @return {string}
 */
proto.clientInterface.NodeAddressMessage.prototype.getNodeId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.clientInterface.NodeAddressMessage} returns this
 */
proto.clientInterface.NodeAddressMessage.prototype.setNodeId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string host = 2;
 * @return {string}
 */
proto.clientInterface.NodeAddressMessage.prototype.getHost = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.clientInterface.NodeAddressMessage} returns this
 */
proto.clientInterface.NodeAddressMessage.prototype.setHost = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional int32 port = 3;
 * @return {number}
 */
proto.clientInterface.NodeAddressMessage.prototype.getPort = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.clientInterface.NodeAddressMessage} returns this
 */
proto.clientInterface.NodeAddressMessage.prototype.setPort = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.clientInterface.NodeClaimMessage.prototype.toObject = function(opt_includeInstance) {
  return proto.clientInterface.NodeClaimMessage.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.clientInterface.NodeClaimMessage} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.clientInterface.NodeClaimMessage.toObject = function(includeInstance, msg) {
  var f, obj = {
    nodeId: jspb.Message.getFieldWithDefault(msg, 1, ""),
    forceInvite: jspb.Message.getBooleanFieldWithDefault(msg, 2, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.clientInterface.NodeClaimMessage}
 */
proto.clientInterface.NodeClaimMessage.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.clientInterface.NodeClaimMessage;
  return proto.clientInterface.NodeClaimMessage.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.clientInterface.NodeClaimMessage} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.clientInterface.NodeClaimMessage}
 */
proto.clientInterface.NodeClaimMessage.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setNodeId(value);
      break;
    case 2:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setForceInvite(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.clientInterface.NodeClaimMessage.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.clientInterface.NodeClaimMessage.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.clientInterface.NodeClaimMessage} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.clientInterface.NodeClaimMessage.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getNodeId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getForceInvite();
  if (f) {
    writer.writeBool(
      2,
      f
    );
  }
};


/**
 * optional string node_id = 1;
 * @return {string}
 */
proto.clientInterface.NodeClaimMessage.prototype.getNodeId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.clientInterface.NodeClaimMessage} returns this
 */
proto.clientInterface.NodeClaimMessage.prototype.setNodeId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional bool force_invite = 2;
 * @return {boolean}
 */
proto.clientInterface.NodeClaimMessage.prototype.getForceInvite = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 2, false));
};


/**
 * @param {boolean} value
 * @return {!proto.clientInterface.NodeClaimMessage} returns this
 */
proto.clientInterface.NodeClaimMessage.prototype.setForceInvite = function(value) {
  return jspb.Message.setProto3BooleanField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.clientInterface.CryptoMessage.prototype.toObject = function(opt_includeInstance) {
  return proto.clientInterface.CryptoMessage.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.clientInterface.CryptoMessage} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.clientInterface.CryptoMessage.toObject = function(includeInstance, msg) {
  var f, obj = {
    data: jspb.Message.getFieldWithDefault(msg, 1, ""),
    signature: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.clientInterface.CryptoMessage}
 */
proto.clientInterface.CryptoMessage.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.clientInterface.CryptoMessage;
  return proto.clientInterface.CryptoMessage.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.clientInterface.CryptoMessage} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.clientInterface.CryptoMessage}
 */
proto.clientInterface.CryptoMessage.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setData(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setSignature(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.clientInterface.CryptoMessage.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.clientInterface.CryptoMessage.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.clientInterface.CryptoMessage} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.clientInterface.CryptoMessage.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getData();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getSignature();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string data = 1;
 * @return {string}
 */
proto.clientInterface.CryptoMessage.prototype.getData = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.clientInterface.CryptoMessage} returns this
 */
proto.clientInterface.CryptoMessage.prototype.setData = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string signature = 2;
 * @return {string}
 */
proto.clientInterface.CryptoMessage.prototype.getSignature = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.clientInterface.CryptoMessage} returns this
 */
proto.clientInterface.CryptoMessage.prototype.setSignature = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.clientInterface.KeyMessage.prototype.toObject = function(opt_includeInstance) {
  return proto.clientInterface.KeyMessage.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.clientInterface.KeyMessage} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.clientInterface.KeyMessage.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: jspb.Message.getFieldWithDefault(msg, 1, ""),
    key: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.clientInterface.KeyMessage}
 */
proto.clientInterface.KeyMessage.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.clientInterface.KeyMessage;
  return proto.clientInterface.KeyMessage.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.clientInterface.KeyMessage} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.clientInterface.KeyMessage}
 */
proto.clientInterface.KeyMessage.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setKey(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.clientInterface.KeyMessage.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.clientInterface.KeyMessage.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.clientInterface.KeyMessage} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.clientInterface.KeyMessage.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getKey();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string name = 1;
 * @return {string}
 */
proto.clientInterface.KeyMessage.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.clientInterface.KeyMessage} returns this
 */
proto.clientInterface.KeyMessage.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string key = 2;
 * @return {string}
 */
proto.clientInterface.KeyMessage.prototype.getKey = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.clientInterface.KeyMessage} returns this
 */
proto.clientInterface.KeyMessage.prototype.setKey = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.clientInterface.KeyPairMessage.prototype.toObject = function(opt_includeInstance) {
  return proto.clientInterface.KeyPairMessage.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.clientInterface.KeyPairMessage} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.clientInterface.KeyPairMessage.toObject = function(includeInstance, msg) {
  var f, obj = {
    pb_public: jspb.Message.getFieldWithDefault(msg, 1, ""),
    pb_private: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.clientInterface.KeyPairMessage}
 */
proto.clientInterface.KeyPairMessage.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.clientInterface.KeyPairMessage;
  return proto.clientInterface.KeyPairMessage.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.clientInterface.KeyPairMessage} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.clientInterface.KeyPairMessage}
 */
proto.clientInterface.KeyPairMessage.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setPublic(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setPrivate(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.clientInterface.KeyPairMessage.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.clientInterface.KeyPairMessage.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.clientInterface.KeyPairMessage} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.clientInterface.KeyPairMessage.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPublic();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getPrivate();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string public = 1;
 * @return {string}
 */
proto.clientInterface.KeyPairMessage.prototype.getPublic = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.clientInterface.KeyPairMessage} returns this
 */
proto.clientInterface.KeyPairMessage.prototype.setPublic = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string private = 2;
 * @return {string}
 */
proto.clientInterface.KeyPairMessage.prototype.getPrivate = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.clientInterface.KeyPairMessage} returns this
 */
proto.clientInterface.KeyPairMessage.prototype.setPrivate = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.clientInterface.CertificateMessage.prototype.toObject = function(opt_includeInstance) {
  return proto.clientInterface.CertificateMessage.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.clientInterface.CertificateMessage} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.clientInterface.CertificateMessage.toObject = function(includeInstance, msg) {
  var f, obj = {
    cert: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.clientInterface.CertificateMessage}
 */
proto.clientInterface.CertificateMessage.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.clientInterface.CertificateMessage;
  return proto.clientInterface.CertificateMessage.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.clientInterface.CertificateMessage} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.clientInterface.CertificateMessage}
 */
proto.clientInterface.CertificateMessage.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setCert(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.clientInterface.CertificateMessage.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.clientInterface.CertificateMessage.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.clientInterface.CertificateMessage} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.clientInterface.CertificateMessage.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCert();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string cert = 1;
 * @return {string}
 */
proto.clientInterface.CertificateMessage.prototype.getCert = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.clientInterface.CertificateMessage} returns this
 */
proto.clientInterface.CertificateMessage.prototype.setCert = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.clientInterface.ProviderMessage.prototype.toObject = function(opt_includeInstance) {
  return proto.clientInterface.ProviderMessage.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.clientInterface.ProviderMessage} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.clientInterface.ProviderMessage.toObject = function(includeInstance, msg) {
  var f, obj = {
    providerId: jspb.Message.getFieldWithDefault(msg, 1, ""),
    message: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.clientInterface.ProviderMessage}
 */
proto.clientInterface.ProviderMessage.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.clientInterface.ProviderMessage;
  return proto.clientInterface.ProviderMessage.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.clientInterface.ProviderMessage} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.clientInterface.ProviderMessage}
 */
proto.clientInterface.ProviderMessage.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setProviderId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setMessage(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.clientInterface.ProviderMessage.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.clientInterface.ProviderMessage.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.clientInterface.ProviderMessage} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.clientInterface.ProviderMessage.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getProviderId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getMessage();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string provider_id = 1;
 * @return {string}
 */
proto.clientInterface.ProviderMessage.prototype.getProviderId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.clientInterface.ProviderMessage} returns this
 */
proto.clientInterface.ProviderMessage.prototype.setProviderId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string message = 2;
 * @return {string}
 */
proto.clientInterface.ProviderMessage.prototype.getMessage = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.clientInterface.ProviderMessage} returns this
 */
proto.clientInterface.ProviderMessage.prototype.setMessage = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.clientInterface.TokenSpecificMessage.prototype.toObject = function(opt_includeInstance) {
  return proto.clientInterface.TokenSpecificMessage.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.clientInterface.TokenSpecificMessage} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.clientInterface.TokenSpecificMessage.toObject = function(includeInstance, msg) {
  var f, obj = {
    provider: (f = msg.getProvider()) && proto.clientInterface.ProviderMessage.toObject(includeInstance, f),
    token: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.clientInterface.TokenSpecificMessage}
 */
proto.clientInterface.TokenSpecificMessage.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.clientInterface.TokenSpecificMessage;
  return proto.clientInterface.TokenSpecificMessage.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.clientInterface.TokenSpecificMessage} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.clientInterface.TokenSpecificMessage}
 */
proto.clientInterface.TokenSpecificMessage.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.clientInterface.ProviderMessage;
      reader.readMessage(value,proto.clientInterface.ProviderMessage.deserializeBinaryFromReader);
      msg.setProvider(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setToken(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.clientInterface.TokenSpecificMessage.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.clientInterface.TokenSpecificMessage.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.clientInterface.TokenSpecificMessage} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.clientInterface.TokenSpecificMessage.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getProvider();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.clientInterface.ProviderMessage.serializeBinaryToWriter
    );
  }
  f = message.getToken();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional ProviderMessage provider = 1;
 * @return {?proto.clientInterface.ProviderMessage}
 */
proto.clientInterface.TokenSpecificMessage.prototype.getProvider = function() {
  return /** @type{?proto.clientInterface.ProviderMessage} */ (
    jspb.Message.getWrapperField(this, proto.clientInterface.ProviderMessage, 1));
};


/**
 * @param {?proto.clientInterface.ProviderMessage|undefined} value
 * @return {!proto.clientInterface.TokenSpecificMessage} returns this
*/
proto.clientInterface.TokenSpecificMessage.prototype.setProvider = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.clientInterface.TokenSpecificMessage} returns this
 */
proto.clientInterface.TokenSpecificMessage.prototype.clearProvider = function() {
  return this.setProvider(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.clientInterface.TokenSpecificMessage.prototype.hasProvider = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string token = 2;
 * @return {string}
 */
proto.clientInterface.TokenSpecificMessage.prototype.getToken = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.clientInterface.TokenSpecificMessage} returns this
 */
proto.clientInterface.TokenSpecificMessage.prototype.setToken = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.clientInterface.TokenMessage.prototype.toObject = function(opt_includeInstance) {
  return proto.clientInterface.TokenMessage.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.clientInterface.TokenMessage} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.clientInterface.TokenMessage.toObject = function(includeInstance, msg) {
  var f, obj = {
    token: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.clientInterface.TokenMessage}
 */
proto.clientInterface.TokenMessage.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.clientInterface.TokenMessage;
  return proto.clientInterface.TokenMessage.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.clientInterface.TokenMessage} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.clientInterface.TokenMessage}
 */
proto.clientInterface.TokenMessage.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setToken(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.clientInterface.TokenMessage.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.clientInterface.TokenMessage.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.clientInterface.TokenMessage} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.clientInterface.TokenMessage.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getToken();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string token = 1;
 * @return {string}
 */
proto.clientInterface.TokenMessage.prototype.getToken = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.clientInterface.TokenMessage} returns this
 */
proto.clientInterface.TokenMessage.prototype.setToken = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.clientInterface.ProviderSearchMessage.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.clientInterface.ProviderSearchMessage.prototype.toObject = function(opt_includeInstance) {
  return proto.clientInterface.ProviderSearchMessage.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.clientInterface.ProviderSearchMessage} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.clientInterface.ProviderSearchMessage.toObject = function(includeInstance, msg) {
  var f, obj = {
    provider: (f = msg.getProvider()) && proto.clientInterface.ProviderMessage.toObject(includeInstance, f),
    searchTermList: (f = jspb.Message.getRepeatedField(msg, 2)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.clientInterface.ProviderSearchMessage}
 */
proto.clientInterface.ProviderSearchMessage.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.clientInterface.ProviderSearchMessage;
  return proto.clientInterface.ProviderSearchMessage.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.clientInterface.ProviderSearchMessage} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.clientInterface.ProviderSearchMessage}
 */
proto.clientInterface.ProviderSearchMessage.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.clientInterface.ProviderMessage;
      reader.readMessage(value,proto.clientInterface.ProviderMessage.deserializeBinaryFromReader);
      msg.setProvider(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.addSearchTerm(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.clientInterface.ProviderSearchMessage.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.clientInterface.ProviderSearchMessage.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.clientInterface.ProviderSearchMessage} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.clientInterface.ProviderSearchMessage.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getProvider();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.clientInterface.ProviderMessage.serializeBinaryToWriter
    );
  }
  f = message.getSearchTermList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      2,
      f
    );
  }
};


/**
 * optional ProviderMessage provider = 1;
 * @return {?proto.clientInterface.ProviderMessage}
 */
proto.clientInterface.ProviderSearchMessage.prototype.getProvider = function() {
  return /** @type{?proto.clientInterface.ProviderMessage} */ (
    jspb.Message.getWrapperField(this, proto.clientInterface.ProviderMessage, 1));
};


/**
 * @param {?proto.clientInterface.ProviderMessage|undefined} value
 * @return {!proto.clientInterface.ProviderSearchMessage} returns this
*/
proto.clientInterface.ProviderSearchMessage.prototype.setProvider = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.clientInterface.ProviderSearchMessage} returns this
 */
proto.clientInterface.ProviderSearchMessage.prototype.clearProvider = function() {
  return this.setProvider(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.clientInterface.ProviderSearchMessage.prototype.hasProvider = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * repeated string search_term = 2;
 * @return {!Array<string>}
 */
proto.clientInterface.ProviderSearchMessage.prototype.getSearchTermList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 2));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.clientInterface.ProviderSearchMessage} returns this
 */
proto.clientInterface.ProviderSearchMessage.prototype.setSearchTermList = function(value) {
  return jspb.Message.setField(this, 2, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.clientInterface.ProviderSearchMessage} returns this
 */
proto.clientInterface.ProviderSearchMessage.prototype.addSearchTerm = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 2, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.clientInterface.ProviderSearchMessage} returns this
 */
proto.clientInterface.ProviderSearchMessage.prototype.clearSearchTermList = function() {
  return this.setSearchTermList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.clientInterface.IdentityInfoMessage.prototype.toObject = function(opt_includeInstance) {
  return proto.clientInterface.IdentityInfoMessage.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.clientInterface.IdentityInfoMessage} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.clientInterface.IdentityInfoMessage.toObject = function(includeInstance, msg) {
  var f, obj = {
    provider: (f = msg.getProvider()) && proto.clientInterface.ProviderMessage.toObject(includeInstance, f),
    name: jspb.Message.getFieldWithDefault(msg, 3, ""),
    email: jspb.Message.getFieldWithDefault(msg, 4, ""),
    url: jspb.Message.getFieldWithDefault(msg, 5, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.clientInterface.IdentityInfoMessage}
 */
proto.clientInterface.IdentityInfoMessage.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.clientInterface.IdentityInfoMessage;
  return proto.clientInterface.IdentityInfoMessage.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.clientInterface.IdentityInfoMessage} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.clientInterface.IdentityInfoMessage}
 */
proto.clientInterface.IdentityInfoMessage.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.clientInterface.ProviderMessage;
      reader.readMessage(value,proto.clientInterface.ProviderMessage.deserializeBinaryFromReader);
      msg.setProvider(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setEmail(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setUrl(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.clientInterface.IdentityInfoMessage.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.clientInterface.IdentityInfoMessage.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.clientInterface.IdentityInfoMessage} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.clientInterface.IdentityInfoMessage.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getProvider();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.clientInterface.ProviderMessage.serializeBinaryToWriter
    );
  }
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getEmail();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getUrl();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
};


/**
 * optional ProviderMessage provider = 1;
 * @return {?proto.clientInterface.ProviderMessage}
 */
proto.clientInterface.IdentityInfoMessage.prototype.getProvider = function() {
  return /** @type{?proto.clientInterface.ProviderMessage} */ (
    jspb.Message.getWrapperField(this, proto.clientInterface.ProviderMessage, 1));
};


/**
 * @param {?proto.clientInterface.ProviderMessage|undefined} value
 * @return {!proto.clientInterface.IdentityInfoMessage} returns this
*/
proto.clientInterface.IdentityInfoMessage.prototype.setProvider = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.clientInterface.IdentityInfoMessage} returns this
 */
proto.clientInterface.IdentityInfoMessage.prototype.clearProvider = function() {
  return this.setProvider(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.clientInterface.IdentityInfoMessage.prototype.hasProvider = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string name = 3;
 * @return {string}
 */
proto.clientInterface.IdentityInfoMessage.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.clientInterface.IdentityInfoMessage} returns this
 */
proto.clientInterface.IdentityInfoMessage.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string email = 4;
 * @return {string}
 */
proto.clientInterface.IdentityInfoMessage.prototype.getEmail = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.clientInterface.IdentityInfoMessage} returns this
 */
proto.clientInterface.IdentityInfoMessage.prototype.setEmail = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional string url = 5;
 * @return {string}
 */
proto.clientInterface.IdentityInfoMessage.prototype.getUrl = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.clientInterface.IdentityInfoMessage} returns this
 */
proto.clientInterface.IdentityInfoMessage.prototype.setUrl = function(value) {
  return jspb.Message.setProto3StringField(this, 5, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.clientInterface.GestaltMessage.prototype.toObject = function(opt_includeInstance) {
  return proto.clientInterface.GestaltMessage.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.clientInterface.GestaltMessage} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.clientInterface.GestaltMessage.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.clientInterface.GestaltMessage}
 */
proto.clientInterface.GestaltMessage.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.clientInterface.GestaltMessage;
  return proto.clientInterface.GestaltMessage.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.clientInterface.GestaltMessage} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.clientInterface.GestaltMessage}
 */
proto.clientInterface.GestaltMessage.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.clientInterface.GestaltMessage.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.clientInterface.GestaltMessage.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.clientInterface.GestaltMessage} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.clientInterface.GestaltMessage.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string name = 1;
 * @return {string}
 */
proto.clientInterface.GestaltMessage.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.clientInterface.GestaltMessage} returns this
 */
proto.clientInterface.GestaltMessage.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.clientInterface.GestaltGraphMessage.prototype.toObject = function(opt_includeInstance) {
  return proto.clientInterface.GestaltGraphMessage.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.clientInterface.GestaltGraphMessage} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.clientInterface.GestaltGraphMessage.toObject = function(includeInstance, msg) {
  var f, obj = {
    gestaltGraph: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.clientInterface.GestaltGraphMessage}
 */
proto.clientInterface.GestaltGraphMessage.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.clientInterface.GestaltGraphMessage;
  return proto.clientInterface.GestaltGraphMessage.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.clientInterface.GestaltGraphMessage} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.clientInterface.GestaltGraphMessage}
 */
proto.clientInterface.GestaltGraphMessage.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setGestaltGraph(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.clientInterface.GestaltGraphMessage.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.clientInterface.GestaltGraphMessage.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.clientInterface.GestaltGraphMessage} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.clientInterface.GestaltGraphMessage.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getGestaltGraph();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string gestalt_graph = 1;
 * @return {string}
 */
proto.clientInterface.GestaltGraphMessage.prototype.getGestaltGraph = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.clientInterface.GestaltGraphMessage} returns this
 */
proto.clientInterface.GestaltGraphMessage.prototype.setGestaltGraph = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.clientInterface.GestaltTrustMessage.prototype.toObject = function(opt_includeInstance) {
  return proto.clientInterface.GestaltTrustMessage.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.clientInterface.GestaltTrustMessage} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.clientInterface.GestaltTrustMessage.toObject = function(includeInstance, msg) {
  var f, obj = {
    provider: jspb.Message.getFieldWithDefault(msg, 1, ""),
    name: jspb.Message.getFieldWithDefault(msg, 2, ""),
    set: jspb.Message.getBooleanFieldWithDefault(msg, 3, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.clientInterface.GestaltTrustMessage}
 */
proto.clientInterface.GestaltTrustMessage.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.clientInterface.GestaltTrustMessage;
  return proto.clientInterface.GestaltTrustMessage.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.clientInterface.GestaltTrustMessage} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.clientInterface.GestaltTrustMessage}
 */
proto.clientInterface.GestaltTrustMessage.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setProvider(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 3:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setSet(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.clientInterface.GestaltTrustMessage.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.clientInterface.GestaltTrustMessage.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.clientInterface.GestaltTrustMessage} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.clientInterface.GestaltTrustMessage.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getProvider();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getSet();
  if (f) {
    writer.writeBool(
      3,
      f
    );
  }
};


/**
 * optional string provider = 1;
 * @return {string}
 */
proto.clientInterface.GestaltTrustMessage.prototype.getProvider = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.clientInterface.GestaltTrustMessage} returns this
 */
proto.clientInterface.GestaltTrustMessage.prototype.setProvider = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string name = 2;
 * @return {string}
 */
proto.clientInterface.GestaltTrustMessage.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.clientInterface.GestaltTrustMessage} returns this
 */
proto.clientInterface.GestaltTrustMessage.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional bool set = 3;
 * @return {boolean}
 */
proto.clientInterface.GestaltTrustMessage.prototype.getSet = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 3, false));
};


/**
 * @param {boolean} value
 * @return {!proto.clientInterface.GestaltTrustMessage} returns this
 */
proto.clientInterface.GestaltTrustMessage.prototype.setSet = function(value) {
  return jspb.Message.setProto3BooleanField(this, 3, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.clientInterface.ActionsMessage.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.clientInterface.ActionsMessage.prototype.toObject = function(opt_includeInstance) {
  return proto.clientInterface.ActionsMessage.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.clientInterface.ActionsMessage} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.clientInterface.ActionsMessage.toObject = function(includeInstance, msg) {
  var f, obj = {
    actionList: (f = jspb.Message.getRepeatedField(msg, 1)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.clientInterface.ActionsMessage}
 */
proto.clientInterface.ActionsMessage.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.clientInterface.ActionsMessage;
  return proto.clientInterface.ActionsMessage.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.clientInterface.ActionsMessage} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.clientInterface.ActionsMessage}
 */
proto.clientInterface.ActionsMessage.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.addAction(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.clientInterface.ActionsMessage.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.clientInterface.ActionsMessage.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.clientInterface.ActionsMessage} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.clientInterface.ActionsMessage.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getActionList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      1,
      f
    );
  }
};


/**
 * repeated string action = 1;
 * @return {!Array<string>}
 */
proto.clientInterface.ActionsMessage.prototype.getActionList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 1));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.clientInterface.ActionsMessage} returns this
 */
proto.clientInterface.ActionsMessage.prototype.setActionList = function(value) {
  return jspb.Message.setField(this, 1, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.clientInterface.ActionsMessage} returns this
 */
proto.clientInterface.ActionsMessage.prototype.addAction = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 1, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.clientInterface.ActionsMessage} returns this
 */
proto.clientInterface.ActionsMessage.prototype.clearActionList = function() {
  return this.setActionList([]);
};



/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.clientInterface.SetActionsMessage.oneofGroups_ = [[1,2]];

/**
 * @enum {number}
 */
proto.clientInterface.SetActionsMessage.NodeOrProviderCase = {
  NODE_OR_PROVIDER_NOT_SET: 0,
  NODE: 1,
  IDENTITY: 2
};

/**
 * @return {proto.clientInterface.SetActionsMessage.NodeOrProviderCase}
 */
proto.clientInterface.SetActionsMessage.prototype.getNodeOrProviderCase = function() {
  return /** @type {proto.clientInterface.SetActionsMessage.NodeOrProviderCase} */(jspb.Message.computeOneofCase(this, proto.clientInterface.SetActionsMessage.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.clientInterface.SetActionsMessage.prototype.toObject = function(opt_includeInstance) {
  return proto.clientInterface.SetActionsMessage.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.clientInterface.SetActionsMessage} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.clientInterface.SetActionsMessage.toObject = function(includeInstance, msg) {
  var f, obj = {
    node: (f = msg.getNode()) && proto.clientInterface.NodeMessage.toObject(includeInstance, f),
    identity: (f = msg.getIdentity()) && proto.clientInterface.ProviderMessage.toObject(includeInstance, f),
    action: jspb.Message.getFieldWithDefault(msg, 3, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.clientInterface.SetActionsMessage}
 */
proto.clientInterface.SetActionsMessage.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.clientInterface.SetActionsMessage;
  return proto.clientInterface.SetActionsMessage.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.clientInterface.SetActionsMessage} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.clientInterface.SetActionsMessage}
 */
proto.clientInterface.SetActionsMessage.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.clientInterface.NodeMessage;
      reader.readMessage(value,proto.clientInterface.NodeMessage.deserializeBinaryFromReader);
      msg.setNode(value);
      break;
    case 2:
      var value = new proto.clientInterface.ProviderMessage;
      reader.readMessage(value,proto.clientInterface.ProviderMessage.deserializeBinaryFromReader);
      msg.setIdentity(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setAction(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.clientInterface.SetActionsMessage.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.clientInterface.SetActionsMessage.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.clientInterface.SetActionsMessage} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.clientInterface.SetActionsMessage.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getNode();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.clientInterface.NodeMessage.serializeBinaryToWriter
    );
  }
  f = message.getIdentity();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.clientInterface.ProviderMessage.serializeBinaryToWriter
    );
  }
  f = message.getAction();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
};


/**
 * optional NodeMessage node = 1;
 * @return {?proto.clientInterface.NodeMessage}
 */
proto.clientInterface.SetActionsMessage.prototype.getNode = function() {
  return /** @type{?proto.clientInterface.NodeMessage} */ (
    jspb.Message.getWrapperField(this, proto.clientInterface.NodeMessage, 1));
};


/**
 * @param {?proto.clientInterface.NodeMessage|undefined} value
 * @return {!proto.clientInterface.SetActionsMessage} returns this
*/
proto.clientInterface.SetActionsMessage.prototype.setNode = function(value) {
  return jspb.Message.setOneofWrapperField(this, 1, proto.clientInterface.SetActionsMessage.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.clientInterface.SetActionsMessage} returns this
 */
proto.clientInterface.SetActionsMessage.prototype.clearNode = function() {
  return this.setNode(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.clientInterface.SetActionsMessage.prototype.hasNode = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional ProviderMessage identity = 2;
 * @return {?proto.clientInterface.ProviderMessage}
 */
proto.clientInterface.SetActionsMessage.prototype.getIdentity = function() {
  return /** @type{?proto.clientInterface.ProviderMessage} */ (
    jspb.Message.getWrapperField(this, proto.clientInterface.ProviderMessage, 2));
};


/**
 * @param {?proto.clientInterface.ProviderMessage|undefined} value
 * @return {!proto.clientInterface.SetActionsMessage} returns this
*/
proto.clientInterface.SetActionsMessage.prototype.setIdentity = function(value) {
  return jspb.Message.setOneofWrapperField(this, 2, proto.clientInterface.SetActionsMessage.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.clientInterface.SetActionsMessage} returns this
 */
proto.clientInterface.SetActionsMessage.prototype.clearIdentity = function() {
  return this.setIdentity(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.clientInterface.SetActionsMessage.prototype.hasIdentity = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional string action = 3;
 * @return {string}
 */
proto.clientInterface.SetActionsMessage.prototype.getAction = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.clientInterface.SetActionsMessage} returns this
 */
proto.clientInterface.SetActionsMessage.prototype.setAction = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};



/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.clientInterface.NotificationsMessage.oneofGroups_ = [[1,2,3]];

/**
 * @enum {number}
 */
proto.clientInterface.NotificationsMessage.DataCase = {
  DATA_NOT_SET: 0,
  GENERAL: 1,
  GESTALT_INVITE: 2,
  VAULT_SHARE: 3
};

/**
 * @return {proto.clientInterface.NotificationsMessage.DataCase}
 */
proto.clientInterface.NotificationsMessage.prototype.getDataCase = function() {
  return /** @type {proto.clientInterface.NotificationsMessage.DataCase} */(jspb.Message.computeOneofCase(this, proto.clientInterface.NotificationsMessage.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.clientInterface.NotificationsMessage.prototype.toObject = function(opt_includeInstance) {
  return proto.clientInterface.NotificationsMessage.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.clientInterface.NotificationsMessage} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.clientInterface.NotificationsMessage.toObject = function(includeInstance, msg) {
  var f, obj = {
    general: (f = msg.getGeneral()) && proto.clientInterface.GeneralTypeMessage.toObject(includeInstance, f),
    gestaltInvite: jspb.Message.getFieldWithDefault(msg, 2, ""),
    vaultShare: (f = msg.getVaultShare()) && proto.clientInterface.VaultShareTypeMessage.toObject(includeInstance, f),
    senderId: jspb.Message.getFieldWithDefault(msg, 4, ""),
    isRead: jspb.Message.getBooleanFieldWithDefault(msg, 5, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.clientInterface.NotificationsMessage}
 */
proto.clientInterface.NotificationsMessage.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.clientInterface.NotificationsMessage;
  return proto.clientInterface.NotificationsMessage.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.clientInterface.NotificationsMessage} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.clientInterface.NotificationsMessage}
 */
proto.clientInterface.NotificationsMessage.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.clientInterface.GeneralTypeMessage;
      reader.readMessage(value,proto.clientInterface.GeneralTypeMessage.deserializeBinaryFromReader);
      msg.setGeneral(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setGestaltInvite(value);
      break;
    case 3:
      var value = new proto.clientInterface.VaultShareTypeMessage;
      reader.readMessage(value,proto.clientInterface.VaultShareTypeMessage.deserializeBinaryFromReader);
      msg.setVaultShare(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setSenderId(value);
      break;
    case 5:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIsRead(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.clientInterface.NotificationsMessage.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.clientInterface.NotificationsMessage.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.clientInterface.NotificationsMessage} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.clientInterface.NotificationsMessage.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getGeneral();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.clientInterface.GeneralTypeMessage.serializeBinaryToWriter
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getVaultShare();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.clientInterface.VaultShareTypeMessage.serializeBinaryToWriter
    );
  }
  f = message.getSenderId();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getIsRead();
  if (f) {
    writer.writeBool(
      5,
      f
    );
  }
};


/**
 * optional GeneralTypeMessage general = 1;
 * @return {?proto.clientInterface.GeneralTypeMessage}
 */
proto.clientInterface.NotificationsMessage.prototype.getGeneral = function() {
  return /** @type{?proto.clientInterface.GeneralTypeMessage} */ (
    jspb.Message.getWrapperField(this, proto.clientInterface.GeneralTypeMessage, 1));
};


/**
 * @param {?proto.clientInterface.GeneralTypeMessage|undefined} value
 * @return {!proto.clientInterface.NotificationsMessage} returns this
*/
proto.clientInterface.NotificationsMessage.prototype.setGeneral = function(value) {
  return jspb.Message.setOneofWrapperField(this, 1, proto.clientInterface.NotificationsMessage.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.clientInterface.NotificationsMessage} returns this
 */
proto.clientInterface.NotificationsMessage.prototype.clearGeneral = function() {
  return this.setGeneral(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.clientInterface.NotificationsMessage.prototype.hasGeneral = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string gestalt_invite = 2;
 * @return {string}
 */
proto.clientInterface.NotificationsMessage.prototype.getGestaltInvite = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.clientInterface.NotificationsMessage} returns this
 */
proto.clientInterface.NotificationsMessage.prototype.setGestaltInvite = function(value) {
  return jspb.Message.setOneofField(this, 2, proto.clientInterface.NotificationsMessage.oneofGroups_[0], value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.clientInterface.NotificationsMessage} returns this
 */
proto.clientInterface.NotificationsMessage.prototype.clearGestaltInvite = function() {
  return jspb.Message.setOneofField(this, 2, proto.clientInterface.NotificationsMessage.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.clientInterface.NotificationsMessage.prototype.hasGestaltInvite = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional VaultShareTypeMessage vault_share = 3;
 * @return {?proto.clientInterface.VaultShareTypeMessage}
 */
proto.clientInterface.NotificationsMessage.prototype.getVaultShare = function() {
  return /** @type{?proto.clientInterface.VaultShareTypeMessage} */ (
    jspb.Message.getWrapperField(this, proto.clientInterface.VaultShareTypeMessage, 3));
};


/**
 * @param {?proto.clientInterface.VaultShareTypeMessage|undefined} value
 * @return {!proto.clientInterface.NotificationsMessage} returns this
*/
proto.clientInterface.NotificationsMessage.prototype.setVaultShare = function(value) {
  return jspb.Message.setOneofWrapperField(this, 3, proto.clientInterface.NotificationsMessage.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.clientInterface.NotificationsMessage} returns this
 */
proto.clientInterface.NotificationsMessage.prototype.clearVaultShare = function() {
  return this.setVaultShare(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.clientInterface.NotificationsMessage.prototype.hasVaultShare = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional string sender_id = 4;
 * @return {string}
 */
proto.clientInterface.NotificationsMessage.prototype.getSenderId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.clientInterface.NotificationsMessage} returns this
 */
proto.clientInterface.NotificationsMessage.prototype.setSenderId = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional bool is_read = 5;
 * @return {boolean}
 */
proto.clientInterface.NotificationsMessage.prototype.getIsRead = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 5, false));
};


/**
 * @param {boolean} value
 * @return {!proto.clientInterface.NotificationsMessage} returns this
 */
proto.clientInterface.NotificationsMessage.prototype.setIsRead = function(value) {
  return jspb.Message.setProto3BooleanField(this, 5, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.clientInterface.NotificationsSendMessage.prototype.toObject = function(opt_includeInstance) {
  return proto.clientInterface.NotificationsSendMessage.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.clientInterface.NotificationsSendMessage} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.clientInterface.NotificationsSendMessage.toObject = function(includeInstance, msg) {
  var f, obj = {
    receiverId: jspb.Message.getFieldWithDefault(msg, 1, ""),
    data: (f = msg.getData()) && proto.clientInterface.GeneralTypeMessage.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.clientInterface.NotificationsSendMessage}
 */
proto.clientInterface.NotificationsSendMessage.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.clientInterface.NotificationsSendMessage;
  return proto.clientInterface.NotificationsSendMessage.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.clientInterface.NotificationsSendMessage} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.clientInterface.NotificationsSendMessage}
 */
proto.clientInterface.NotificationsSendMessage.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setReceiverId(value);
      break;
    case 2:
      var value = new proto.clientInterface.GeneralTypeMessage;
      reader.readMessage(value,proto.clientInterface.GeneralTypeMessage.deserializeBinaryFromReader);
      msg.setData(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.clientInterface.NotificationsSendMessage.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.clientInterface.NotificationsSendMessage.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.clientInterface.NotificationsSendMessage} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.clientInterface.NotificationsSendMessage.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getReceiverId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getData();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.clientInterface.GeneralTypeMessage.serializeBinaryToWriter
    );
  }
};


/**
 * optional string receiver_id = 1;
 * @return {string}
 */
proto.clientInterface.NotificationsSendMessage.prototype.getReceiverId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.clientInterface.NotificationsSendMessage} returns this
 */
proto.clientInterface.NotificationsSendMessage.prototype.setReceiverId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional GeneralTypeMessage data = 2;
 * @return {?proto.clientInterface.GeneralTypeMessage}
 */
proto.clientInterface.NotificationsSendMessage.prototype.getData = function() {
  return /** @type{?proto.clientInterface.GeneralTypeMessage} */ (
    jspb.Message.getWrapperField(this, proto.clientInterface.GeneralTypeMessage, 2));
};


/**
 * @param {?proto.clientInterface.GeneralTypeMessage|undefined} value
 * @return {!proto.clientInterface.NotificationsSendMessage} returns this
*/
proto.clientInterface.NotificationsSendMessage.prototype.setData = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.clientInterface.NotificationsSendMessage} returns this
 */
proto.clientInterface.NotificationsSendMessage.prototype.clearData = function() {
  return this.setData(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.clientInterface.NotificationsSendMessage.prototype.hasData = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.clientInterface.NotificationsReadMessage.prototype.toObject = function(opt_includeInstance) {
  return proto.clientInterface.NotificationsReadMessage.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.clientInterface.NotificationsReadMessage} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.clientInterface.NotificationsReadMessage.toObject = function(includeInstance, msg) {
  var f, obj = {
    unread: jspb.Message.getBooleanFieldWithDefault(msg, 1, false),
    number: jspb.Message.getFieldWithDefault(msg, 2, ""),
    order: jspb.Message.getFieldWithDefault(msg, 3, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.clientInterface.NotificationsReadMessage}
 */
proto.clientInterface.NotificationsReadMessage.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.clientInterface.NotificationsReadMessage;
  return proto.clientInterface.NotificationsReadMessage.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.clientInterface.NotificationsReadMessage} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.clientInterface.NotificationsReadMessage}
 */
proto.clientInterface.NotificationsReadMessage.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setUnread(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setNumber(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setOrder(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.clientInterface.NotificationsReadMessage.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.clientInterface.NotificationsReadMessage.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.clientInterface.NotificationsReadMessage} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.clientInterface.NotificationsReadMessage.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUnread();
  if (f) {
    writer.writeBool(
      1,
      f
    );
  }
  f = message.getNumber();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getOrder();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
};


/**
 * optional bool unread = 1;
 * @return {boolean}
 */
proto.clientInterface.NotificationsReadMessage.prototype.getUnread = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 1, false));
};


/**
 * @param {boolean} value
 * @return {!proto.clientInterface.NotificationsReadMessage} returns this
 */
proto.clientInterface.NotificationsReadMessage.prototype.setUnread = function(value) {
  return jspb.Message.setProto3BooleanField(this, 1, value);
};


/**
 * optional string number = 2;
 * @return {string}
 */
proto.clientInterface.NotificationsReadMessage.prototype.getNumber = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.clientInterface.NotificationsReadMessage} returns this
 */
proto.clientInterface.NotificationsReadMessage.prototype.setNumber = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string order = 3;
 * @return {string}
 */
proto.clientInterface.NotificationsReadMessage.prototype.getOrder = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.clientInterface.NotificationsReadMessage} returns this
 */
proto.clientInterface.NotificationsReadMessage.prototype.setOrder = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.clientInterface.NotificationsListMessage.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.clientInterface.NotificationsListMessage.prototype.toObject = function(opt_includeInstance) {
  return proto.clientInterface.NotificationsListMessage.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.clientInterface.NotificationsListMessage} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.clientInterface.NotificationsListMessage.toObject = function(includeInstance, msg) {
  var f, obj = {
    notificationList: jspb.Message.toObjectList(msg.getNotificationList(),
    proto.clientInterface.NotificationsMessage.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.clientInterface.NotificationsListMessage}
 */
proto.clientInterface.NotificationsListMessage.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.clientInterface.NotificationsListMessage;
  return proto.clientInterface.NotificationsListMessage.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.clientInterface.NotificationsListMessage} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.clientInterface.NotificationsListMessage}
 */
proto.clientInterface.NotificationsListMessage.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.clientInterface.NotificationsMessage;
      reader.readMessage(value,proto.clientInterface.NotificationsMessage.deserializeBinaryFromReader);
      msg.addNotification(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.clientInterface.NotificationsListMessage.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.clientInterface.NotificationsListMessage.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.clientInterface.NotificationsListMessage} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.clientInterface.NotificationsListMessage.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getNotificationList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.clientInterface.NotificationsMessage.serializeBinaryToWriter
    );
  }
};


/**
 * repeated NotificationsMessage notification = 1;
 * @return {!Array<!proto.clientInterface.NotificationsMessage>}
 */
proto.clientInterface.NotificationsListMessage.prototype.getNotificationList = function() {
  return /** @type{!Array<!proto.clientInterface.NotificationsMessage>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.clientInterface.NotificationsMessage, 1));
};


/**
 * @param {!Array<!proto.clientInterface.NotificationsMessage>} value
 * @return {!proto.clientInterface.NotificationsListMessage} returns this
*/
proto.clientInterface.NotificationsListMessage.prototype.setNotificationList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.clientInterface.NotificationsMessage=} opt_value
 * @param {number=} opt_index
 * @return {!proto.clientInterface.NotificationsMessage}
 */
proto.clientInterface.NotificationsListMessage.prototype.addNotification = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.clientInterface.NotificationsMessage, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.clientInterface.NotificationsListMessage} returns this
 */
proto.clientInterface.NotificationsListMessage.prototype.clearNotificationList = function() {
  return this.setNotificationList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.clientInterface.GeneralTypeMessage.prototype.toObject = function(opt_includeInstance) {
  return proto.clientInterface.GeneralTypeMessage.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.clientInterface.GeneralTypeMessage} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.clientInterface.GeneralTypeMessage.toObject = function(includeInstance, msg) {
  var f, obj = {
    message: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.clientInterface.GeneralTypeMessage}
 */
proto.clientInterface.GeneralTypeMessage.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.clientInterface.GeneralTypeMessage;
  return proto.clientInterface.GeneralTypeMessage.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.clientInterface.GeneralTypeMessage} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.clientInterface.GeneralTypeMessage}
 */
proto.clientInterface.GeneralTypeMessage.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setMessage(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.clientInterface.GeneralTypeMessage.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.clientInterface.GeneralTypeMessage.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.clientInterface.GeneralTypeMessage} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.clientInterface.GeneralTypeMessage.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMessage();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string message = 1;
 * @return {string}
 */
proto.clientInterface.GeneralTypeMessage.prototype.getMessage = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.clientInterface.GeneralTypeMessage} returns this
 */
proto.clientInterface.GeneralTypeMessage.prototype.setMessage = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.clientInterface.VaultShareTypeMessage.repeatedFields_ = [3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.clientInterface.VaultShareTypeMessage.prototype.toObject = function(opt_includeInstance) {
  return proto.clientInterface.VaultShareTypeMessage.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.clientInterface.VaultShareTypeMessage} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.clientInterface.VaultShareTypeMessage.toObject = function(includeInstance, msg) {
  var f, obj = {
    vaultId: msg.getVaultId_asB64(),
    vaultName: jspb.Message.getFieldWithDefault(msg, 2, ""),
    actionsList: (f = jspb.Message.getRepeatedField(msg, 3)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.clientInterface.VaultShareTypeMessage}
 */
proto.clientInterface.VaultShareTypeMessage.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.clientInterface.VaultShareTypeMessage;
  return proto.clientInterface.VaultShareTypeMessage.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.clientInterface.VaultShareTypeMessage} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.clientInterface.VaultShareTypeMessage}
 */
proto.clientInterface.VaultShareTypeMessage.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setVaultId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setVaultName(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.addActions(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.clientInterface.VaultShareTypeMessage.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.clientInterface.VaultShareTypeMessage.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.clientInterface.VaultShareTypeMessage} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.clientInterface.VaultShareTypeMessage.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getVaultId_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getVaultName();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getActionsList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      3,
      f
    );
  }
};


/**
 * optional bytes vault_id = 1;
 * @return {!(string|Uint8Array)}
 */
proto.clientInterface.VaultShareTypeMessage.prototype.getVaultId = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes vault_id = 1;
 * This is a type-conversion wrapper around `getVaultId()`
 * @return {string}
 */
proto.clientInterface.VaultShareTypeMessage.prototype.getVaultId_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getVaultId()));
};


/**
 * optional bytes vault_id = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getVaultId()`
 * @return {!Uint8Array}
 */
proto.clientInterface.VaultShareTypeMessage.prototype.getVaultId_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getVaultId()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.clientInterface.VaultShareTypeMessage} returns this
 */
proto.clientInterface.VaultShareTypeMessage.prototype.setVaultId = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * optional string vault_name = 2;
 * @return {string}
 */
proto.clientInterface.VaultShareTypeMessage.prototype.getVaultName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.clientInterface.VaultShareTypeMessage} returns this
 */
proto.clientInterface.VaultShareTypeMessage.prototype.setVaultName = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * repeated string actions = 3;
 * @return {!Array<string>}
 */
proto.clientInterface.VaultShareTypeMessage.prototype.getActionsList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 3));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.clientInterface.VaultShareTypeMessage} returns this
 */
proto.clientInterface.VaultShareTypeMessage.prototype.setActionsList = function(value) {
  return jspb.Message.setField(this, 3, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.clientInterface.VaultShareTypeMessage} returns this
 */
proto.clientInterface.VaultShareTypeMessage.prototype.addActions = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 3, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.clientInterface.VaultShareTypeMessage} returns this
 */
proto.clientInterface.VaultShareTypeMessage.prototype.clearActionsList = function() {
  return this.setActionsList([]);
};


goog.object.extend(exports, proto.clientInterface);
